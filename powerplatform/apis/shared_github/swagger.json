{
  "swagger": "2.0",
  "info": {
    "version": "1.0",
    "title": "GitHub",
    "description": "GitHub is a web-based Git repository hosting service. It offers all of the distributed revision control and source code management (SCM) functionality of Git as well as adding its own features.",
    "x-ms-api-annotation": {
      "status": "Production"
    },
    "contact": {
      "name": "Microsoft"
    }
  },
  "host": "europe-002.azure-apim.net",
  "basePath": "/apim/github",
  "schemes": [
    "https"
  ],
  "paths": {
    "/{connectionId}/repos/{repositoryOwner}/{repositoryName}/issues": {
      "post": {
        "tags": [
          "GitHub"
        ],
        "summary": "Create an issue",
        "description": "This operation is used to create a new issue for a specific repository.",
        "operationId": "CreateIssue",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "connectionId",
            "in": "path",
            "required": true,
            "type": "string",
            "x-ms-visibility": "internal"
          },
          {
            "$ref": "#/parameters/repositoryOwner"
          },
          {
            "$ref": "#/parameters/repositoryName"
          },
          {
            "name": "issueBasicDetails",
            "in": "body",
            "description": "Details of the issue.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IssueBasicDetailsModel"
            },
            "x-ms-summary": "Issue"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/IssueDetailsModel"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error. Unknown error occurred"
          },
          "default": {
            "description": "Operation Failed."
          }
        },
        "deprecated": false,
        "x-ms-visibility": "important",
        "externalDocs": {
          "url": "https://docs.microsoft.com/connectors/github/#create-an-issue"
        }
      },
      "get": {
        "tags": [
          "GitHub"
        ],
        "summary": "Get all issues of a repository",
        "description": "Get all issues of a repository.",
        "operationId": "GetIssues",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "connectionId",
            "in": "path",
            "required": true,
            "type": "string",
            "x-ms-visibility": "internal"
          },
          {
            "$ref": "#/parameters/repositoryOwner"
          },
          {
            "$ref": "#/parameters/repositoryName"
          },
          {
            "name": "milestone",
            "in": "query",
            "required": false,
            "type": "string",
            "x-ms-summary": "milestone",
            "description": "Filter by milestone."
          },
          {
            "name": "state",
            "in": "query",
            "required": false,
            "type": "string",
            "x-ms-summary": "state",
            "description": "Filter by state."
          },
          {
            "name": "assignee",
            "in": "query",
            "required": false,
            "type": "string",
            "x-ms-summary": "assignee",
            "description": "Filter by assignee."
          },
          {
            "name": "creator",
            "in": "query",
            "required": false,
            "type": "string",
            "x-ms-summary": "creator",
            "description": "Filter by creator."
          },
          {
            "name": "mentioned",
            "in": "query",
            "required": false,
            "type": "string",
            "x-ms-summary": "mentioned",
            "description": "Filter by mentions."
          },
          {
            "name": "labels",
            "in": "query",
            "required": false,
            "type": "string",
            "x-ms-summary": "labels",
            "description": "Filter by label names."
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string",
            "x-ms-summary": "sort",
            "description": "Field to sort results by."
          },
          {
            "name": "direction",
            "in": "query",
            "required": false,
            "type": "string",
            "x-ms-summary": "direction",
            "description": "Direction of sort."
          },
          {
            "name": "since",
            "in": "query",
            "required": false,
            "type": "string",
            "x-ms-summary": "since",
            "description": "Filter by issues after given date."
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "type": "integer",
            "x-ms-summary": "per_page",
            "description": "Number of results per page."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "x-ms-summary": "page",
            "description": "Page number to display."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MultipleFetchModel"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error. Unknown error occurred"
          },
          "default": {
            "description": "Operation Failed."
          }
        },
        "deprecated": false,
        "x-ms-visibility": "important",
        "externalDocs": {
          "url": "https://docs.microsoft.com/connectors/github/#get-all-issues-of-a-repository"
        }
      }
    },
    "/{connectionId}/repos/{repositoryOwner}/{repositoryName}/actions/secrets/public-key": {
      "get": {
        "tags": [
          "GitHub"
        ],
        "summary": "Get a repository public key",
        "description": "Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets.",
        "operationId": "GetRepositoryPublicKey",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "connectionId",
            "in": "path",
            "required": true,
            "type": "string",
            "x-ms-visibility": "internal"
          },
          {
            "$ref": "#/parameters/repositoryOwner"
          },
          {
            "$ref": "#/parameters/repositoryName"
          },
          {
            "$ref": "#/parameters/defaultAcceptHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ActionsPublicKey"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error. Unknown error occurred"
          },
          "default": {
            "description": "Operation Failed."
          }
        },
        "deprecated": false,
        "x-ms-visibility": "important",
        "x-ms-api-annotation": {
          "status": "Preview"
        },
        "externalDocs": {
          "url": "https://docs.microsoft.com/connectors/github/#get-a-repository-public-key"
        }
      }
    },
    "/{connectionId}/repos/{repositoryOwner}/{repositoryName}/actions/secrets/{secretName}": {
      "put": {
        "tags": [
          "GitHub"
        ],
        "summary": "Create or update a repository secret",
        "description": "Creates or updates a repository secret with an encrypted value. Encrypt your secret using LibSodium.",
        "operationId": "CreateUpdateRepositorySecret",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "connectionId",
            "in": "path",
            "required": true,
            "type": "string",
            "x-ms-visibility": "internal"
          },
          {
            "$ref": "#/parameters/repositoryOwner"
          },
          {
            "$ref": "#/parameters/repositoryName"
          },
          {
            "$ref": "#/parameters/secretName"
          },
          {
            "$ref": "#/parameters/defaultAcceptHeader"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateRepositorySecretRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Response when creating a secret"
          },
          "204": {
            "description": "Response when updating a secret"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error. Unknown error occurred"
          },
          "default": {
            "description": "Operation Failed."
          }
        },
        "deprecated": false,
        "x-ms-visibility": "important",
        "x-ms-api-annotation": {
          "status": "Preview"
        },
        "externalDocs": {
          "url": "https://docs.microsoft.com/connectors/github/#create-or-update-a-repository-secret"
        }
      }
    },
    "/{connectionId}/repos/{templateOwner}/{templateRepository}/generate": {
      "post": {
        "tags": [
          "GitHub"
        ],
        "summary": "Create a repository using a template",
        "description": "Creates a new repository using a repository template. The authenticated user must own or be a member of an organization that owns the repository.",
        "operationId": "CreateRepositoryUsingTemplate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "connectionId",
            "in": "path",
            "required": true,
            "type": "string",
            "x-ms-visibility": "internal"
          },
          {
            "$ref": "#/parameters/templateOwner"
          },
          {
            "$ref": "#/parameters/templateRepository"
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "default": "application/vnd.github.baptiste-preview+json",
            "x-ms-visibility": "internal"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateRepositoryUsingTemplateRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RepositoryDetails"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Failed"
          },
          "500": {
            "description": "Internal Server Error. Unknown error occurred"
          },
          "default": {
            "description": "Operation Failed."
          }
        },
        "deprecated": false,
        "x-ms-visibility": "important",
        "x-ms-api-annotation": {
          "status": "Preview"
        },
        "externalDocs": {
          "url": "https://docs.microsoft.com/connectors/github/#create-a-repository-using-a-template"
        }
      }
    },
    "/{connectionId}/repositories/{repositoryId}": {
      "get": {
        "tags": [
          "GitHub"
        ],
        "summary": "Get a repository by Id",
        "description": "Gets a repository by Id.",
        "operationId": "GetRepositoryById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "connectionId",
            "in": "path",
            "required": true,
            "type": "string",
            "x-ms-visibility": "internal"
          },
          {
            "$ref": "#/parameters/repositoryId"
          },
          {
            "$ref": "#/parameters/defaultAcceptHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RepositoryDetails"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error. Unknown error occurred"
          },
          "default": {
            "description": "Operation Failed."
          }
        },
        "deprecated": false,
        "x-ms-visibility": "important",
        "x-ms-api-annotation": {
          "status": "Preview"
        },
        "externalDocs": {
          "url": "https://docs.microsoft.com/connectors/github/#get-a-repository-by-id"
        }
      }
    },
    "/{connectionId}/repos/{repositoryOwner}/{repositoryName}/git/refs": {
      "post": {
        "tags": [
          "GitHub"
        ],
        "summary": "Create a reference",
        "description": "Creates a reference for your repository. You are unable to create new references for empty repositories, even if the commit SHA-1 hash used exists. Empty repositories are repositories without branches.",
        "operationId": "CreateReference",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "connectionId",
            "in": "path",
            "required": true,
            "type": "string",
            "x-ms-visibility": "internal"
          },
          {
            "$ref": "#/parameters/repositoryOwner"
          },
          {
            "$ref": "#/parameters/repositoryName"
          },
          {
            "$ref": "#/parameters/defaultAcceptHeader"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateReferenceRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GitReference"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Failed"
          },
          "500": {
            "description": "Internal Server Error. Unknown error occurred"
          },
          "default": {
            "description": "Operation Failed."
          }
        },
        "deprecated": false,
        "x-ms-visibility": "important",
        "x-ms-api-annotation": {
          "status": "Preview"
        },
        "externalDocs": {
          "url": "https://docs.microsoft.com/connectors/github/#create-a-reference"
        }
      }
    },
    "/{connectionId}/repos/{repositoryOwner}/{repositoryName}/git/ref/{reference}": {
      "get": {
        "tags": [
          "GitHub"
        ],
        "summary": "Get a reference",
        "description": "Returns a single reference from your Git database. The `reference` parameter must be formatted as `heads/<branch name>` for branches and `tags/<tag name>` for tags. If the `reference` doesn't match an existing ref, a `404` is returned.",
        "operationId": "GetReference",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "connectionId",
            "in": "path",
            "required": true,
            "type": "string",
            "x-ms-visibility": "internal"
          },
          {
            "$ref": "#/parameters/repositoryOwner"
          },
          {
            "$ref": "#/parameters/repositoryName"
          },
          {
            "$ref": "#/parameters/reference"
          },
          {
            "$ref": "#/parameters/defaultAcceptHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GitReference"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error. Unknown error occurred"
          },
          "default": {
            "description": "Operation Failed."
          }
        },
        "deprecated": false,
        "x-ms-visibility": "important",
        "x-ms-api-annotation": {
          "status": "Preview"
        },
        "externalDocs": {
          "url": "https://docs.microsoft.com/connectors/github/#get-a-reference"
        }
      }
    },
    "/{connectionId}/repos/{repositoryOwner}/{repositoryName}/pulls/{pullNumber}/merge": {
      "put": {
        "tags": [
          "GitHub"
        ],
        "summary": "Merge a pull request",
        "description": "This operation is used to merge a pull request for the repository.",
        "operationId": "MergePullRequest",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "connectionId",
            "in": "path",
            "required": true,
            "type": "string",
            "x-ms-visibility": "internal"
          },
          {
            "$ref": "#/parameters/repositoryOwner"
          },
          {
            "$ref": "#/parameters/repositoryName"
          },
          {
            "$ref": "#/parameters/pullNumber"
          },
          {
            "$ref": "#/parameters/defaultAcceptHeader"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PullRequestMergeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PullRequestMergeResult"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Merge cannot be performed"
          },
          "409": {
            "description": "Sha was provided and pull request head did not match"
          },
          "422": {
            "description": "Validation Failed"
          },
          "500": {
            "description": "Internal Server Error. Unknown error occurred"
          },
          "default": {
            "description": "Operation Failed."
          }
        },
        "deprecated": false,
        "x-ms-visibility": "important",
        "x-ms-api-annotation": {
          "status": "Preview"
        },
        "externalDocs": {
          "url": "https://docs.microsoft.com/connectors/github/#merge-a-pull-request"
        }
      }
    },
    "/{connectionId}/repos/{repositoryOwner}/{repositoryName}/pulls/{pullNumber}": {
      "get": {
        "tags": [
          "GitHub"
        ],
        "summary": "Get a pull request",
        "description": "This operation is used to get a pull request for the repository.",
        "operationId": "GetPullRequest",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "connectionId",
            "in": "path",
            "required": true,
            "type": "string",
            "x-ms-visibility": "internal"
          },
          {
            "$ref": "#/parameters/repositoryOwner"
          },
          {
            "$ref": "#/parameters/repositoryName"
          },
          {
            "$ref": "#/parameters/pullNumber"
          },
          {
            "$ref": "#/parameters/defaultAcceptHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PullRequest"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Failed"
          },
          "500": {
            "description": "Internal Server Error. Unknown error occurred"
          },
          "default": {
            "description": "Operation Failed."
          }
        },
        "deprecated": false,
        "x-ms-visibility": "important",
        "x-ms-api-annotation": {
          "status": "Preview"
        },
        "externalDocs": {
          "url": "https://docs.microsoft.com/connectors/github/#get-a-pull-request"
        }
      },
      "patch": {
        "tags": [
          "GitHub"
        ],
        "summary": "Update a pull request",
        "description": "This operation is used to update a pull request for the repository. To update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.",
        "operationId": "UpdatePullRequest",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "connectionId",
            "in": "path",
            "required": true,
            "type": "string",
            "x-ms-visibility": "internal"
          },
          {
            "$ref": "#/parameters/repositoryOwner"
          },
          {
            "$ref": "#/parameters/repositoryName"
          },
          {
            "$ref": "#/parameters/pullNumber"
          },
          {
            "$ref": "#/parameters/defaultAcceptHeader"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PullRequestUpdateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PullRequest"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Failed"
          },
          "500": {
            "description": "Internal Server Error. Unknown error occurred"
          },
          "default": {
            "description": "Operation Failed."
          }
        },
        "deprecated": false,
        "x-ms-visibility": "important",
        "x-ms-api-annotation": {
          "status": "Preview"
        },
        "externalDocs": {
          "url": "https://docs.microsoft.com/connectors/github/#update-a-pull-request"
        }
      }
    },
    "/{connectionId}/repos/{repositoryOwner}/{repositoryName}/pulls/{pullNumber}/files": {
      "get": {
        "tags": [
          "GitHub"
        ],
        "summary": "Get the list of files from a pull request",
        "description": "This operation is used to get the list of files from a pull request for the repository.",
        "operationId": "GetPullRequestFiles",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "connectionId",
            "in": "path",
            "required": true,
            "type": "string",
            "x-ms-visibility": "internal"
          },
          {
            "$ref": "#/parameters/repositoryOwner"
          },
          {
            "$ref": "#/parameters/repositoryName"
          },
          {
            "$ref": "#/parameters/pullNumber"
          },
          {
            "$ref": "#/parameters/defaultAcceptHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PullRequestFile"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error. Unknown error occurred"
          },
          "default": {
            "description": "Operation Failed."
          }
        },
        "deprecated": false,
        "x-ms-visibility": "important",
        "x-ms-api-annotation": {
          "status": "Preview"
        },
        "externalDocs": {
          "url": "https://docs.microsoft.com/connectors/github/#get-the-list-of-files-from-a-pull-request"
        }
      }
    },
    "/{connectionId}/repos/{repositoryOwner}/{repositoryName}/pulls/{pullNumber}/requested_reviewers": {
      "post": {
        "tags": [
          "GitHub"
        ],
        "summary": "Request reviewers for a pull request",
        "description": "Requests reviews for a pull request from a given set of users and/or teams.",
        "operationId": "RequestReviewersPullRequest",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "connectionId",
            "in": "path",
            "required": true,
            "type": "string",
            "x-ms-visibility": "internal"
          },
          {
            "$ref": "#/parameters/repositoryOwner"
          },
          {
            "$ref": "#/parameters/repositoryName"
          },
          {
            "$ref": "#/parameters/pullNumber"
          },
          {
            "$ref": "#/parameters/defaultAcceptHeader"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RequestReviewersBody"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error. Unknown error occurred"
          },
          "default": {
            "description": "Operation Failed."
          }
        },
        "deprecated": false,
        "x-ms-visibility": "important",
        "x-ms-api-annotation": {
          "status": "Preview"
        },
        "externalDocs": {
          "url": "https://docs.microsoft.com/connectors/github/#request-reviewers-for-a-pull-request"
        }
      }
    },
    "/{connectionId}/repos/{repositoryOwner}/{repositoryName}/pulls": {
      "post": {
        "tags": [
          "GitHub"
        ],
        "summary": "Create a pull request",
        "description": "This operation is to create a pull request in a repository. To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to create a pull request.",
        "operationId": "CreatePullRequest",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "connectionId",
            "in": "path",
            "required": true,
            "type": "string",
            "x-ms-visibility": "internal"
          },
          {
            "$ref": "#/parameters/repositoryOwner"
          },
          {
            "$ref": "#/parameters/repositoryName"
          },
          {
            "$ref": "#/parameters/defaultAcceptHeader"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PullRequestCreateRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PullRequest"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Failed"
          },
          "500": {
            "description": "Internal Server Error. Unknown error occurred"
          },
          "default": {
            "description": "Operation Failed."
          }
        },
        "deprecated": false,
        "x-ms-visibility": "important",
        "x-ms-api-annotation": {
          "status": "Preview"
        },
        "externalDocs": {
          "url": "https://docs.microsoft.com/connectors/github/#create-a-pull-request"
        }
      },
      "get": {
        "tags": [
          "GitHub"
        ],
        "summary": "Get all Pull Requests of A Repository",
        "description": "Get all Pull Requests of A Repository.",
        "operationId": "GetPullRequests",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "connectionId",
            "in": "path",
            "required": true,
            "type": "string",
            "x-ms-visibility": "internal"
          },
          {
            "$ref": "#/parameters/repositoryOwner"
          },
          {
            "$ref": "#/parameters/repositoryName"
          },
          {
            "in": "query",
            "name": "state",
            "description": "Filter by state.",
            "required": false,
            "type": "string",
            "x-ms-summary": "state"
          },
          {
            "in": "query",
            "name": "head",
            "description": "Filter by head user or organization.",
            "required": false,
            "type": "string",
            "x-ms-summary": "head"
          },
          {
            "in": "query",
            "name": "base",
            "description": "Filter by base branch name.",
            "required": false,
            "type": "string",
            "x-ms-summary": "base"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "What to sort the results by.",
            "required": false,
            "type": "string",
            "x-ms-summary": "sort"
          },
          {
            "in": "query",
            "name": "direction",
            "description": "Direction of sort.",
            "required": false,
            "type": "string",
            "x-ms-summary": "direction"
          },
          {
            "in": "query",
            "name": "per_page",
            "description": "Number of results per page.",
            "required": false,
            "type": "integer",
            "x-ms-summary": "perPage"
          },
          {
            "in": "query",
            "name": "page",
            "description": "Page number to display.",
            "required": false,
            "type": "integer",
            "x-ms-summary": "page"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MultipleFetchModel"
            }
          },
          "304": {
            "description": "Not modified"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Validation failed"
          },
          "500": {
            "description": "Internal Server Error. Unknown error occurred"
          },
          "default": {
            "description": "Operation Failed."
          }
        },
        "deprecated": false,
        "x-ms-visibility": "important",
        "externalDocs": {
          "url": "https://docs.microsoft.com/connectors/github/#get-all-pull-requests-of-a-repository"
        }
      }
    },
    "/{connectionId}/repos/{repositoryOwner}/{repositoryName}/dispatches": {
      "post": {
        "summary": "Create a repository dispatch event",
        "description": "This operation is to trigger a webhook event called `repository_dispatch` when you want activity that happens outside of GitHub to trigger a GitHub Actions workflow or GitHub App webhook. You must configure your GitHub Actions workflow or GitHub App to run when the `repository_dispatch` event occurs.",
        "tags": [
          "repos"
        ],
        "operationId": "CreateRepositoryDispatchEvent",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "connectionId",
            "in": "path",
            "required": true,
            "type": "string",
            "x-ms-visibility": "internal"
          },
          {
            "$ref": "#/parameters/repositoryOwner"
          },
          {
            "$ref": "#/parameters/repositoryName"
          },
          {
            "$ref": "#/parameters/defaultAcceptHeader"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RepositoryDispatchEvent"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          },
          "422": {
            "description": "Validation Failed"
          }
        },
        "deprecated": false,
        "x-ms-visibility": "important",
        "x-ms-api-annotation": {
          "status": "Preview"
        },
        "externalDocs": {
          "url": "https://docs.microsoft.com/connectors/github/#create-a-repository-dispatch-event"
        }
      }
    },
    "/{connectionId}/repos/{repositoryOwner}/{repositoryName}/compare/{base}...{head}": {
      "get": {
        "summary": "Compare two commits",
        "description": "Both `base` and `head` must be branch names in `repositoryName`. To compare branches across other repositories in the same network as `repositoryName`, use the format `<USERNAME>:branch`. The response is equivalent to running the `git log base..head` command; however, commits are returned in chronological order.",
        "tags": [
          "repos"
        ],
        "operationId": "CompareRepositoryCommits",
        "parameters": [
          {
            "name": "connectionId",
            "in": "path",
            "required": true,
            "type": "string",
            "x-ms-visibility": "internal"
          },
          {
            "$ref": "#/parameters/repositoryOwner"
          },
          {
            "$ref": "#/parameters/repositoryName"
          },
          {
            "name": "base",
            "description": "base parameter",
            "in": "path",
            "required": true,
            "type": "string",
            "x-ms-summary": "Base"
          },
          {
            "name": "head",
            "description": "head parameter",
            "in": "path",
            "required": true,
            "type": "string",
            "x-ms-summary": "Head"
          },
          {
            "$ref": "#/parameters/defaultAcceptHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CommitComparison"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error. Unknown error occurred"
          }
        },
        "deprecated": false,
        "x-ms-visibility": "important",
        "x-ms-api-annotation": {
          "status": "Preview"
        },
        "externalDocs": {
          "url": "https://docs.microsoft.com/connectors/github/#compare-two-commits"
        }
      }
    },
    "/{connectionId}/orgs/{repositoryOwner}/actions/secrets/{secretName}/repositories/{repositoryId}": {
      "put": {
        "summary": "Add selected repository to an organization secret",
        "description": "Adds a repository to an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://developer.github.com/v3/actions/secrets/#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.",
        "tags": [
          "actions"
        ],
        "operationId": "AddSelectedRepoToOrgSecret",
        "parameters": [
          {
            "name": "connectionId",
            "in": "path",
            "required": true,
            "type": "string",
            "x-ms-visibility": "internal"
          },
          {
            "$ref": "#/parameters/repositoryOwner"
          },
          {
            "$ref": "#/parameters/repositoryId"
          },
          {
            "$ref": "#/parameters/secretName"
          }
        ],
        "responses": {
          "204": {
            "description": "Response when repository was added to the selected list"
          },
          "409": {
            "description": "Response when visibility type is not set to selected"
          }
        },
        "deprecated": false,
        "x-ms-visibility": "important",
        "x-ms-api-annotation": {
          "status": "Preview"
        },
        "externalDocs": {
          "url": "https://docs.microsoft.com/connectors/github/#add-selected-repository-to-an-organization-secret"
        }
      },
      "delete": {
        "summary": "Remove selected repository from an organization secret",
        "description": "Removes a repository from an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://developer.github.com/v3/actions/secrets/#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.",
        "tags": [
          "actions"
        ],
        "operationId": "RemoveSelectedRepoFromOrgSecret",
        "parameters": [
          {
            "name": "connectionId",
            "in": "path",
            "required": true,
            "type": "string",
            "x-ms-visibility": "internal"
          },
          {
            "$ref": "#/parameters/repositoryOwner"
          },
          {
            "$ref": "#/parameters/repositoryId"
          },
          {
            "$ref": "#/parameters/secretName"
          }
        ],
        "responses": {
          "204": {
            "description": "Response when repository was removed from the selected list"
          },
          "409": {
            "description": "Response when visibility type not set to selected"
          }
        },
        "deprecated": false,
        "x-ms-visibility": "important",
        "x-ms-api-annotation": {
          "status": "Preview"
        },
        "externalDocs": {
          "url": "https://docs.microsoft.com/connectors/github/#remove-selected-repository-from-an-organization-secret"
        }
      }
    },
    "/{connectionId}/repos/{repositoryOwner}/{repositoryName}/hooks": {
      "x-ms-notification-content": {
        "description": "Details for Webhook",
        "schema": {
          "$ref": "#/definitions/WebhookPullRequestResponse"
        },
        "parameters": [
          {
            "name": "connectionId",
            "in": "path",
            "required": true,
            "type": "string",
            "x-ms-visibility": "internal"
          }
        ]
      },
      "post": {
        "description": "Creates a GitHub Webhook for Pull Requests",
        "summary": "When a pull request is created or modified",
        "operationId": "WebhookPullRequestTrigger",
        "parameters": [
          {
            "name": "connectionId",
            "in": "path",
            "required": true,
            "type": "string",
            "x-ms-visibility": "internal"
          },
          {
            "$ref": "#/parameters/repositoryOwner"
          },
          {
            "$ref": "#/parameters/repositoryName"
          },
          {
            "$ref": "#/parameters/defaultAcceptHeader"
          },
          {
            "name": "Request body of webhook",
            "in": "body",
            "description": "This is the request body of the Webhook",
            "schema": {
              "$ref": "#/definitions/WebhookRequestBody"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/WebhookCreationResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error. Unknown error occurred"
          },
          "default": {
            "description": "Operation Failed."
          }
        },
        "deprecated": false,
        "x-ms-api-annotation": {
          "status": "Preview"
        },
        "x-ms-trigger": "single",
        "x-ms-trigger-hint": "To see it work, create of modify a pullrequest.",
        "externalDocs": {
          "url": "https://docs.microsoft.com/connectors/github/#when-a-pull-request-is-created-or-modified"
        }
      }
    },
    "/{connectionId}/repos/{repositoryOwner}/{repositoryName}/hooks/{webhookId}": {
      "delete": {
        "description": "Deletes a GitHub Webhook",
        "summary": "Deletes a GitHub Webhook",
        "operationId": "DeleteWebhookTrigger",
        "parameters": [
          {
            "name": "connectionId",
            "in": "path",
            "required": true,
            "type": "string",
            "x-ms-visibility": "internal"
          },
          {
            "$ref": "#/parameters/repositoryOwner"
          },
          {
            "$ref": "#/parameters/repositoryName"
          },
          {
            "name": "webhookId",
            "description": "ID of the GitHub Webhook",
            "in": "path",
            "required": true,
            "x-ms-summary": "GitHub Webhook ID",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error. Unknown error occurred"
          },
          "default": {
            "description": "Operation Failed."
          }
        },
        "deprecated": false,
        "x-ms-api-annotation": {
          "status": "Preview"
        },
        "externalDocs": {
          "url": "https://docs.microsoft.com/connectors/github/#deletes-a-github-webhook"
        }
      }
    },
    "/{connectionId}/trigger/issueOpened": {
      "get": {
        "tags": [
          "GitHub"
        ],
        "summary": "When a new issue is opened and assigned to me",
        "description": "This operation triggers when an issue is opened and assigned to the logged in user.",
        "operationId": "IssueOpened",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/IssueDetailsModel"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error. Unknown error occurred"
          },
          "default": {
            "description": "Operation Failed."
          }
        },
        "deprecated": false,
        "x-ms-visibility": "important",
        "x-ms-trigger": "batch",
        "x-ms-trigger-hint": "To see it work now, open a new issue in GitHub.",
        "externalDocs": {
          "url": "https://docs.microsoft.com/connectors/github/#when-a-new-issue-is-opened-and-assigned-to-me"
        },
        "parameters": [
          {
            "name": "connectionId",
            "in": "path",
            "required": true,
            "type": "string",
            "x-ms-visibility": "internal"
          }
        ]
      }
    },
    "/{connectionId}/trigger/issueClosed": {
      "get": {
        "tags": [
          "GitHub"
        ],
        "summary": "When an issue assigned to me is closed",
        "description": "This operation triggers when an issue assigned to the logged in user is closed.",
        "operationId": "IssueClosed",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/IssueDetailsModel"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error. Unknown error occurred"
          },
          "default": {
            "description": "Operation Failed."
          }
        },
        "deprecated": false,
        "x-ms-visibility": "important",
        "x-ms-trigger": "batch",
        "x-ms-trigger-hint": "To see it work now, close an issue in GitHub.",
        "externalDocs": {
          "url": "https://docs.microsoft.com/connectors/github/#when-an-issue-assigned-to-me-is-closed"
        },
        "parameters": [
          {
            "name": "connectionId",
            "in": "path",
            "required": true,
            "type": "string",
            "x-ms-visibility": "internal"
          }
        ]
      }
    },
    "/{connectionId}/trigger/issueAssigned": {
      "get": {
        "tags": [
          "GitHub"
        ],
        "summary": "When an issue is assigned to me",
        "description": "This operation triggers when an issue is assigned to the logged in user.",
        "operationId": "IssueAssigned",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/IssueDetailsModel"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error. Unknown error occurred"
          },
          "default": {
            "description": "Operation Failed."
          }
        },
        "deprecated": false,
        "x-ms-visibility": "important",
        "x-ms-trigger": "batch",
        "x-ms-trigger-hint": "To see it work now, assign an issue in GitHub.",
        "externalDocs": {
          "url": "https://docs.microsoft.com/connectors/github/#when-an-issue-is-assigned-to-me"
        },
        "parameters": [
          {
            "name": "connectionId",
            "in": "path",
            "required": true,
            "type": "string",
            "x-ms-visibility": "internal"
          }
        ]
      }
    },
    "/{connectionId}/repos/{repositoryOwner}/{repositoryName}/issues/{issueNumber}": {
      "get": {
        "tags": [
          "GitHub"
        ],
        "summary": "Get a particular issue of a repository",
        "description": "Get a particular issue of a repository.",
        "operationId": "GetIssueNum",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "connectionId",
            "in": "path",
            "required": true,
            "type": "string",
            "x-ms-visibility": "internal"
          },
          {
            "$ref": "#/parameters/repositoryOwner"
          },
          {
            "$ref": "#/parameters/repositoryName"
          },
          {
            "$ref": "#/parameters/issueNumber"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/IssueDetailsModel"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error. Unknown error occurred"
          },
          "default": {
            "description": "Operation Failed."
          }
        },
        "deprecated": false,
        "x-ms-visibility": "important",
        "externalDocs": {
          "url": "https://docs.microsoft.com/connectors/github/#get-a-particular-issue-of-a-repository"
        }
      },
      "patch": {
        "tags": [
          "GitHub"
        ],
        "summary": "Update an Issue",
        "description": "Update an existing issue given the issue number.",
        "operationId": "UpdateIssueNum",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "connectionId",
            "in": "path",
            "required": true,
            "type": "string",
            "x-ms-visibility": "internal"
          },
          {
            "$ref": "#/parameters/repositoryOwner"
          },
          {
            "$ref": "#/parameters/repositoryName"
          },
          {
            "$ref": "#/parameters/issueNumber"
          },
          {
            "name": "issueUpdate",
            "in": "body",
            "description": "Updated details of the Issue.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IssueUpdateModel"
            },
            "x-ms-summary": "IssueUpdate"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/IssueDetailsModel"
            }
          },
          "301": {
            "description": "Moved Permanently"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "410": {
            "description": "Gone"
          },
          "422": {
            "description": "Validation Failed"
          },
          "500": {
            "description": "Internal Server Error. Unknown error occurred"
          },
          "503": {
            "description": "Service unavailable"
          },
          "default": {
            "description": "Operation Failed."
          }
        },
        "deprecated": false,
        "x-ms-visibility": "important",
        "externalDocs": {
          "url": "https://docs.microsoft.com/connectors/github/#update-an-issue"
        }
      }
    },
    "/{connectionId}/repos/{repositoryOwner}/{repositoryName}/milestones/{milestoneNumber}": {
      "patch": {
        "tags": [
          "GitHub"
        ],
        "summary": "Update a milestone",
        "description": "Update an existing milestone.",
        "operationId": "UpdateMilestone",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "connectionId",
            "in": "path",
            "required": true,
            "type": "string",
            "x-ms-visibility": "internal"
          },
          {
            "$ref": "#/parameters/repositoryOwner"
          },
          {
            "$ref": "#/parameters/repositoryName"
          },
          {
            "$ref": "#/parameters/milestoneNumber"
          },
          {
            "name": "milestoneUpdate",
            "in": "body",
            "description": "Updated details of the Milestone.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/MilestoneUpdateModel"
            },
            "x-ms-summary": "MilestoneUpdate"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Milestone"
            }
          },
          "301": {
            "description": "Moved Permanently"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "410": {
            "description": "Gone"
          },
          "422": {
            "description": "Validation Failed"
          },
          "500": {
            "description": "Internal Server Error. Unknown error occurred"
          },
          "503": {
            "description": "Service unavailable"
          },
          "default": {
            "description": "Operation Failed."
          }
        },
        "deprecated": false,
        "x-ms-visibility": "important",
        "externalDocs": {
          "url": "https://docs.microsoft.com/connectors/github/#update-a-milestone"
        }
      }
    },
    "/{connectionId}/user": {
      "get": {
        "tags": [
          "GitHub"
        ],
        "summary": "Get the authenticated user",
        "description": "Get the authenticated user.",
        "operationId": "GetUser",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserDetailsModel"
            }
          },
          "304": {
            "description": "Not modified"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error. Unknown error occurred"
          },
          "default": {
            "description": "Operation Failed."
          }
        },
        "deprecated": false,
        "x-ms-visibility": "important",
        "externalDocs": {
          "url": "https://docs.microsoft.com/connectors/github/#get-the-authenticated-user"
        },
        "parameters": [
          {
            "name": "connectionId",
            "in": "path",
            "required": true,
            "type": "string",
            "x-ms-visibility": "internal"
          }
        ]
      }
    },
    "/{connectionId}/graphql": {
      "post": {
        "tags": [
          "GitHub"
        ],
        "summary": "Search Github using Query",
        "description": "Search Github using Query",
        "operationId": "SearchGithubWithQuery",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "connectionId",
            "in": "path",
            "required": true,
            "type": "string",
            "x-ms-visibility": "internal"
          },
          {
            "name": "query",
            "in": "body",
            "description": "Updated details of the Milestone.",
            "required": true,
            "x-ms-summary": "query",
            "schema": {
              "$ref": "#/definitions/GraphQlQuery"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "304": {
            "description": "Not modified"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error. Unknown error occurred"
          },
          "default": {
            "description": "Operation Failed."
          }
        },
        "deprecated": false,
        "x-ms-visibility": "important",
        "externalDocs": {
          "url": "https://docs.microsoft.com/connectors/github/#search-github-using-query"
        }
      }
    },
    "/{connectionId}/repos/{repositoryOwner}/{repositoryName}/assignees": {
      "get": {
        "tags": [
          "GitHub"
        ],
        "summary": "Lists the available assignees for issues in a repository",
        "description": "Lists the available assignees for issues in a repository.",
        "operationId": "GetAssignees",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "connectionId",
            "in": "path",
            "required": true,
            "type": "string",
            "x-ms-visibility": "internal"
          },
          {
            "$ref": "#/parameters/repositoryOwner"
          },
          {
            "$ref": "#/parameters/repositoryName"
          },
          {
            "in": "query",
            "name": "per_page",
            "description": "Number of results per page.",
            "required": false,
            "type": "integer",
            "x-ms-summary": "per_page"
          },
          {
            "in": "query",
            "name": "page",
            "description": "Page number to display.",
            "required": false,
            "type": "integer",
            "x-ms-summary": "page"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MultipleFetchModel"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error. Unknown error occurred"
          },
          "default": {
            "description": "Operation Failed."
          }
        },
        "deprecated": false,
        "x-ms-visibility": "important",
        "externalDocs": {
          "url": "https://docs.microsoft.com/connectors/github/#lists-the-available-assignees-for-issues-in-a-repository"
        }
      }
    },
    "/{connectionId}/repos/{repositoryOwner}/{repositoryName}/milestones": {
      "get": {
        "tags": [
          "GitHub"
        ],
        "summary": "Lists all milestones of a repository",
        "description": "Lists all milestones of a repository.",
        "operationId": "GetMilestones",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "connectionId",
            "in": "path",
            "required": true,
            "type": "string",
            "x-ms-visibility": "internal"
          },
          {
            "$ref": "#/parameters/repositoryOwner"
          },
          {
            "$ref": "#/parameters/repositoryName"
          },
          {
            "in": "query",
            "name": "state",
            "description": "State of the milestone.",
            "required": false,
            "type": "string",
            "x-ms-summary": "state"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "What to sort the results by.",
            "required": false,
            "type": "string",
            "x-ms-summary": "sort"
          },
          {
            "in": "query",
            "name": "direction",
            "description": "Direction of sort.",
            "required": false,
            "type": "string",
            "x-ms-summary": "direction"
          },
          {
            "in": "query",
            "name": "per_page",
            "description": "Number of results per page.",
            "required": false,
            "type": "integer",
            "x-ms-summary": "per_page"
          },
          {
            "in": "query",
            "name": "page",
            "description": "Page number to display.",
            "required": false,
            "type": "integer",
            "x-ms-summary": "page"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MultipleFetchModel"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error. Unknown error occurred"
          },
          "default": {
            "description": "Operation Failed."
          }
        },
        "deprecated": false,
        "x-ms-visibility": "important",
        "externalDocs": {
          "url": "https://docs.microsoft.com/connectors/github/#lists-all-milestones-of-a-repository"
        }
      }
    },
    "/{connectionId}/repos/{repositoryOwner}/{repositoryName}/labels": {
      "get": {
        "tags": [
          "GitHub"
        ],
        "summary": "Lists all labels for a repository",
        "description": "Lists all labels for a repository.",
        "operationId": "GetLabels",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "connectionId",
            "in": "path",
            "required": true,
            "type": "string",
            "x-ms-visibility": "internal"
          },
          {
            "$ref": "#/parameters/repositoryOwner"
          },
          {
            "$ref": "#/parameters/repositoryName"
          },
          {
            "in": "query",
            "name": "per_page",
            "description": "Number of results per page.",
            "required": false,
            "type": "integer",
            "x-ms-summary": "per_page"
          },
          {
            "in": "query",
            "name": "page",
            "description": "Page number to display.",
            "required": false,
            "type": "integer",
            "x-ms-summary": "page"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MultipleFetchModel"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error. Unknown error occurred"
          },
          "default": {
            "description": "Operation Failed."
          }
        },
        "deprecated": false,
        "x-ms-visibility": "important",
        "externalDocs": {
          "url": "https://docs.microsoft.com/connectors/github/#lists-all-labels-for-a-repository"
        }
      }
    },
    "/{connectionId}/repos/{repositoryOwner}/{repositoryName}/issues/{issueNumber}/labels": {
      "get": {
        "tags": [
          "GitHub"
        ],
        "summary": "Lists all labels for an issue",
        "description": "Lists all labels for an issue.",
        "operationId": "GetIssueLabels",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "connectionId",
            "in": "path",
            "required": true,
            "type": "string",
            "x-ms-visibility": "internal"
          },
          {
            "$ref": "#/parameters/repositoryOwner"
          },
          {
            "$ref": "#/parameters/repositoryName"
          },
          {
            "$ref": "#/parameters/issueNumber"
          },
          {
            "in": "query",
            "name": "per_page",
            "description": "Number of results per page.",
            "required": false,
            "type": "integer",
            "x-ms-summary": "per_page"
          },
          {
            "in": "query",
            "name": "page",
            "description": "Page number to display.",
            "required": false,
            "type": "integer",
            "x-ms-summary": "page"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MultipleFetchModel"
            }
          },
          "301": {
            "description": "Moved Permanently"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "410": {
            "description": "Gone"
          },
          "500": {
            "description": "Internal Server Error. Unknown error occurred"
          },
          "default": {
            "description": "Operation Failed."
          }
        },
        "deprecated": false,
        "x-ms-visibility": "important",
        "externalDocs": {
          "url": "https://docs.microsoft.com/connectors/github/#lists-all-labels-for-an-issue"
        }
      }
    },
    "/{connectionId}/users/{repositoryOwner}/repos": {
      "get": {
        "tags": [
          "GitHub"
        ],
        "summary": "Lists all public repositories for a user",
        "description": "Lists all public repositories for a user.",
        "operationId": "GetRepos",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "connectionId",
            "in": "path",
            "required": true,
            "type": "string",
            "x-ms-visibility": "internal"
          },
          {
            "$ref": "#/parameters/repositoryOwner"
          },
          {
            "in": "query",
            "name": "type",
            "description": "Limit results to repositories of the specified type.",
            "required": false,
            "type": "string",
            "x-ms-summary": "type"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "The property to sort the results by.",
            "required": false,
            "type": "string",
            "x-ms-summary": "sort"
          },
          {
            "in": "query",
            "name": "direction",
            "description": "Direction of sort.",
            "required": false,
            "type": "string",
            "x-ms-summary": "direction"
          },
          {
            "in": "query",
            "name": "per_page",
            "description": "Number of results per page.",
            "required": false,
            "type": "integer",
            "x-ms-summary": "per_page"
          },
          {
            "in": "query",
            "name": "page",
            "description": "Page number to fetch",
            "required": false,
            "type": "integer",
            "x-ms-summary": "page"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MultipleFetchModel"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error. Unknown error occurred"
          },
          "default": {
            "description": "Operation Failed."
          }
        },
        "deprecated": false,
        "x-ms-visibility": "important",
        "externalDocs": {
          "url": "https://docs.microsoft.com/connectors/github/#lists-all-public-repositories-for-a-user"
        }
      }
    },
    "/{connectionId}/orgs/{repositoryOwner}/repos": {
      "get": {
        "tags": [
          "GitHub"
        ],
        "summary": "Lists all public repositories for an organization",
        "description": "Lists all public repositories for an organization.",
        "operationId": "GetOrgRepos",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "connectionId",
            "in": "path",
            "required": true,
            "type": "string",
            "x-ms-visibility": "internal"
          },
          {
            "$ref": "#/parameters/repositoryOwner"
          },
          {
            "in": "query",
            "name": "type",
            "description": "Limit results to repositories of the specified type.",
            "required": false,
            "type": "string",
            "x-ms-summary": "type"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "The property to sort the results by.",
            "required": false,
            "type": "string",
            "x-ms-summary": "sort"
          },
          {
            "in": "query",
            "name": "direction",
            "description": "Direction of sort.",
            "required": false,
            "type": "string",
            "x-ms-summary": "direction"
          },
          {
            "in": "query",
            "name": "per_page",
            "description": "Number of results per page.",
            "required": false,
            "type": "integer",
            "x-ms-summary": "per_page"
          },
          {
            "in": "query",
            "name": "page",
            "description": "Page number to fetch",
            "required": false,
            "type": "integer",
            "x-ms-summary": "page"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MultipleFetchModel"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error. Unknown error occurred"
          },
          "default": {
            "description": "Operation Failed."
          }
        },
        "deprecated": false,
        "x-ms-visibility": "important",
        "externalDocs": {
          "url": "https://docs.microsoft.com/connectors/github/#lists-all-public-repositories-for-an-organization"
        }
      }
    },
    "/{connectionId}/user/repos": {
      "get": {
        "tags": [
          "GitHub"
        ],
        "summary": "Lists all repositories for the authenticated user",
        "description": "Lists all repositories (both public and private) for the authenticated user.",
        "operationId": "GetUserRepos",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "connectionId",
            "in": "path",
            "required": true,
            "type": "string",
            "x-ms-visibility": "internal"
          },
          {
            "in": "query",
            "name": "visibility",
            "description": "Limit results to repositories of the specified visibility(public/private/all).",
            "required": false,
            "type": "string",
            "x-ms-summary": "visibility"
          },
          {
            "in": "query",
            "name": "affiliation",
            "description": "Limit results based on affiliation.",
            "required": false,
            "type": "string",
            "x-ms-summary": "affiliation"
          },
          {
            "in": "query",
            "name": "since",
            "description": "Limit results to repositories updated after a given time.",
            "required": false,
            "type": "string",
            "x-ms-summary": "since"
          },
          {
            "in": "query",
            "name": "before",
            "description": "Limit results to repositories updated before a given time.",
            "required": false,
            "type": "string",
            "x-ms-summary": "before"
          },
          {
            "in": "query",
            "name": "type",
            "description": "Limit results to repositories of the specified type.",
            "required": false,
            "type": "string",
            "x-ms-summary": "type"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "The property to sort the results by.",
            "required": false,
            "type": "string",
            "x-ms-summary": "sort"
          },
          {
            "in": "query",
            "name": "direction",
            "description": "Direction of sort.",
            "required": false,
            "type": "string",
            "x-ms-summary": "direction"
          },
          {
            "in": "query",
            "name": "per_page",
            "description": "Number of results per page.",
            "required": false,
            "type": "integer",
            "x-ms-summary": "per_page"
          },
          {
            "in": "query",
            "name": "page",
            "description": "Page number to fetch",
            "required": false,
            "type": "integer",
            "x-ms-summary": "page"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MultipleFetchModel"
            }
          },
          "304": {
            "description": "Not modified"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Failed"
          },
          "500": {
            "description": "Internal Server Error. Unknown error occurred"
          },
          "default": {
            "description": "Operation Failed."
          }
        },
        "deprecated": false,
        "x-ms-visibility": "important",
        "externalDocs": {
          "url": "https://docs.microsoft.com/connectors/github/#lists-all-repositories-for-the-authenticated-user"
        }
      }
    },
    "/{connectionId}/search/issues": {
      "get": {
        "tags": [
          "GitHub"
        ],
        "summary": "Find issues by state and keyword",
        "description": "Find issues by state and keyword.",
        "operationId": "SearchIssues",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "connectionId",
            "in": "path",
            "required": true,
            "type": "string",
            "x-ms-visibility": "internal"
          },
          {
            "in": "query",
            "name": "q",
            "description": "Search keywords and qualifiers.",
            "required": true,
            "type": "string",
            "x-ms-summary": "q"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "The property to sort the results by.",
            "required": false,
            "type": "string",
            "x-ms-summary": "sort"
          },
          {
            "in": "query",
            "name": "order",
            "description": "Direction of sort.",
            "required": false,
            "type": "string",
            "x-ms-summary": "order"
          },
          {
            "in": "query",
            "name": "per_page",
            "description": "Number of results per page.",
            "required": false,
            "type": "integer",
            "x-ms-summary": "per_page"
          },
          {
            "in": "query",
            "name": "page",
            "description": "Page number to fetch",
            "required": false,
            "type": "integer",
            "x-ms-summary": "page"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MultipleSearchFetchModel"
            }
          },
          "304": {
            "description": "Not modified"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Failed"
          },
          "500": {
            "description": "Internal Server Error. Unknown error occurred"
          },
          "503": {
            "description": "Service unavailable"
          },
          "default": {
            "description": "Operation Failed."
          }
        },
        "deprecated": false,
        "x-ms-visibility": "important",
        "externalDocs": {
          "url": "https://docs.microsoft.com/connectors/github/#find-issues-by-state-and-keyword"
        }
      }
    }
  },
  "definitions": {
    "IssueBasicDetailsModel": {
      "description": "Properties of an issue.",
      "required": [
        "title"
      ],
      "type": "object",
      "properties": {
        "title": {
          "description": "Summary of the issue.",
          "type": "string",
          "x-ms-summary": "Title"
        },
        "body": {
          "description": "Description of the issue.",
          "type": "string",
          "x-ms-summary": "Body"
        }
      }
    },
    "IssueDetailsModel": {
      "description": "Properties of a GitHub issue.",
      "required": [
        "title"
      ],
      "type": "object",
      "properties": {
        "title": {
          "description": "Summary of the issue.",
          "type": "string",
          "x-ms-summary": "Title"
        },
        "body": {
          "description": "Description of the issue.",
          "type": "string",
          "x-ms-summary": "Body"
        },
        "assignee": {
          "$ref": "#/definitions/UserDetailsModel"
        },
        "number": {
          "format": "int32",
          "description": "Unique id of the issue.",
          "type": "integer",
          "x-ms-summary": "Id"
        },
        "state": {
          "description": "Status of the issue.",
          "type": "string",
          "x-ms-summary": "State"
        },
        "created_at": {
          "description": "yyyy-MM-ddTHH:mm:ss.fffZ (UTC format).",
          "type": "string",
          "x-ms-summary": "Created Date-Time"
        },
        "repository_url": {
          "description": "Web link to the repository.",
          "type": "string",
          "x-ms-summary": "Repository Url"
        }
      }
    },
    "MultipleSearchFetchModel": {
      "description": "Model for fetching search results",
      "type": "object",
      "properties": {
        "body": {
          "description": "body of result",
          "type": "array",
          "items": {
            "$ref": "#/definitions/GeneralAPIModel"
          }
        }
      }
    },
    "SingleSearchFetchModel": {
      "description": "Model for fetching single search result",
      "type": "object",
      "properties": {
        "body": {
          "description": "body of result",
          "type": "array",
          "items": {
            "$ref": "#/definitions/GeneralAPIModel"
          }
        }
      }
    },
    "MultipleFetchModel": {
      "description": "Model for fetching list API response",
      "type": "array",
      "items": {
        "$ref": "#/definitions/GeneralAPIModel"
      }
    },
    "GeneralAPIModel": {
      "description": "Model for fetching single API response",
      "type": "object",
      "properties": {}
    },
    "IssueUpdateModel": {
      "description": "Properties of an issue update.",
      "type": "object",
      "properties": {
        "title": {
          "description": "Summary of the issue.",
          "type": "string",
          "x-ms-summary": "Title"
        },
        "body": {
          "description": "Description of the issue.",
          "type": "string",
          "x-ms-summary": "Body"
        },
        "assignee": {
          "description": "Assignee of the issue.",
          "type": "string",
          "x-ms-summary": "assignee"
        },
        "state": {
          "description": "The open or close state of an issue. Can be one of open or closed.",
          "type": "string",
          "x-ms-summary": "State"
        },
        "state_reason": {
          "description": "The reason for change of state.",
          "type": "string",
          "x-ms-summary": "ChangeReason"
        },
        "milestone": {
          "description": "Number of milestones to associate with issue.",
          "type": "string",
          "x-ms-summary": "milestones"
        },
        "labels": {
          "description": "labels associated with the issue.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-summary": "labels"
        },
        "assignees": {
          "description": "UserSnames to assign to the issue.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-summary": "assignees"
        }
      }
    },
    "MilestoneUpdateModel": {
      "description": "Properties of a milestone update.",
      "type": "object",
      "properties": {
        "title": {
          "description": "Summary of the milestone.",
          "type": "string",
          "x-ms-summary": "Title"
        },
        "state": {
          "description": "The open or close state of the milestone.",
          "type": "string",
          "x-ms-summary": "State"
        },
        "description": {
          "description": "A description of the milestone.",
          "type": "string",
          "x-ms-summary": "milestones"
        },
        "due_on": {
          "description": "Due date of the milestone.",
          "type": "string",
          "x-ms-summary": "due_on"
        }
      }
    },
    "UserDetailsModel": {
      "description": "Properties of a GitHub user.",
      "type": "object",
      "properties": {
        "login": {
          "description": "User Login.",
          "type": "string",
          "x-ms-summary": "Login"
        },
        "id": {
          "format": "int32",
          "description": "User Id.",
          "type": "integer",
          "x-ms-summary": "Id"
        },
        "node_id": {
          "description": "User Node Id.",
          "type": "string",
          "x-ms-summary": "Node Id"
        },
        "avatar_url": {
          "description": "User Avatar Url.",
          "type": "string",
          "x-ms-summary": "Avatar Url"
        },
        "gravatar_id": {
          "description": "User Gravatar Id.",
          "type": "string",
          "x-ms-summary": "Gravatar Id"
        },
        "url": {
          "description": "User Url.",
          "type": "string",
          "x-ms-summary": "Url"
        },
        "html_url": {
          "description": "User Html Url.",
          "type": "string",
          "x-ms-summary": "Html Url"
        },
        "followers_url": {
          "description": "User FollowersUrl",
          "type": "string",
          "x-ms-summary": "Followers Url"
        },
        "following_url": {
          "description": "User Following Url.",
          "type": "string",
          "x-ms-summary": "Following Url"
        },
        "gists_url": {
          "description": "User Gists Url.",
          "type": "string",
          "x-ms-summary": "Gists Url"
        },
        "starred_url": {
          "description": "User Starred Url.",
          "type": "string",
          "x-ms-summary": "Starred Url"
        },
        "subscriptions_url": {
          "description": "User Subscriptions Url.",
          "type": "string",
          "x-ms-summary": "Subscriptions Url"
        },
        "organizations_url": {
          "description": "User Organizations Url.",
          "type": "string",
          "x-ms-summary": "Organizations Url"
        },
        "repos_url": {
          "description": "User Repos Url.",
          "type": "string",
          "x-ms-summary": "Repos Url"
        },
        "events_url": {
          "description": "User Events Url.",
          "type": "string",
          "x-ms-summary": "Events Url"
        },
        "received_events_url": {
          "description": "User Received Events Url.",
          "type": "string",
          "x-ms-summary": "Received Events Url"
        },
        "type": {
          "description": "User Type.",
          "type": "string",
          "x-ms-summary": "Type"
        },
        "site_admin": {
          "description": "Is User Site Admin?",
          "type": "boolean",
          "x-ms-summary": "Site Admin"
        },
        "name": {
          "description": "User Name.",
          "type": "string",
          "x-ms-summary": "Name"
        },
        "company": {
          "description": "User Company.",
          "type": "string",
          "x-ms-summary": "Company"
        },
        "blog": {
          "description": "User Blog.",
          "type": "string",
          "x-ms-summary": "Blog"
        },
        "location": {
          "description": "User Location.",
          "type": "string",
          "x-ms-summary": "Location"
        },
        "email": {
          "description": "User Email.",
          "type": "string",
          "x-ms-summary": "Email"
        },
        "hireable": {
          "description": "User Hireable?",
          "type": "boolean",
          "x-ms-summary": "Hireable"
        },
        "bio": {
          "description": "User Bio.",
          "type": "string",
          "x-ms-summary": "Bio"
        },
        "public_repos": {
          "format": "int32",
          "description": "User Public Repos.",
          "type": "integer",
          "x-ms-summary": "Public Repos"
        },
        "public_gists": {
          "format": "int32",
          "description": "User Public Gists.",
          "type": "integer",
          "x-ms-summary": "Public Gists"
        },
        "followers": {
          "format": "int32",
          "description": "User Followers.",
          "type": "integer",
          "x-ms-summary": "Followers"
        },
        "following": {
          "format": "int32",
          "description": "User Following.",
          "type": "integer",
          "x-ms-summary": "Following"
        },
        "created_at": {
          "format": "date-time",
          "description": "User Created At.",
          "type": "string",
          "x-ms-summary": "Created At"
        },
        "updated_at": {
          "format": "date-time",
          "description": "User Updated At.",
          "type": "string",
          "x-ms-summary": "Updated At"
        }
      }
    },
    "Verification": {
      "type": "object",
      "properties": {
        "verified": {
          "type": "boolean",
          "x-ms-summary": "Is Verified",
          "description": "Indicates whether GitHub considers the signature in this commit to be verified."
        },
        "reason": {
          "type": "string",
          "x-ms-summary": "Verification reason",
          "description": "The reason for verified value."
        },
        "payload": {
          "type": "string",
          "x-ms-summary": "Signed value",
          "description": "The value that was signed."
        },
        "signature": {
          "type": "string",
          "x-ms-summary": "Commit Signature",
          "description": "The signature that was extracted from the commit."
        }
      }
    },
    "GitUser": {
      "description": "Metaproperties for Git author/committer information.",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "User Name",
          "x-ms-summary": "Git User Name"
        },
        "email": {
          "type": "string",
          "description": "Email",
          "x-ms-summary": "Git User Email"
        },
        "date": {
          "type": "string",
          "description": "Timestamp of Commit.",
          "x-ms-summary": "Timestamp of Commit"
        }
      }
    },
    "GraphQlQuery": {
      "description": "GraphQlQuery",
      "type": "object",
      "properties": {
        "query": {
          "type": "string",
          "description": "query",
          "x-ms-summary": "query"
        }
      }
    },
    "DiffEntry": {
      "description": "Diff Entry",
      "type": "object",
      "properties": {
        "filename": {
          "type": "string",
          "x-ms-summary": "File Name",
          "description": "Changed File Name."
        },
        "additions": {
          "type": "integer",
          "format": "int32",
          "x-ms-summary": "Additions",
          "description": "Number of additions in the file"
        },
        "deletions": {
          "type": "integer",
          "format": "int32",
          "x-ms-summary": "Deletions",
          "description": "Number of Deletions in the file"
        },
        "changes": {
          "type": "integer",
          "format": "int32",
          "x-ms-summary": "Changes",
          "description": "Number of Changes in the file"
        },
        "status": {
          "type": "string",
          "x-ms-summary": "Status",
          "description": "Status of the change modified, renamed etc.,"
        },
        "raw_url": {
          "type": "string",
          "x-ms-summary": "Raw Url",
          "description": "Raw Url link to the file"
        },
        "blob_url": {
          "type": "string",
          "x-ms-summary": "Blob Url",
          "description": "Blob Url link to the file"
        },
        "patch": {
          "type": "string",
          "x-ms-summary": "Patch",
          "description": "Actual changes made to the file."
        },
        "sha": {
          "type": "string",
          "x-ms-summary": "Sha of the change",
          "description": "SHA of the change."
        },
        "contents_url": {
          "type": "string",
          "x-ms-summary": "Contents Url",
          "description": "File Contents Url."
        },
        "previous_filename": {
          "type": "string",
          "x-ms-summary": "Previous FileName",
          "description": "Previous FileName if the FileName is changed"
        }
      }
    },
    "Commit": {
      "description": "Commit",
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "x-ms-summary": "Commit Url",
          "description": "The HTTP URL for the commit."
        },
        "sha": {
          "type": "string",
          "x-ms-summary": "Commit Sha",
          "description": "SHA of the commit"
        },
        "node_id": {
          "type": "string",
          "x-ms-summary": "Node Id",
          "description": "Node Id of the commit."
        },
        "html_url": {
          "type": "string",
          "x-ms-summary": "HTML Url",
          "description": "HTML Url of the commit"
        },
        "comments_url": {
          "type": "string",
          "x-ms-summary": "Comments Url",
          "description": "Comments Url of the commit"
        },
        "commit": {
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "x-ms-summary": "Commit Url",
              "description": "Url of the commit."
            },
            "author": {
              "$ref": "#/definitions/GitUser"
            },
            "committer": {
              "$ref": "#/definitions/GitUser"
            },
            "message": {
              "type": "string",
              "x-ms-summary": "Commit message",
              "description": "Commit Message."
            },
            "comment_count": {
              "type": "integer",
              "format": "int32",
              "x-ms-summary": "Comment Count",
              "description": "Comments Count of the commit"
            },
            "tree": {
              "type": "object",
              "properties": {
                "sha": {
                  "type": "string",
                  "x-ms-summary": "Commit Sha",
                  "description": "SHA of the Commit"
                },
                "url": {
                  "type": "string",
                  "format": "uri",
                  "x-ms-summary": "Commit Url",
                  "description": "Commit Url."
                }
              }
            },
            "verification": {
              "$ref": "#/definitions/Verification"
            }
          }
        },
        "author": {
          "$ref": "#/definitions/UserDetailsModel"
        },
        "committer": {
          "$ref": "#/definitions/UserDetailsModel"
        },
        "parents": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "sha": {
                "type": "string",
                "x-ms-summary": "Parent Sha",
                "description": "Parent branch commit sha"
              },
              "url": {
                "type": "string",
                "x-ms-summary": "Parent branch Url",
                "description": "Url of the parent branch."
              },
              "html_url": {
                "type": "string",
                "x-ms-summary": "Parent branch HTML Url",
                "description": "HTML Url of the parent branch."
              }
            },
            "required": [
              "sha",
              "url"
            ]
          }
        },
        "stats": {
          "type": "object",
          "properties": {
            "additions": {
              "type": "integer",
              "format": "int32",
              "x-ms-summary": "Additions",
              "description": "Number of additions"
            },
            "deletions": {
              "type": "integer",
              "format": "int32",
              "x-ms-summary": "Deletions",
              "description": "Number of Deletions"
            },
            "total": {
              "type": "integer",
              "format": "int32",
              "x-ms-summary": "Total",
              "description": "Total changes"
            }
          }
        },
        "files": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DiffEntry"
          }
        }
      }
    },
    "RepositoryDispatchEvent": {
      "type": "object",
      "description": "Repository Dispatch Event raised",
      "properties": {
        "event_type": {
          "type": "string",
          "description": "A custom webhook event name.",
          "x-ms-summary": "Event Name"
        },
        "client_payload": {
          "type": "object",
          "description": "JSON payload with extra information about the webhook event that your action or worklow may use.",
          "additionalProperties": true,
          "x-ms-summary": "Event Payload"
        }
      }
    },
    "CommitComparison": {
      "type": "object",
      "description": "Commit Comparison",
      "properties": {
        "url": {
          "type": "string",
          "description": "Url for the comparison",
          "x-ms-summary": "Url"
        },
        "html_url": {
          "type": "string",
          "description": "Html Url for the comparison",
          "x-ms-summary": "HTML Url"
        },
        "permalink_url": {
          "type": "string",
          "description": "Permanent Url for the comparison ",
          "x-ms-summary": "Permanent Url"
        },
        "diff_url": {
          "type": "string",
          "description": "Diff Url",
          "x-ms-summary": "Diff Url"
        },
        "patch_url": {
          "type": "string",
          "description": "Patch Url",
          "x-ms-summary": "Patch Url"
        },
        "base_commit": {
          "$ref": "#/definitions/Commit"
        },
        "merge_base_commit": {
          "$ref": "#/definitions/Commit"
        },
        "status": {
          "type": "string",
          "description": "Status of the comparision eg. diverged etc.,",
          "x-ms-summary": "Status"
        },
        "ahead_by": {
          "type": "integer",
          "format": "int32",
          "description": "ahead by base branch",
          "x-ms-summary": "Ahead by"
        },
        "behind_by": {
          "type": "integer",
          "format": "int32",
          "description": "behind_by base branch",
          "x-ms-summary": "Behind by"
        },
        "total_commits": {
          "type": "integer",
          "format": "int32",
          "description": "total commits",
          "x-ms-summary": "Total Commits"
        },
        "commits": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Commit"
          },
          "description": "commits",
          "x-ms-summary": "Commits"
        },
        "files": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DiffEntry"
          },
          "description": "files",
          "x-ms-summary": "Files"
        }
      }
    },
    "ActionsPublicKey": {
      "description": "The public key used for setting Actions Secrets.",
      "type": "object",
      "properties": {
        "key_id": {
          "description": "The identifier for the key.",
          "type": "string",
          "x-ms-summary": "Key Id"
        },
        "key": {
          "description": "The Base64 encoded public key.",
          "type": "string",
          "x-ms-summary": "Key"
        },
        "id": {
          "description": "Unique identifier of the key.",
          "type": "integer",
          "format": "int32",
          "x-ms-summary": "Id"
        },
        "url": {
          "description": "Public key url.",
          "type": "string",
          "x-ms-summary": "Url"
        },
        "title": {
          "description": "Public key title.",
          "type": "string",
          "x-ms-summary": "Title"
        },
        "created_at": {
          "description": "The date and time when the key was created.",
          "type": "string",
          "x-ms-summary": "Created At"
        }
      },
      "required": [
        "key_id",
        "key"
      ]
    },
    "CreateRepositorySecretRequest": {
      "type": "object",
      "properties": {
        "encrypted_value": {
          "description": "Value for your secret, encrypted with LibSodium using the public key retrieved from the Get an Repository public key action.",
          "type": "string"
        },
        "key_id": {
          "description": "ID of the key you used to encrypt the secret.",
          "type": "string"
        }
      }
    },
    "CreateRepositoryUsingTemplateRequest": {
      "type": "object",
      "properties": {
        "owner": {
          "x-ms-summary": "Owner",
          "type": "string",
          "description": "The organization or person who will own the new repository. If left blank, the authenticated user will be the owner."
        },
        "name": {
          "x-ms-summary": "Name",
          "type": "string",
          "description": "The name of the new repository."
        },
        "description": {
          "x-ms-summary": "Description",
          "type": "string",
          "description": "A short description of the new repository."
        },
        "private": {
          "x-ms-summary": "Is Private?",
          "type": "boolean",
          "description": "Either `true` to create a new private repository or `false` to create a new public one.",
          "default": false
        }
      },
      "required": [
        "name"
      ]
    },
    "LicenseDetails": {
      "title": "License",
      "description": "License Details",
      "type": "object",
      "properties": {
        "key": {
          "description": "The lowercased SPDX Id of the license.",
          "x-ms-summary": "Key",
          "type": "string"
        },
        "name": {
          "description": "The license full name specified by https://spdx.org/licenses.",
          "x-ms-summary": "Name",
          "type": "string"
        },
        "url": {
          "description": "URL to the license on https://choosealicense.com.",
          "x-ms-summary": "Url",
          "type": "string",
          "format": "uri"
        },
        "spdx_id": {
          "description": "Short identifier specified by https://spdx.org/licenses.",
          "type": "string",
          "x-ms-summary": "SPDX Id"
        },
        "node_id": {
          "description": "License Node Id.",
          "x-ms-summary": "Node Id",
          "type": "string"
        },
        "html_url": {
          "description": "License HTML URL.",
          "x-ms-summary": "HTML Url",
          "type": "string",
          "format": "uri"
        }
      }
    },
    "RepositoryMiniDetails": {
      "description": "A git repository",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the repository.",
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "Repository Id"
        },
        "node_id": {
          "description": "The Node Id of the repository.",
          "type": "string",
          "x-ms-summary": "Repository Node Id"
        },
        "name": {
          "description": "The name of the repository.",
          "type": "string",
          "x-ms-summary": "Repository Name"
        },
        "full_name": {
          "description": "The full name of the repository.",
          "type": "string",
          "x-ms-summary": "Repository Full Name"
        },
        "permissions": {
          "description": "Permissions on the repository.",
          "type": "object",
          "x-ms-summary": "Repository Permissions",
          "properties": {
            "admin": {
              "type": "boolean"
            },
            "pull": {
              "type": "boolean"
            },
            "triage": {
              "type": "boolean"
            },
            "push": {
              "type": "boolean"
            },
            "maintain": {
              "type": "boolean"
            }
          },
          "required": [
            "admin",
            "pull",
            "push"
          ]
        },
        "owner": {
          "$ref": "#/definitions/UserDetailsModel"
        },
        "private": {
          "description": "Whether the repository is private or public.",
          "default": false,
          "type": "boolean",
          "x-ms-summary": "Is Repository Private?"
        },
        "description": {
          "description": "The description of the repository",
          "type": "string",
          "x-ms-summary": "Repository Description"
        },
        "homepage": {
          "description": "The homepage for this repository",
          "type": "string",
          "format": "uri",
          "x-ms-summary": "Repository Homepage"
        },
        "language": {
          "description": "The language for this repository",
          "type": "string",
          "x-ms-summary": "Repository Language"
        },
        "archived": {
          "description": "Whether the repository is archived.",
          "default": false,
          "type": "boolean",
          "x-ms-summary": "Is Repository Archived?"
        },
        "disabled": {
          "type": "boolean",
          "description": "Returns whether or not this repository disabled.",
          "x-ms-summary": "Is Repository Disabled?"
        },
        "visibility": {
          "description": "The repository visibility: public, private, or internal.",
          "default": "public",
          "type": "string",
          "x-ms-summary": "Repository Visibility"
        },
        "created_at": {
          "description": "the date and time when the repository was created.",
          "type": "string",
          "format": "date-time",
          "x-ms-summary": "Repository Created At"
        },
        "updated_at": {
          "description": "the date and time when the repository was last updated.",
          "type": "string",
          "format": "date-time",
          "x-ms-summary": "Repository Updated At"
        },
        "allow_rebase_merge": {
          "description": "Whether to allow rebase merges for pull requests.",
          "default": true,
          "type": "boolean",
          "x-ms-summary": "Repository Allow Rebase Merge"
        },
        "allow_squash_merge": {
          "description": "Whether to allow squash merges for pull requests.",
          "default": true,
          "type": "boolean",
          "x-ms-summary": "Repository Allow Squash Merge"
        },
        "delete_branch_on_merge": {
          "description": "Whether to delete head branches when pull requests are merged",
          "default": false,
          "type": "boolean",
          "x-ms-summary": "Repository Delete Branch On Merge"
        },
        "allow_merge_commit": {
          "description": "Whether to allow merge commits for pull requests.",
          "default": true,
          "type": "boolean",
          "x-ms-summary": "Repository Allow Merge Commit"
        },
        "master_branch": {
          "description": "Repository master branch.",
          "type": "string",
          "x-ms-summary": "Repository Master Branch"
        }
      }
    },
    "RepositoryDetails": {
      "description": "A git repository",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the repository.",
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "Id"
        },
        "node_id": {
          "description": "The Node Id of the repository.",
          "type": "string",
          "x-ms-summary": "Node Id"
        },
        "name": {
          "description": "The name of the repository.",
          "type": "string",
          "x-ms-summary": "Name"
        },
        "full_name": {
          "description": "The full name of the repository.",
          "type": "string",
          "x-ms-summary": "Full Name"
        },
        "license": {
          "$ref": "#/definitions/LicenseDetails"
        },
        "forks": {
          "description": "The number of forks of the repository.",
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "Forks"
        },
        "permissions": {
          "description": "Permissions on the repository.",
          "type": "object",
          "x-ms-summary": "Permissions",
          "properties": {
            "admin": {
              "type": "boolean"
            },
            "pull": {
              "type": "boolean"
            },
            "triage": {
              "type": "boolean"
            },
            "push": {
              "type": "boolean"
            },
            "maintain": {
              "type": "boolean"
            }
          },
          "required": [
            "admin",
            "pull",
            "push"
          ]
        },
        "owner": {
          "$ref": "#/definitions/UserDetailsModel"
        },
        "private": {
          "description": "Whether the repository is private or public.",
          "default": false,
          "type": "boolean",
          "x-ms-summary": "Is Private?"
        },
        "html_url": {
          "description": "The Html Url of the repository",
          "type": "string",
          "format": "uri",
          "x-ms-summary": "Html Url"
        },
        "description": {
          "description": "The description of the repository",
          "type": "string",
          "x-ms-summary": "Description"
        },
        "fork": {
          "description": "If the repository is a fork?",
          "type": "boolean",
          "x-ms-summary": "Is a Fork?"
        },
        "url": {
          "description": "The HTTP URL for this repository",
          "type": "string",
          "format": "uri",
          "x-ms-summary": "Url"
        },
        "archive_url": {
          "description": "The Archive URL for this repository",
          "type": "string",
          "x-ms-summary": "Archive Url"
        },
        "assignees_url": {
          "description": "The Assignees URL for this repository",
          "type": "string",
          "x-ms-summary": "Assignees Url"
        },
        "blobs_url": {
          "description": "The Blobs URL for this repository",
          "type": "string",
          "x-ms-summary": "Blobs Url"
        },
        "branches_url": {
          "description": "The Branches URL for this repository",
          "type": "string",
          "x-ms-summary": "Branches Url"
        },
        "collaborators_url": {
          "description": "The Collaborators URL for this repository",
          "type": "string",
          "x-ms-summary": "Collaborators Url"
        },
        "comments_url": {
          "description": "The Comments URL for this repository",
          "type": "string",
          "x-ms-summary": "Comments Url"
        },
        "commits_url": {
          "description": "The Commits URL for this repository",
          "type": "string",
          "x-ms-summary": "Commits Url"
        },
        "compare_url": {
          "description": "The Compare URL for this repository",
          "type": "string",
          "x-ms-summary": "Compare Url"
        },
        "contents_url": {
          "description": "The Contents URL for this repository",
          "type": "string",
          "x-ms-summary": "Contents Url"
        },
        "contributors_url": {
          "description": "The Contributors URL for this repository",
          "type": "string",
          "format": "uri",
          "x-ms-summary": "Contributors Url"
        },
        "deployments_url": {
          "description": "The Deployments URL for this repository",
          "type": "string",
          "format": "uri",
          "x-ms-summary": "Deployments Url"
        },
        "downloads_url": {
          "description": "The Downloads URL for this repository",
          "type": "string",
          "format": "uri",
          "x-ms-summary": "Downloads Url"
        },
        "events_url": {
          "description": "The Events URL for this repository",
          "type": "string",
          "format": "uri",
          "x-ms-summary": "Events Url"
        },
        "forks_url": {
          "description": "The Forks URL for this repository",
          "type": "string",
          "format": "uri",
          "x-ms-summary": "Forks Url"
        },
        "git_commits_url": {
          "description": "The Git Commits URL for this repository",
          "type": "string",
          "x-ms-summary": "Git Commits Url"
        },
        "git_refs_url": {
          "description": "The Git References URL for this repository",
          "type": "string",
          "x-ms-summary": "Git References Url"
        },
        "git_tags_url": {
          "description": "The Git Tags URL for this repository",
          "type": "string",
          "x-ms-summary": "Git Tags Url"
        },
        "git_url": {
          "description": "The Git URL for this repository",
          "type": "string",
          "x-ms-summary": "Git Url"
        },
        "issue_comment_url": {
          "description": "The issue comment URL for this repository",
          "type": "string",
          "x-ms-summary": "Issue Comment Url"
        },
        "issue_events_url": {
          "description": "The issue events URL for this repository",
          "type": "string",
          "x-ms-summary": "Issue Events Url"
        },
        "issues_url": {
          "description": "The issues URL for this repository",
          "type": "string",
          "x-ms-summary": "Issues Url"
        },
        "keys_url": {
          "description": "The keys URL for this repository",
          "type": "string",
          "x-ms-summary": "Keys Url"
        },
        "labels_url": {
          "description": "The labels URL for this repository",
          "type": "string",
          "x-ms-summary": "Labels Url"
        },
        "languages_url": {
          "description": "The languages URL for this repository",
          "type": "string",
          "format": "uri",
          "x-ms-summary": "Languages Url"
        },
        "merges_url": {
          "description": "The merges URL for this repository",
          "type": "string",
          "format": "uri",
          "x-ms-summary": "Merges Url"
        },
        "milestones_url": {
          "description": "The milestones URL for this repository",
          "type": "string",
          "x-ms-summary": "Milestones Url"
        },
        "notifications_url": {
          "description": "The notifications URL for this repository",
          "type": "string",
          "x-ms-summary": "Notifications Url"
        },
        "pulls_url": {
          "description": "The pulls URL for this repository",
          "type": "string",
          "x-ms-summary": "Pulls Url"
        },
        "releases_url": {
          "description": "The releases URL for this repository",
          "type": "string",
          "x-ms-summary": "Releases Url"
        },
        "ssh_url": {
          "description": "The SSH URL to clone this repository",
          "type": "string",
          "x-ms-summary": "SSH Url"
        },
        "stargazers_url": {
          "description": "The stargazers (Stargazers are the people that have bookmarked the GitHub repository) URL for this repository",
          "type": "string",
          "format": "uri",
          "x-ms-summary": "Stargazers Url"
        },
        "statuses_url": {
          "description": "The statuses URL for this repository",
          "type": "string",
          "x-ms-summary": "Statuses Url"
        },
        "subscribers_url": {
          "description": "The subscribers URL for this repository",
          "type": "string",
          "format": "uri",
          "x-ms-summary": "Subscribers Url"
        },
        "subscription_url": {
          "description": "The subscription URL for this repository",
          "type": "string",
          "format": "uri",
          "x-ms-summary": "Subscription Url"
        },
        "tags_url": {
          "description": "The tags URL for this repository",
          "type": "string",
          "format": "uri",
          "x-ms-summary": "Tags Url"
        },
        "teams_url": {
          "description": "The teams URL for this repository",
          "type": "string",
          "format": "uri",
          "x-ms-summary": "Teams Url"
        },
        "trees_url": {
          "description": "The trees URL for this repository",
          "type": "string",
          "x-ms-summary": "Trees Url"
        },
        "clone_url": {
          "description": "The clone URL for this repository",
          "type": "string",
          "x-ms-summary": "Clone Url"
        },
        "mirror_url": {
          "description": "The original mirror URL for this repository",
          "type": "string",
          "format": "uri",
          "x-ms-summary": "Mirror Url"
        },
        "hooks_url": {
          "description": "The hooks URL for this repository",
          "type": "string",
          "format": "uri",
          "x-ms-summary": "Hooks Url"
        },
        "svn_url": {
          "description": "The SVN URL for this repository",
          "type": "string",
          "format": "uri",
          "x-ms-summary": "SVN Url"
        },
        "homepage": {
          "description": "The homepage for this repository",
          "type": "string",
          "format": "uri",
          "x-ms-summary": "Homepage"
        },
        "language": {
          "description": "The language for this repository",
          "type": "string",
          "x-ms-summary": "Language"
        },
        "forks_count": {
          "description": "Number of forks there are of this repository in the whole network.",
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "Forks Count"
        },
        "stargazers_count": {
          "description": "Number of users who have starred the repository.",
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "Stargazers Count"
        },
        "watchers_count": {
          "description": "Number of users watching the repository.",
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "Watchers Count"
        },
        "size": {
          "description": "Size of the repository",
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "Size"
        },
        "default_branch": {
          "description": "The default branch of the repository.",
          "type": "string",
          "x-ms-summary": "Default Branch"
        },
        "open_issues_count": {
          "description": "Number of open issues in the repository.",
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "Open Issues Count"
        },
        "is_template": {
          "description": "Whether this repository acts as a template that can be used to generate new repositories.",
          "default": false,
          "type": "boolean",
          "x-ms-summary": "Is Template?"
        },
        "topics": {
          "description": "List of topics in the repository",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-summary": "Topics"
        },
        "has_issues": {
          "description": "Whether issues are enabled.",
          "default": true,
          "type": "boolean",
          "x-ms-summary": "Has Issues?"
        },
        "has_projects": {
          "description": "Whether projects are enabled.",
          "default": true,
          "type": "boolean",
          "x-ms-summary": "Has Projects?"
        },
        "has_wiki": {
          "description": "Whether the wiki is enabled.",
          "default": true,
          "type": "boolean",
          "x-ms-summary": "Has Wiki?"
        },
        "has_pages": {
          "description": "Whether pages are enabled.",
          "type": "boolean",
          "x-ms-summary": "Has Pages?"
        },
        "has_downloads": {
          "description": "Whether downloads are enabled.",
          "default": true,
          "type": "boolean",
          "x-ms-summary": "Has Downloads?"
        },
        "archived": {
          "description": "Whether the repository is archived.",
          "default": false,
          "type": "boolean",
          "x-ms-summary": "Is Archived?"
        },
        "disabled": {
          "type": "boolean",
          "description": "Returns whether or not this repository disabled.",
          "x-ms-summary": "Is Disabled?"
        },
        "visibility": {
          "description": "The repository visibility: public, private, or internal.",
          "default": "public",
          "type": "string",
          "x-ms-summary": "Visibility"
        },
        "pushed_at": {
          "description": "When the repository was last pushed to.",
          "type": "string",
          "format": "date-time",
          "x-ms-summary": "Pushed At"
        },
        "created_at": {
          "description": "the date and time when the repository was created.",
          "type": "string",
          "format": "date-time",
          "x-ms-summary": "Created At"
        },
        "updated_at": {
          "description": "the date and time when the repository was last updated.",
          "type": "string",
          "format": "date-time",
          "x-ms-summary": "Updated At"
        },
        "allow_rebase_merge": {
          "description": "Whether to allow rebase merges for pull requests.",
          "default": true,
          "type": "boolean",
          "x-ms-summary": "Allow Rebase Merge"
        },
        "template_repository": {
          "type": "object",
          "properties": {
            "id": {
              "description": "Unique identifier of the repository.",
              "format": "int32",
              "type": "integer",
              "x-ms-summary": "Template Repository Id"
            },
            "node_id": {
              "description": "The Node Id of the repository.",
              "type": "string",
              "x-ms-summary": "Template Repository Node Id"
            },
            "name": {
              "description": "The name of the repository.",
              "type": "string",
              "x-ms-summary": "Template Repository Name"
            },
            "full_name": {
              "description": "The full name of the repository.",
              "type": "string",
              "x-ms-summary": "Template Repository Full Name"
            },
            "owner": {
              "$ref": "#/definitions/UserDetailsModel"
            },
            "private": {
              "description": "Whether the repository is private or public.",
              "default": false,
              "type": "boolean",
              "x-ms-summary": "Is Template Repository Private?"
            },
            "html_url": {
              "description": "The Html Url of the repository",
              "type": "string",
              "format": "uri",
              "x-ms-summary": "Template Repository Html Url"
            },
            "description": {
              "description": "The description of the repository",
              "type": "string",
              "x-ms-summary": "Template Repository Description"
            },
            "fork": {
              "description": "If the repository is a fork?",
              "type": "boolean",
              "x-ms-summary": "Is Template Repository a Fork?"
            },
            "url": {
              "description": "The HTTP URL for this repository",
              "type": "string",
              "format": "uri",
              "x-ms-summary": "Template Repository Url"
            },
            "archive_url": {
              "description": "The Archive URL for this repository",
              "type": "string",
              "x-ms-summary": "Template Repository Archive Url"
            },
            "assignees_url": {
              "description": "The Assignees URL for this repository",
              "type": "string",
              "x-ms-summary": "Template Repository Assignees Url"
            },
            "blobs_url": {
              "description": "The Blobs URL for this repository",
              "type": "string",
              "x-ms-summary": "Template Repository Blobs Url"
            },
            "branches_url": {
              "description": "The Branches URL for this repository",
              "type": "string",
              "x-ms-summary": "Template Repository Branches Url"
            },
            "collaborators_url": {
              "description": "The Collaborators URL for this repository",
              "type": "string",
              "x-ms-summary": "Template Repository Collaborators Url"
            },
            "comments_url": {
              "description": "The Comments URL for this repository",
              "type": "string",
              "x-ms-summary": "Template Repository Comments Url"
            },
            "commits_url": {
              "description": "The Commits URL for this repository",
              "type": "string",
              "x-ms-summary": "Template Repository Commits Url"
            },
            "compare_url": {
              "description": "The Compare URL for this repository",
              "type": "string",
              "x-ms-summary": "Template Repository Compare Url"
            },
            "contents_url": {
              "description": "The Contents URL for this repository",
              "type": "string",
              "x-ms-summary": "Template Repository Contents Url"
            },
            "contributors_url": {
              "description": "The Contributors URL for this repository",
              "type": "string",
              "format": "uri",
              "x-ms-summary": "Template Repository Contributors Url"
            },
            "deployments_url": {
              "description": "The Deployments URL for this repository",
              "type": "string",
              "format": "uri",
              "x-ms-summary": "Template Repository Deployments Url"
            },
            "downloads_url": {
              "description": "The Downloads URL for this repository",
              "type": "string",
              "format": "uri",
              "x-ms-summary": "Template Repository Downloads Url"
            },
            "events_url": {
              "description": "The Events URL for this repository",
              "type": "string",
              "format": "uri",
              "x-ms-summary": "Template Repository Events Url"
            },
            "forks_url": {
              "description": "The Forks URL for this repository",
              "type": "string",
              "format": "uri",
              "x-ms-summary": "Template Repository Forks Url"
            },
            "git_commits_url": {
              "description": "The Git Commits URL for this repository",
              "type": "string",
              "x-ms-summary": "Template Repository Git Commits Url"
            },
            "git_refs_url": {
              "description": "The Git References URL for this repository",
              "type": "string",
              "x-ms-summary": "Template Repository Git References Url"
            },
            "git_tags_url": {
              "description": "The Git Tags URL for this repository",
              "type": "string",
              "x-ms-summary": "Template Repository Git Tags Url"
            },
            "git_url": {
              "description": "The Git URL for this repository",
              "type": "string",
              "x-ms-summary": "Template Repository Git Url"
            },
            "issue_comment_url": {
              "description": "The issue comment URL for this repository",
              "type": "string",
              "x-ms-summary": "Template Repository Issue Comment Url"
            },
            "issue_events_url": {
              "description": "The issue events URL for this repository",
              "type": "string",
              "x-ms-summary": "Template Repository Issue Events Url"
            },
            "issues_url": {
              "description": "The issues URL for this repository",
              "type": "string",
              "x-ms-summary": "Template Repository Issues Url"
            },
            "keys_url": {
              "description": "The keys URL for this repository",
              "type": "string",
              "x-ms-summary": "Template Repository Keys Url"
            },
            "labels_url": {
              "description": "The labels URL for this repository",
              "type": "string",
              "x-ms-summary": "Template Repository Labels Url"
            },
            "languages_url": {
              "description": "The languages URL for this repository",
              "type": "string",
              "format": "uri",
              "x-ms-summary": "Template Repository Languages Url"
            },
            "merges_url": {
              "description": "The merges URL for this repository",
              "type": "string",
              "format": "uri",
              "x-ms-summary": "Template Repository Merges Url"
            },
            "milestones_url": {
              "description": "The milestones URL for this repository",
              "type": "string",
              "x-ms-summary": "Template Repository Milestones Url"
            },
            "notifications_url": {
              "description": "The notifications URL for this repository",
              "type": "string",
              "x-ms-summary": "Template Repository Notifications Url"
            },
            "pulls_url": {
              "description": "The pulls URL for this repository",
              "type": "string",
              "x-ms-summary": "Template Repository Pulls Url"
            },
            "releases_url": {
              "description": "The releases URL for this repository",
              "type": "string",
              "x-ms-summary": "Template Repository Releases Url"
            },
            "ssh_url": {
              "description": "The SSH URL to clone this repository",
              "type": "string",
              "x-ms-summary": "Template Repository SSH Url"
            },
            "stargazers_url": {
              "description": "The stargazers (Stargazers are the people that have bookmarked the GitHub repository) URL for this repository",
              "type": "string",
              "format": "uri",
              "x-ms-summary": "Template Repository Stargazers Url"
            },
            "statuses_url": {
              "description": "The statuses URL for this repository",
              "type": "string",
              "x-ms-summary": "Template Repository Statuses Url"
            },
            "subscribers_url": {
              "description": "The subscribers URL for this repository",
              "type": "string",
              "format": "uri",
              "x-ms-summary": "Template Repository Subscribers Url"
            },
            "subscription_url": {
              "description": "The subscription URL for this repository",
              "type": "string",
              "format": "uri",
              "x-ms-summary": "Template Repository Subscription Url"
            },
            "tags_url": {
              "description": "The tags URL for this repository",
              "type": "string",
              "format": "uri",
              "x-ms-summary": "Template Repository Tags Url"
            },
            "teams_url": {
              "description": "The teams URL for this repository",
              "type": "string",
              "format": "uri",
              "x-ms-summary": "Template Repository Teams Url"
            },
            "trees_url": {
              "description": "The trees URL for this repository",
              "type": "string",
              "x-ms-summary": "Template Repository Trees Url"
            },
            "clone_url": {
              "description": "The clone URL for this repository",
              "type": "string",
              "x-ms-summary": "Template Repository Clone Url"
            },
            "mirror_url": {
              "description": "The original mirror URL for this repository",
              "type": "string",
              "format": "uri",
              "x-ms-summary": "Template Repository Mirror Url"
            },
            "hooks_url": {
              "description": "The hooks URL for this repository",
              "type": "string",
              "format": "uri",
              "x-ms-summary": "Template Repository Hooks Url"
            },
            "svn_url": {
              "description": "The SVN URL for this repository",
              "type": "string",
              "format": "uri",
              "x-ms-summary": "Template Repository SVN Url"
            },
            "homepage": {
              "description": "The homepage for this repository",
              "type": "string",
              "format": "uri",
              "x-ms-summary": "Template Repository Homepage"
            },
            "language": {
              "description": "The language for this repository",
              "type": "string",
              "x-ms-summary": "Template Repository Language"
            },
            "forks_count": {
              "description": "Number of forks there are of this repository in the whole network.",
              "format": "int32",
              "type": "integer",
              "x-ms-summary": "Template Repository Forks Count"
            },
            "stargazers_count": {
              "description": "Number of users who have starred the repository.",
              "format": "int32",
              "type": "integer",
              "x-ms-summary": "Template Repository Stargazers Count"
            },
            "watchers_count": {
              "description": "Number of users watching the repository.",
              "format": "int32",
              "type": "integer",
              "x-ms-summary": "Template Repository Watchers Count"
            },
            "size": {
              "description": "Size of the repository",
              "format": "int32",
              "type": "integer",
              "x-ms-summary": "Template Repository Size"
            },
            "default_branch": {
              "description": "The default branch of the repository.",
              "type": "string",
              "x-ms-summary": "Template Repository Default Branch"
            },
            "open_issues_count": {
              "description": "Number of open issues in the repository.",
              "format": "int32",
              "type": "integer",
              "x-ms-summary": "Template Repository Open Issues Count"
            },
            "is_template": {
              "description": "Whether this repository acts as a template that can be used to generate new repositories.",
              "default": false,
              "type": "boolean",
              "x-ms-summary": "Is Template Repository a Template?"
            },
            "topics": {
              "description": "List of topics in the repository",
              "type": "array",
              "items": {
                "type": "string"
              },
              "x-ms-summary": "Template Repository Topics"
            },
            "has_issues": {
              "description": "Whether issues are enabled.",
              "default": true,
              "type": "boolean",
              "x-ms-summary": "Template Repository Has Issues?"
            },
            "has_projects": {
              "description": "Whether projects are enabled.",
              "default": true,
              "type": "boolean",
              "x-ms-summary": "Template Repository Has Projects?"
            },
            "has_wiki": {
              "description": "Whether the wiki is enabled.",
              "default": true,
              "type": "boolean",
              "x-ms-summary": "Template Repository Has Wiki?"
            },
            "has_pages": {
              "description": "Whether pages are enabled.",
              "type": "boolean",
              "x-ms-summary": "Template Repository Has Pages?"
            },
            "has_downloads": {
              "description": "Whether downloads are enabled.",
              "default": true,
              "type": "boolean",
              "x-ms-summary": "Template Repository Has Downloads?"
            },
            "archived": {
              "description": "Whether the repository is archived.",
              "default": false,
              "type": "boolean",
              "x-ms-summary": "Is Template Repository Archived?"
            },
            "disabled": {
              "type": "boolean",
              "description": "Returns whether or not this repository disabled.",
              "x-ms-summary": "Is Template Repository Disabled?"
            },
            "visibility": {
              "description": "The repository visibility: public, private, or internal.",
              "default": "public",
              "type": "string",
              "x-ms-summary": "Template Repository Visibility"
            },
            "pushed_at": {
              "description": "When the repository was last pushed to.",
              "type": "string",
              "format": "date-time",
              "x-ms-summary": "Template Repository Pushed At"
            },
            "created_at": {
              "description": "the date and time when the repository was created.",
              "type": "string",
              "format": "date-time",
              "x-ms-summary": "Template Repository Created At"
            },
            "updated_at": {
              "description": "the date and time when the repository was last updated.",
              "type": "string",
              "format": "date-time",
              "x-ms-summary": "Template Repository Updated At"
            },
            "permissions": {
              "description": "Permissions on the repository.",
              "type": "object",
              "x-ms-summary": "Template Repository Permissions",
              "properties": {
                "admin": {
                  "type": "boolean"
                },
                "push": {
                  "type": "boolean"
                },
                "pull": {
                  "type": "boolean"
                }
              }
            },
            "allow_rebase_merge": {
              "description": "Whether to allow rebase merges for pull requests.",
              "default": true,
              "type": "boolean",
              "x-ms-summary": "Template Repository Allow Rebase Merge"
            },
            "template_repository": {
              "description": "Template repository.",
              "type": "string",
              "x-ms-summary": "Template Repository of Template Repository"
            },
            "temp_clone_token": {
              "description": "Temporary authentication token for cloning this repository.",
              "type": "string",
              "x-ms-summary": "Template Repository Temp Clone Token"
            },
            "allow_squash_merge": {
              "description": "Whether to allow squash merges for pull requests.",
              "default": true,
              "type": "boolean",
              "x-ms-summary": "Template Repository Allow Squash Merge"
            },
            "delete_branch_on_merge": {
              "description": "Whether to delete head branches when pull requests are merged",
              "default": false,
              "type": "boolean",
              "x-ms-summary": "Template Repository Delete Branch On Merge"
            },
            "allow_merge_commit": {
              "description": "Whether to allow merge commits for pull requests.",
              "default": true,
              "type": "boolean",
              "x-ms-summary": "Template Repository Allow Merge Commit"
            },
            "subscribers_count": {
              "description": "Number of subscribers for the repository.",
              "format": "int32",
              "type": "integer",
              "x-ms-summary": "Template Repository Subscribers Count"
            },
            "network_count": {
              "description": "Repository Network Count",
              "type": "integer",
              "format": "int32",
              "x-ms-summary": "Template Repository Network Count"
            }
          }
        },
        "temp_clone_token": {
          "description": "Temporary authentication token for cloning this repository.",
          "type": "string",
          "x-ms-summary": "Temp Clone Token"
        },
        "allow_squash_merge": {
          "description": "Whether to allow squash merges for pull requests.",
          "default": true,
          "type": "boolean",
          "x-ms-summary": "Allow Squash Merge"
        },
        "delete_branch_on_merge": {
          "description": "Whether to delete head branches when pull requests are merged",
          "default": false,
          "type": "boolean",
          "x-ms-summary": "Delete Branch On Merge"
        },
        "allow_merge_commit": {
          "description": "Whether to allow merge commits for pull requests.",
          "default": true,
          "type": "boolean",
          "x-ms-summary": "Allow Merge Commit"
        },
        "subscribers_count": {
          "description": "Number of subscribers for the repository.",
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "Subscribers Count"
        },
        "network_count": {
          "description": "Repository Network Count",
          "type": "integer",
          "format": "int32",
          "x-ms-summary": "Network Count"
        },
        "open_issues": {
          "description": "Repository open issues.",
          "type": "integer",
          "format": "int32",
          "x-ms-summary": "Open Issues"
        },
        "watchers": {
          "description": "Repository Watchers.",
          "type": "integer",
          "format": "int32",
          "x-ms-summary": "Watchers"
        },
        "master_branch": {
          "description": "Repository master branch.",
          "type": "string",
          "x-ms-summary": "Master Branch"
        },
        "starred_at": {
          "description": "Repository Starred At",
          "type": "string",
          "x-ms-summary": "Starred At"
        }
      }
    },
    "CreateReferenceRequest": {
      "type": "object",
      "properties": {
        "ref": {
          "x-ms-summary": "Reference",
          "type": "string",
          "description": "The name of the fully qualified reference (ie: `refs/heads/master`). If it doesn't start with 'refs' and have at least two slashes, it will be rejected."
        },
        "sha": {
          "x-ms-summary": "Sha",
          "type": "string",
          "description": "The SHA1 value for this reference."
        }
      },
      "required": [
        "ref",
        "sha"
      ]
    },
    "GitReference": {
      "description": "Git references within a repository",
      "type": "object",
      "properties": {
        "ref": {
          "x-ms-summary": "Reference",
          "description": "The name of the fully qualified reference.",
          "type": "string"
        },
        "node_id": {
          "x-ms-summary": "Node Id",
          "description": "The Node Id of the reference.",
          "type": "string"
        },
        "url": {
          "x-ms-summary": "Url",
          "description": "The url of the reference.",
          "type": "string",
          "format": "uri"
        },
        "object": {
          "type": "object",
          "properties": {
            "type": {
              "x-ms-summary": "type",
              "description": "The type of the object.",
              "type": "string"
            },
            "sha": {
              "x-ms-summary": "Sha",
              "description": "The SHA for the reference.",
              "type": "string",
              "minLength": 40,
              "maxLength": 40
            },
            "url": {
              "x-ms-summary": "Url",
              "description": "The url of the object.",
              "type": "string",
              "format": "uri"
            }
          }
        }
      }
    },
    "PullRequestCreateRequest": {
      "description": "Pull Request Creation Request.",
      "type": "object",
      "properties": {
        "title": {
          "x-ms-summary": "Title",
          "type": "string",
          "description": "The title of the new pull request."
        },
        "head": {
          "x-ms-summary": "Head",
          "type": "string",
          "description": "The name of the branch where your changes are implemented. For cross-repository pull requests in the same network, namespace `head` with a user like this: `username:branch`."
        },
        "base": {
          "x-ms-summary": "Base",
          "type": "string",
          "description": "The name of the branch you want the changes pulled into. This should be an existing branch on the current repository. You cannot submit a pull request to one repository that requests a merge to a base of another repository."
        },
        "body": {
          "x-ms-summary": "Body",
          "type": "string",
          "description": "The contents of the pull request."
        },
        "maintainer_can_modify": {
          "x-ms-summary": "Can Maintainer Modify?",
          "type": "boolean",
          "description": "Indicates whether maintainers can modify the pull request.",
          "x-ms-visibility": "advanced"
        },
        "draft": {
          "x-ms-summary": "Draft",
          "type": "boolean",
          "description": "Indicates whether the pull request is a draft.",
          "x-ms-visibility": "advanced"
        }
      },
      "required": [
        "head",
        "base"
      ]
    },
    "PullRequestMergeRequest": {
      "description": "Pull Request Merge Request.",
      "type": "object",
      "properties": {
        "commitTitle": {
          "x-ms-summary": "Commit Title",
          "type": "string",
          "description": "Title for the automatic commit message."
        },
        "commitMessage": {
          "x-ms-summary": "Commit Message",
          "type": "string",
          "description": "Extra detail to append to automatic commit message."
        },
        "sha": {
          "x-ms-summary": "Sha",
          "type": "string",
          "description": "SHA that pull request head must match to allow merge."
        },
        "mergeMethod": {
          "x-ms-summary": "Merge Method",
          "type": "string",
          "description": "Merge method to use. Possible values are `merge`, `squash` or `rebase`. Default is `merge`.",
          "enum": [
            "merge",
            "squash",
            "rebase"
          ]
        }
      }
    },
    "PullRequestMergeResult": {
      "description": "Pull Request Merge Result.",
      "type": "object",
      "properties": {
        "sha": {
          "x-ms-summary": "Sha",
          "type": "string",
          "description": "SHA for the merge commit."
        },
        "merged": {
          "x-ms-summary": "Is Merged?",
          "type": "boolean",
          "description": "Whether or not the pull request was merged."
        },
        "message": {
          "x-ms-summary": "Message",
          "type": "string",
          "description": "Merge response message."
        }
      }
    },
    "PullRequestUpdateRequest": {
      "type": "object",
      "properties": {
        "title": {
          "x-ms-summary": "Title",
          "type": "string",
          "description": "The title of the pull request."
        },
        "body": {
          "x-ms-summary": "Body",
          "type": "string",
          "description": "The contents of the pull request."
        },
        "state": {
          "x-ms-summary": "State",
          "type": "string",
          "description": "State of this Pull Request. Either `open` or `closed`.",
          "enum": [
            "open",
            "closed"
          ]
        },
        "base": {
          "x-ms-summary": "Base",
          "type": "string",
          "description": "The name of the branch you want your changes pulled into. This should be an existing branch on the current repository. You cannot update the base branch on a pull request to point to another repository."
        },
        "maintainer_can_modify": {
          "x-ms-summary": "Can Maintainer Modify?",
          "type": "boolean",
          "description": "Indicates whether maintainers can modify the pull request."
        }
      }
    },
    "Milestone": {
      "title": "",
      "description": "A collection of related issues and pull requests.",
      "type": "object",
      "properties": {
        "url": {
          "x-ms-summary": "Milestone Url",
          "type": "string",
          "format": "uri",
          "description": "The HTTP URL for the milestone."
        },
        "html_url": {
          "x-ms-summary": "Milestone Html Url",
          "type": "string",
          "format": "uri",
          "description": "The HTML URL for the milestone."
        },
        "labels_url": {
          "x-ms-summary": "Milestone Labels Url",
          "type": "string",
          "format": "uri",
          "description": "The labels URL for the milestone."
        },
        "id": {
          "x-ms-summary": "Milestone Id",
          "type": "integer",
          "format": "int32",
          "description": "The Unique Identifier for the milestone."
        },
        "node_id": {
          "x-ms-summary": "Milestone Node Id",
          "type": "string",
          "description": "The Node ID for the milestone."
        },
        "number": {
          "x-ms-summary": "Milestone Number",
          "description": "The number of the milestone.",
          "type": "integer",
          "format": "int32"
        },
        "state": {
          "description": "The state of the milestone.",
          "x-ms-summary": "Milestone State",
          "type": "string",
          "enum": [
            "open",
            "closed"
          ],
          "default": "open"
        },
        "title": {
          "description": "The title of the milestone.",
          "x-ms-summary": "Milestone Title",
          "type": "string"
        },
        "description": {
          "x-ms-summary": "Milestone Description",
          "type": "string",
          "description": "The description of the milestone."
        },
        "creator": {
          "$ref": "#/definitions/UserDetailsModel"
        },
        "open_issues": {
          "description": "Number of open issues for the repository.",
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "Milestone Open Issues"
        },
        "closed_issues": {
          "x-ms-summary": "Milestone Closed Issues",
          "type": "integer",
          "format": "int32",
          "description": "Number of closed issues for the repository."
        },
        "created_at": {
          "x-ms-summary": "Milestone Created At",
          "type": "string",
          "format": "date-time",
          "description": "The date and time when the milestone was created."
        },
        "updated_at": {
          "x-ms-summary": "Milestone Updated At",
          "type": "string",
          "format": "date-time",
          "description": "The date and time when the milestone was last updated."
        },
        "closed_at": {
          "x-ms-summary": "Milestone Closed At",
          "type": "string",
          "format": "date-time",
          "description": "The date and time when the milestone was closed."
        },
        "due_on": {
          "x-ms-summary": "Milestone Due On",
          "type": "string",
          "format": "date-time",
          "description": "The due date of the milestone."
        }
      }
    },
    "Label": {
      "title": "Label",
      "description": "Color-coded labels help you categorize and filter your issues (just like labels in Gmail).",
      "type": "object",
      "properties": {
        "id": {
          "x-ms-summary": "Id",
          "type": "integer",
          "format": "int32",
          "description": "The Unique Identifier for the label."
        },
        "node_id": {
          "x-ms-summary": "Node Id",
          "type": "string",
          "description": "The Node ID for the label."
        },
        "url": {
          "description": "URL for the label",
          "x-ms-summary": "Url",
          "type": "string",
          "format": "uri"
        },
        "name": {
          "description": "The name of the label.",
          "x-ms-summary": "Name",
          "type": "string"
        },
        "description": {
          "type": "string",
          "x-ms-summary": "Description",
          "description": "A brief description of this label."
        },
        "color": {
          "description": "6-character hex code, without the leading #, identifying the color",
          "x-ms-summary": "Color",
          "type": "string"
        },
        "default": {
          "type": "boolean",
          "x-ms-summary": "Is Default?",
          "description": "Whether or not this is a default label."
        }
      }
    },
    "TeamDetails": {
      "title": "Team",
      "description": "Groups of organization members that gives permissions on specified repositories.",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the team.",
          "type": "integer",
          "format": "int32",
          "x-ms-summary": "Id"
        },
        "node_id": {
          "x-ms-summary": "Node Id",
          "type": "string",
          "description": "The Node ID for the team."
        },
        "url": {
          "description": "URL for the team.",
          "type": "string",
          "format": "uri",
          "x-ms-summary": "Url"
        },
        "members_url": {
          "type": "string",
          "x-ms-summary": "Members Url",
          "description": "The HTTP URL for the team members."
        },
        "name": {
          "description": "Name of the team",
          "type": "string",
          "x-ms-summary": ""
        },
        "description": {
          "description": "Description of the team",
          "type": "string",
          "x-ms-summary": "Description"
        },
        "permission": {
          "description": "Permission that the team will have for its repositories",
          "type": "string",
          "x-ms-summary": "Permission"
        },
        "privacy": {
          "description": "The level of privacy this team should have",
          "type": "string",
          "x-ms-summary": "Privacy"
        },
        "html_url": {
          "type": "string",
          "format": "uri",
          "x-ms-summary": "HTML Url",
          "description": "HTML Url of the team."
        },
        "repositories_url": {
          "type": "string",
          "format": "uri",
          "x-ms-summary": "Repositories Url",
          "description": "The HTTP URL for this team's repositories."
        },
        "slug": {
          "type": "string",
          "x-ms-summary": "Slug",
          "description": "The slug corresponding to the team."
        },
        "ldap_dn": {
          "description": "Distinguished Name (DN) that team maps to within LDAP environment",
          "x-ms-summary": "LDAP DN",
          "type": "string"
        }
      }
    },
    "Link": {
      "title": "Link",
      "description": "Hypermedia Link",
      "type": "object",
      "properties": {
        "href": {
          "type": "string"
        }
      },
      "required": [
        "href"
      ]
    },
    "PullRequest": {
      "type": "object",
      "description": "Pull requests let you tell others about changes you've pushed to a repository on GitHub. Once a pull request is sent, interested parties can review the set of changes, discuss potential modifications, and even push follow-up commits if necessary.",
      "properties": {
        "url": {
          "type": "string",
          "format": "uri",
          "x-ms-summary": "Pull Request Url",
          "description": "The HTTP URL for this pull request."
        },
        "id": {
          "x-ms-summary": "Pull Request Id",
          "type": "integer",
          "format": "int32",
          "description": "The Unique Identifier for the pull request."
        },
        "node_id": {
          "x-ms-summary": "Pull Request Node Id",
          "type": "string",
          "description": "The Node ID for the pull request."
        },
        "html_url": {
          "x-ms-summary": "Pull Request Html Url",
          "type": "string",
          "format": "uri",
          "description": "The HTML URL for the pull request."
        },
        "diff_url": {
          "type": "string",
          "format": "uri",
          "x-ms-summary": "Pull Request Diff Url",
          "description": "The Diff URL for the pull request."
        },
        "patch_url": {
          "type": "string",
          "format": "uri",
          "x-ms-summary": "Pull Request Patch Url",
          "description": "The patch URL for the pull request."
        },
        "issue_url": {
          "type": "string",
          "format": "uri",
          "x-ms-summary": "Pull Request Issue Url",
          "description": "The issue URL for the pull request."
        },
        "commits_url": {
          "type": "string",
          "format": "uri",
          "x-ms-summary": "Pull Request Commit Url",
          "description": "The commit URL for the pull request."
        },
        "review_comments_url": {
          "type": "string",
          "format": "uri",
          "x-ms-summary": "Pull Request Review Comments Url",
          "description": "The review comments URL for the pull request."
        },
        "review_comment_url": {
          "type": "string",
          "x-ms-summary": "Pull Request Review Comment Url",
          "description": "The review comment URL for the pull request."
        },
        "comments_url": {
          "type": "string",
          "format": "uri",
          "x-ms-summary": "Pull Request Diff Url",
          "description": "The Diff URL for the pull request."
        },
        "statuses_url": {
          "type": "string",
          "format": "uri",
          "x-ms-summary": "Pull Request Statuses Url",
          "description": "The statuses URL for the pull request."
        },
        "number": {
          "description": "Number uniquely identifying the pull request within its repository.",
          "x-ms-summary": "Pull Request Number",
          "type": "integer",
          "format": "int32"
        },
        "state": {
          "description": "State of this Pull Request. Either `open` or `closed`.",
          "enum": [
            "open",
            "closed"
          ],
          "x-ms-summary": "Pull Request State",
          "type": "string"
        },
        "locked": {
          "type": "boolean",
          "x-ms-summary": "Is Pull Request Locked?",
          "description": "Whether the pull request is locked or not."
        },
        "title": {
          "description": "The title of the pull request.",
          "x-ms-summary": "Pull Request Title",
          "type": "string"
        },
        "user": {
          "$ref": "#/definitions/UserDetailsModel"
        },
        "body": {
          "type": "string",
          "x-ms-summary": "Pull Request Body",
          "description": "The body as Markdown."
        },
        "labels": {
          "x-ms-summary": "Pull Request Labels",
          "description": "The list of labels associated with the pull request.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Label"
          }
        },
        "milestone": {
          "$ref": "#/definitions/Milestone"
        },
        "active_lock_reason": {
          "type": "string",
          "x-ms-summary": "Pull Request Active Lock Reason",
          "description": "Reason that the conversation was locked."
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "x-ms-summary": "Pull Request Created At",
          "description": "The date and time when the pull request was created."
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "x-ms-summary": "Pull Request Updated At",
          "description": "The date and time when the pull request was last updated."
        },
        "closed_at": {
          "type": "string",
          "format": "date-time",
          "x-ms-summary": "Pull Request Closed At",
          "description": "The date and time when the pull request was closed."
        },
        "merged_at": {
          "type": "string",
          "format": "date-time",
          "x-ms-summary": "Pull Request Merged At",
          "description": "The date and time that the pull request was merged."
        },
        "merge_commit_sha": {
          "type": "string",
          "x-ms-summary": "Pull Request Merge Commit Sha",
          "description": "The merge commit Sha of the pull request."
        },
        "assignee": {
          "$ref": "#/definitions/UserDetailsModel"
        },
        "assignees": {
          "type": "array",
          "x-ms-summary": "Pull Request Assignees",
          "description": "The list of assignees for the pull request.",
          "items": {
            "$ref": "#/definitions/UserDetailsModel"
          }
        },
        "requested_reviewers": {
          "type": "array",
          "x-ms-summary": "Pull Request Requested Reviewers",
          "description": "The list of Users assigned to this pull request.",
          "items": {
            "$ref": "#/definitions/UserDetailsModel"
          }
        },
        "requested_teams": {
          "type": "array",
          "x-ms-summary": "Pull Request Requested Teams",
          "description": "The list of requested teams to this pull request.",
          "items": {
            "$ref": "#/definitions/TeamDetails"
          }
        },
        "head": {
          "type": "object",
          "description": "Head",
          "properties": {
            "label": {
              "type": "string",
              "x-ms-summary": "Pull Request Head Label",
              "description": "Head label."
            },
            "ref": {
              "type": "string",
              "x-ms-summary": "Pull Request Head Reference",
              "description": "Head Reference"
            },
            "repo": {
              "$ref": "#/definitions/RepositoryMiniDetails"
            },
            "sha": {
              "type": "string",
              "x-ms-summary": "Pull Request Head Sha",
              "description": "Head Sha"
            },
            "user": {
              "$ref": "#/definitions/UserDetailsModel"
            }
          }
        },
        "base": {
          "type": "object",
          "description": "Base",
          "properties": {
            "label": {
              "type": "string",
              "x-ms-summary": "Pull Request Base Label",
              "description": "Head label."
            },
            "ref": {
              "type": "string",
              "x-ms-summary": "Pull Request Base Reference",
              "description": "Head Reference"
            },
            "repo": {
              "$ref": "#/definitions/RepositoryMiniDetails"
            },
            "sha": {
              "type": "string",
              "x-ms-summary": "Pull Request Base Sha",
              "description": "Head Sha"
            },
            "user": {
              "$ref": "#/definitions/UserDetailsModel"
            }
          }
        },
        "author_association": {
          "type": "string",
          "x-ms-summary": "Pull RequestAuthor Association",
          "description": "Author's association with the subject of the comment."
        },
        "draft": {
          "description": "Indicates whether or not the pull request is a draft.",
          "x-ms-summary": "Is Pull Request Draft?",
          "type": "boolean"
        },
        "merged": {
          "type": "boolean",
          "x-ms-summary": "Is Pull Request Merged?",
          "description": "Whether or not the pull request was merged."
        },
        "mergeable": {
          "type": "boolean",
          "x-ms-summary": "Is Pull Request Mergeable?",
          "description": "Whether or not the pull request can be merged based on the existence of merge conflicts."
        },
        "rebaseable": {
          "type": "boolean",
          "x-ms-summary": "Is Pull Request Rebaseable?",
          "description": "Whether or not the pull request is rebaseable."
        },
        "mergeable_state": {
          "type": "string",
          "x-ms-summary": "Pull Request Mergeable State",
          "description": "The mergeable state of the pull request."
        },
        "merged_by": {
          "$ref": "#/definitions/UserDetailsModel"
        },
        "comments": {
          "type": "integer",
          "format": "int32",
          "x-ms-summary": "Pull Request Comments Count",
          "description": "The number of comments in this pull request."
        },
        "review_comments": {
          "type": "integer",
          "format": "int32",
          "x-ms-summary": "Pull Request Review Comments Count",
          "description": "The number of review comments in this pull request."
        },
        "maintainer_can_modify": {
          "description": "Indicates whether maintainers can modify the pull request.",
          "x-ms-summary": "Can Maintainer Modify Pull Request?",
          "type": "boolean"
        },
        "commits": {
          "type": "integer",
          "format": "int32",
          "x-ms-summary": "Pull Request Commits Count",
          "description": "The number of commits in this pull request."
        },
        "additions": {
          "type": "integer",
          "format": "int32",
          "x-ms-summary": "Pull Request Additions Count",
          "description": "The number of additions in this pull request."
        },
        "deletions": {
          "type": "integer",
          "format": "int32",
          "x-ms-summary": "Pull Request Deletions Count",
          "description": "The number of deletions in this pull request."
        },
        "changed_files": {
          "type": "integer",
          "format": "int32",
          "x-ms-summary": "Pull Request Changed Files Count",
          "description": "The number of changed files in this pull request."
        }
      }
    },
    "PullRequestFile": {
      "type": "object",
      "properties": {
        "sha": {
          "type": "string",
          "x-ms-summary": "sha for the file",
          "description": "The sha for the file."
        },
        "filename": {
          "type": "string",
          "x-ms-summary": "The file name",
          "description": "The file name."
        },
        "status": {
          "type": "string",
          "x-ms-summary": "Modification status for the file",
          "description": "The modification status for the file."
        },
        "additions": {
          "type": "integer",
          "format": "int32",
          "x-ms-summary": "Number of additions made to the file",
          "description": "The number of additions made to the file."
        },
        "deletions": {
          "type": "integer",
          "format": "int32",
          "x-ms-summary": "Number of deletions made to the file",
          "description": "The number of deletions made to the file."
        },
        "changes": {
          "type": "integer",
          "format": "int32",
          "x-ms-summary": "Number of changes made to the file",
          "description": "The number of changes made to the file."
        },
        "blob_url": {
          "type": "string",
          "x-ms-summary": "Blob Url for the file",
          "description": "The blob Url for the file."
        },
        "raw_url": {
          "type": "string",
          "x-ms-summary": "Raw Url for the file",
          "description": "The Raw Url for the file."
        },
        "contents_url": {
          "type": "string",
          "x-ms-summary": "Contents Url for the file",
          "description": "The contents Url for the file."
        },
        "patch": {
          "type": "string",
          "x-ms-summary": "Patch content for the file",
          "description": "The patch content for the file."
        }
      }
    },
    "WebhookPullRequestResponse": {
      "type": "object",
      "description": "Webhook pull request response.",
      "properties": {
        "action": {
          "type": "string",
          "x-ms-summary": "Action Performed",
          "description": "The action that was performed."
        },
        "number": {
          "type": "integer",
          "format": "int32",
          "x-ms-summary": "Pull Request Number",
          "description": "The pull request number."
        },
        "pull_request": {
          "$ref": "#/definitions/PullRequest"
        }
      }
    },
    "WebhookRequestBody": {
      "type": "object",
      "description": "Webhook request body.",
      "properties": {
        "active": {
          "description": "State of the Trigger, always set to true",
          "type": "boolean",
          "default": true,
          "x-ms-visibility": "internal",
          "x-ms-summary": "State of the Trigger"
        },
        "name": {
          "description": "Name of the trigger",
          "type": "string",
          "default": "web",
          "x-ms-visibility": "internal",
          "x-ms-summary": "Name of the trigger"
        },
        "config": {
          "description": "Configuration of the Trigger",
          "type": "object",
          "properties": {
            "content_type": {
              "type": "string",
              "description": "Description of repo",
              "title": "Description of repo",
              "default": "json",
              "x-ms-visibility": "internal",
              "x-ms-summary": "Description of repo"
            },
            "url": {
              "type": "string",
              "description": "callback url",
              "title": "callback url for trigger",
              "x-ms-notification-url": true,
              "x-ms-visibility": "internal",
              "x-ms-summary": "callback url for trigger"
            }
          },
          "required": [
            "url",
            "content_type"
          ]
        },
        "events": {
          "description": "Webhook events to listen on",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Webhook events to listen on",
          "type": "array",
          "default": [
            "pull_request"
          ],
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "active",
        "name",
        "events",
        "config"
      ]
    },
    "WebhookCreationResponse": {
      "type": "object",
      "description": "Webhook creation response.",
      "properties": {
        "type": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "active": {
          "type": "boolean"
        },
        "events": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "config": {
          "type": "object",
          "properties": {
            "content_type": {
              "type": "string"
            },
            "url": {
              "type": "string"
            }
          }
        },
        "updated_at": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "test_url": {
          "type": "string"
        },
        "ping_url": {
          "type": "string"
        },
        "last_response": {
          "type": "object",
          "properties": {
            "code": {
              "type": "string"
            },
            "status": {
              "type": "string"
            },
            "message": {
              "type": "string"
            }
          }
        }
      }
    },
    "RequestReviewersBody": {
      "type": "object",
      "description": "Request Reviewers body.",
      "properties": {
        "reviewers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "team_reviewers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    }
  },
  "parameters": {
    "defaultAcceptHeader": {
      "name": "Accept",
      "in": "header",
      "required": true,
      "type": "string",
      "default": "application/vnd.github.v3+json",
      "x-ms-visibility": "internal"
    },
    "repositoryOwner": {
      "name": "repositoryOwner",
      "in": "path",
      "description": "Name of the repository owner.",
      "required": true,
      "x-ms-summary": "Repository Owner",
      "type": "string"
    },
    "repositoryName": {
      "name": "repositoryName",
      "in": "path",
      "description": "Name of the repository.",
      "required": true,
      "x-ms-summary": "Repository Name",
      "type": "string"
    },
    "issueNumber": {
      "name": "issueNumber",
      "in": "path",
      "description": "Issue Number for a given issue.",
      "required": true,
      "x-ms-summary": "Issue Number",
      "type": "integer"
    },
    "milestoneNumber": {
      "name": "milestoneNumber",
      "in": "path",
      "description": "Milestone number for a given milestone.",
      "required": true,
      "x-ms-summary": "Milestone Number",
      "type": "integer"
    },
    "pullNumber": {
      "name": "pullNumber",
      "description": "Pull Number.",
      "in": "path",
      "required": true,
      "x-ms-summary": "Pull Number",
      "type": "integer"
    },
    "secretName": {
      "name": "secretName",
      "description": "Name of the secret.",
      "in": "path",
      "required": true,
      "x-ms-summary": "Secret Name",
      "type": "string"
    },
    "templateOwner": {
      "name": "templateOwner",
      "description": "Name of the template repository owner.",
      "in": "path",
      "required": true,
      "x-ms-summary": "Template Owner",
      "type": "string"
    },
    "templateRepository": {
      "name": "templateRepository",
      "description": "Name of the template repository.",
      "in": "path",
      "required": true,
      "x-ms-summary": "Template Repository",
      "type": "string"
    },
    "repositoryId": {
      "name": "repositoryId",
      "in": "path",
      "description": "Unique Identifier of the repository.",
      "required": true,
      "x-ms-summary": "Repository Id",
      "type": "integer"
    },
    "reference": {
      "name": "reference",
      "description": "The ref in the URL must be formatted as heads/<branch name> for branches and tags/<tag name> for tags.",
      "in": "path",
      "required": true,
      "x-ms-summary": "Reference",
      "type": "string"
    }
  },
  "x-ms-connector-metadata": [
    {
      "propertyName": "Website",
      "propertyValue": "https://github.com/"
    }
  ],
  "externalDocs": {
    "url": "https://docs.microsoft.com/connectors/github"
  }
}
