{
  "swagger": "2.0",
  "info": {
    "version": "1.0.2",
    "title": "BigCommerce",
    "description": "BigCommerce is a flexible, open SaaS platform. Connect to BigCommerce to retrieve orders, products, and related information.",
    "x-ms-api-annotation": {
      "status": "Preview"
    },
    "contact": {
      "name": "Microsoft Dynamics",
      "url": "https://aka.ms/iomsupport",
      "email": "iomdri@microsoft.com"
    }
  },
  "host": "europe-002.azure-apim.net",
  "basePath": "/apim/bigcommerce",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/{connectionId}/{store_hash}/v2/orders": {
      "get": {
        "summary": "Get All Orders",
        "description": "Gets all orders using the filter query.",
        "tags": [
          "Orders"
        ],
        "operationId": "GetAllOrders",
        "parameters": [
          {
            "name": "connectionId",
            "in": "path",
            "required": true,
            "type": "string",
            "x-ms-visibility": "internal"
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "default": "application/json",
            "x-ms-visibility": "internal"
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "default": "application/json",
            "x-ms-visibility": "internal"
          },
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "x-ms-summary": "Store Hash",
            "x-ms-url-encoding": "single",
            "description": "The store hash code."
          },
          {
            "name": "min_id",
            "in": "query",
            "required": false,
            "type": "integer",
            "x-ms-summary": "Min ID",
            "description": "The minimum order ID."
          },
          {
            "name": "max_id",
            "in": "query",
            "required": false,
            "type": "integer",
            "x-ms-summary": "Maximum Order ID",
            "description": "The maximum order ID."
          },
          {
            "name": "min_total",
            "in": "query",
            "required": false,
            "type": "number",
            "x-ms-summary": "Min Total",
            "description": "The minimum order total in float format."
          },
          {
            "name": "max_total",
            "in": "query",
            "required": false,
            "type": "number",
            "x-ms-summary": "Max Total",
            "description": "The maximum order total in float format."
          },
          {
            "name": "customer_id",
            "in": "query",
            "required": false,
            "type": "integer",
            "x-ms-summary": "Customer ID",
            "description": "Customer ID of the order."
          },
          {
            "name": "email",
            "in": "query",
            "required": false,
            "type": "string",
            "x-ms-summary": "Email",
            "description": "The email of the customer."
          },
          {
            "name": "status_id",
            "in": "query",
            "required": false,
            "type": "integer",
            "x-ms-summary": "Status ID",
            "description": "The staus ID of the order."
          },
          {
            "name": "cart_id",
            "in": "query",
            "required": false,
            "type": "string",
            "x-ms-summary": "Cart ID",
            "description": "The cart ID of the order."
          },
          {
            "name": "payment_method",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "Manual",
              "Cash on Delivery",
              "Credit Card",
              "Test Payment Gateway",
              "Pay In Store"
            ],
            "x-ms-summary": "Payment Method",
            "description": "The payment method used on the order."
          },
          {
            "name": "min_date_created",
            "in": "query",
            "required": false,
            "type": "string",
            "x-ms-summary": "Min Date Created",
            "description": "Minimum date the order was created in RFC-2822 or ISO-8601. \n\nRFC-2822: 'Thu, 20 Apr 2017 11:32:00 -0400'\n\nISO-8601: '2017-04-20T11:32:00.000-04:00'."
          },
          {
            "name": "max_date_created",
            "in": "query",
            "required": false,
            "type": "string",
            "x-ms-summary": "Max Date Created",
            "description": "Maximum date the order was created in RFC-2822 or ISO-8601. \n\nRFC-2822: 'Thu, 20 Apr 2017 11:32:00 -0400'\n\nISO-8601: '2017-04-20T11:32:00.000-04:00'."
          },
          {
            "name": "min_date_modified",
            "in": "query",
            "required": false,
            "type": "string",
            "x-ms-summary": "Min Date Modified",
            "description": "Minimum date the order was modified in RFC-2822 or ISO-8601. \n\nRFC-2822: 'Thu, 20 Apr 2017 11:32:00 -0400'\n\nISO-8601: '2017-04-20T11:32:00.000-04:00'."
          },
          {
            "name": "max_date_modified",
            "in": "query",
            "required": false,
            "type": "string",
            "x-ms-summary": "Max Date Modified",
            "description": "Maximum date the order was modified in RFC-2822 or ISO-8601. \n\nRFC-2822: 'Thu, 20 Apr 2017 11:32:00 -0400'\n\nISO-8601: '2017-04-20T11:32:00.000-04:00'."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "number",
            "x-ms-summary": "Page",
            "description": "The page to return in the response."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "number",
            "x-ms-summary": "Limit",
            "description": "Number of results to return."
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "id",
              "customer_id",
              "date_created",
              "date_modified",
              "status_id",
              "channel_id",
              "external_id"
            ],
            "x-ms-summary": "Sort",
            "description": "Field and direction to sort orders. To specify the direction, add ':asc' or ':desc' to the end of the query parameter. E.g. 'sort=date_created:desc'."
          },
          {
            "name": "is_deleted",
            "in": "query",
            "required": false,
            "type": "boolean",
            "x-ms-summary": "Is Deleted",
            "description": "If the order was deleted or archived."
          },
          {
            "name": "channel_id",
            "in": "query",
            "required": false,
            "type": "boolean",
            "x-ms-summary": "Channel ID",
            "description": "The Channel ID of the Order."
          }
        ],
        "responses": {
          "200": {
            "description": "Order Collection Response.",
            "schema": {
              "$ref": "#/definitions/orderCollection_Resp"
            }
          },
          "default": {
            "description": "default",
            "schema": {}
          }
        },
        "externalDocs": {
          "url": "https://docs.microsoft.com/connectors/bigcommerce/#get-all-orders"
        }
      }
    },
    "/{connectionId}/{store_hash}/v2/orders/{order_id}": {
      "get": {
        "summary": "Get An Order",
        "description": "Gets an order using order Id.",
        "tags": [
          "Orders"
        ],
        "operationId": "GetAnOrder",
        "parameters": [
          {
            "name": "connectionId",
            "in": "path",
            "required": true,
            "type": "string",
            "x-ms-visibility": "internal"
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "default": "application/json",
            "x-ms-visibility": "internal"
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "default": "application/json",
            "x-ms-visibility": "internal"
          },
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "x-ms-summary": "Store Hash",
            "x-ms-url-encoding": "single",
            "description": "The store hash code."
          },
          {
            "name": "order_id",
            "in": "path",
            "required": true,
            "type": "string",
            "x-ms-summary": "Order ID",
            "x-ms-url-encoding": "single",
            "description": "ID of the order."
          }
        ],
        "responses": {
          "200": {
            "description": "Order Response.",
            "schema": {
              "$ref": "#/definitions/order_Resp"
            }
          },
          "404": {
            "description": "The resource was not found.",
            "schema": {
              "$ref": "#/definitions/errorNotFound"
            }
          },
          "default": {
            "description": "default",
            "schema": {}
          }
        },
        "externalDocs": {
          "url": "https://docs.microsoft.com/connectors/bigcommerce/#get-an-order"
        }
      },
      "put": {
        "description": "Updates an *Order*. To learn more about creating or updating orders, see [Orders Overview](/api-docs/orders/orders-api-overview).",
        "summary": "Update An Order",
        "tags": [
          "Orders"
        ],
        "operationId": "UpdateAnOrder",
        "parameters": [
          {
            "name": "connectionId",
            "in": "path",
            "required": true,
            "type": "string",
            "x-ms-visibility": "internal"
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "x-ms-summary": "Content-Type",
            "default": "application/json",
            "x-ms-visibility": "internal"
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "x-ms-summary": "Accept",
            "default": "application/json",
            "x-ms-visibility": "internal"
          },
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "x-ms-summary": "Store Hash",
            "x-ms-url-encoding": "single",
            "description": "The store hash code."
          },
          {
            "name": "order_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "x-ms-summary": "order_id",
            "x-ms-url-encoding": "single",
            "description": "ID of the order"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Order Data",
            "x-ms-summary": "body",
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Order Response.",
            "schema": {
              "$ref": "#/definitions/order_Resp"
            }
          },
          "default": {
            "description": "default",
            "schema": {}
          }
        },
        "externalDocs": {
          "url": "https://docs.microsoft.com/connectors/bigcommerce/#update-an-order"
        }
      }
    },
    "/{connectionId}/{store_hash}/v2/orders/{order_id}/products": {
      "get": {
        "summary": "List Order Products",
        "description": "Lists all order products on an order using the order Id.",
        "tags": [
          "Orders"
        ],
        "operationId": "GetAllOrderProducts",
        "parameters": [
          {
            "name": "connectionId",
            "in": "path",
            "required": true,
            "type": "string",
            "x-ms-visibility": "internal"
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "default": "application/json",
            "x-ms-visibility": "internal"
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "default": "application/json",
            "x-ms-visibility": "internal"
          },
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "x-ms-summary": "Store Hash",
            "x-ms-url-encoding": "single",
            "description": "The store hash code."
          },
          {
            "name": "order_id",
            "in": "path",
            "required": true,
            "type": "string",
            "x-ms-summary": "Order ID",
            "x-ms-url-encoding": "single",
            "description": "ID of the order."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "number",
            "x-ms-summary": "Page",
            "description": "The page to return in the response."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "number",
            "x-ms-summary": "Limit",
            "description": "Number of results to return."
          }
        ],
        "responses": {
          "200": {
            "description": "Order Products Collection Response.",
            "schema": {
              "$ref": "#/definitions/orderProductsCollection_Resp"
            }
          },
          "default": {
            "description": "default",
            "schema": {}
          }
        },
        "externalDocs": {
          "url": "https://docs.microsoft.com/connectors/bigcommerce/#list-order-products"
        }
      }
    },
    "/{connectionId}/{store_hash}/v2/orders/{order_id}/shipping_addresses": {
      "get": {
        "summary": "Get Order Shipping Addresses",
        "description": "Gets all shipping addresses on an order using the order Id.",
        "tags": [
          "Orders"
        ],
        "operationId": "GetAllOrderShippingAddresses",
        "parameters": [
          {
            "name": "connectionId",
            "in": "path",
            "required": true,
            "type": "string",
            "x-ms-visibility": "internal"
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "default": "application/json",
            "x-ms-visibility": "internal"
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "default": "application/json",
            "x-ms-visibility": "internal"
          },
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "x-ms-summary": "Store Hash",
            "x-ms-url-encoding": "single",
            "description": "The store hash code."
          },
          {
            "name": "order_id",
            "in": "path",
            "required": true,
            "type": "string",
            "x-ms-summary": "Order ID",
            "x-ms-url-encoding": "single",
            "description": "ID of the order."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "number",
            "x-ms-summary": "Page",
            "description": "The page to return in the response."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "number",
            "x-ms-summary": "Limit",
            "description": "Number of results to return."
          }
        ],
        "responses": {
          "200": {
            "description": "Order Shipping Address Collection Response.",
            "schema": {
              "$ref": "#/definitions/orderShippingAddressCollection_Resp"
            }
          },
          "default": {
            "description": "default",
            "schema": {}
          }
        },
        "externalDocs": {
          "url": "https://docs.microsoft.com/connectors/bigcommerce/#get-order-shipping-addresses"
        }
      }
    },
    "/{connectionId}/{store_hash}/v3/catalog/products": {
      "get": {
        "description": "Returns a list of **Products**. Optional filter parameters can be passed in.",
        "summary": "Get Products",
        "tags": [
          "Products"
        ],
        "operationId": "GetProducts",
        "parameters": [
          {
            "name": "connectionId",
            "in": "path",
            "required": true,
            "type": "string",
            "x-ms-visibility": "internal"
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "x-ms-summary": "Content-Type",
            "default": "application/json",
            "x-ms-visibility": "internal"
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "x-ms-summary": "Accept",
            "default": "application/json",
            "x-ms-visibility": "internal"
          },
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "x-ms-summary": "Store Hash",
            "x-ms-url-encoding": "single",
            "description": "The store hash code."
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "x-ms-summary": "Id",
            "description": "Filter items by id."
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string",
            "x-ms-summary": "name",
            "description": "Filter items by name."
          },
          {
            "name": "upc",
            "in": "query",
            "required": false,
            "type": "string",
            "x-ms-summary": "upc",
            "description": "Filter items by upc."
          },
          {
            "name": "price",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double",
            "x-ms-summary": "price",
            "description": "Filter items by price."
          },
          {
            "name": "weight",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double",
            "x-ms-summary": "weight",
            "description": "Filter items by weight."
          },
          {
            "name": "condition",
            "in": "query",
            "required": false,
            "enum": [
              "new",
              "used",
              "refurbished"
            ],
            "type": "string",
            "x-ms-summary": "condition",
            "description": "Filter items by condition."
          },
          {
            "name": "brand_id",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "x-ms-summary": "brand_id",
            "description": "Filter items by brand_id."
          },
          {
            "name": "date_modified",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time",
            "x-ms-summary": "date_modified",
            "description": "Filter items by `date_modified`."
          },
          {
            "name": "date_modified:max",
            "in": "query",
            "required": false,
            "type": "string",
            "x-ms-summary": "date_modified:max",
            "description": "Filter items by `date_modified`. For example, `date_modified:max=2020-06-15`."
          },
          {
            "name": "date_modified:min",
            "in": "query",
            "required": false,
            "type": "string",
            "x-ms-summary": "date_modified:min",
            "description": "Filter items by `date_modified`. For example, `date_modified:min=2018-06-15`."
          },
          {
            "name": "date_last_imported",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time",
            "x-ms-summary": "date_last_imported",
            "description": "Filter items by date_last_imported."
          },
          {
            "name": "date_last_imported:max",
            "in": "query",
            "required": false,
            "type": "string",
            "x-ms-summary": "date_last_imported:max",
            "description": "Filter items by date_last_imported. For example, `date_last_imported:max=2020-06-15`."
          },
          {
            "name": "date_last_imported:min",
            "in": "query",
            "required": false,
            "type": "string",
            "x-ms-summary": "date_last_imported:min",
            "description": "Filter items by date_last_imported. For example, `date_last_imported:min=2018-06-15`."
          },
          {
            "name": "is_visible",
            "in": "query",
            "required": false,
            "type": "boolean",
            "x-ms-summary": "is_visible",
            "description": "Filter items based on whether the product is currently visible on the storefront."
          },
          {
            "name": "is_featured",
            "in": "query",
            "required": false,
            "enum": [
              "1",
              "0"
            ],
            "type": "string",
            "x-ms-summary": "is_featured",
            "description": "Filter items by is_featured. `0` for true, `1` for false."
          },
          {
            "name": "is_free_shipping",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "x-ms-summary": "is_free_shipping",
            "description": "Filter items by is_free_shipping."
          },
          {
            "name": "inventory_level",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "x-ms-summary": "inventory_level",
            "description": "Filter items by inventory_level."
          },
          {
            "name": "inventory_level:in",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "x-ms-summary": "inventory_level:in",
            "description": "Inventory Level"
          },
          {
            "name": "inventory_level:not_in",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "x-ms-summary": "inventory_level:not_in",
            "description": "Inventory Level NOT IN"
          },
          {
            "name": "inventory_level:min",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "x-ms-summary": "inventory_level:min",
            "description": "Inventory Level MIN"
          },
          {
            "name": "inventory_level:max",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "x-ms-summary": "inventory_level:max",
            "description": "Inventory Level MAX"
          },
          {
            "name": "inventory_level:greater",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "x-ms-summary": "inventory_level:greater",
            "description": "Inventory Level GREATER"
          },
          {
            "name": "inventory_level:less",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "x-ms-summary": "inventory_level:less",
            "description": "Inventory Level LESS"
          },
          {
            "name": "inventory_low",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "x-ms-summary": "inventory_low",
            "description": "Filter items by inventory_low. Values: 1, 0."
          },
          {
            "name": "out_of_stock",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "x-ms-summary": "out_of_stock",
            "description": "Filter items by out_of_stock. To enable the filter, pass `out_of_stock`=`1`."
          },
          {
            "name": "total_sold",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "x-ms-summary": "total_sold",
            "description": "Filter items by total_sold."
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "enum": [
              "digital",
              "physical"
            ],
            "type": "string",
            "x-ms-summary": "type",
            "description": "Filter items by type."
          },
          {
            "name": "categories",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "x-ms-summary": "categories",
            "description": "Filter items by categories.\n If a product is in more than one category, using this query will not return the product. Instead use `categories:in=12`."
          },
          {
            "name": "keyword",
            "in": "query",
            "required": false,
            "type": "string",
            "x-ms-summary": "keyword",
            "description": "Filter items by keywords found in the `name`, `description`, or `sku` fields, or in the brand name."
          },
          {
            "name": "keyword_context",
            "in": "query",
            "required": false,
            "enum": [
              "shopper",
              "merchant"
            ],
            "type": "string",
            "x-ms-summary": "keyword_context",
            "description": "Set context used by the search algorithm to return results targeted towards the specified group. Use `merchant` to help merchants search their own catalog. Use `shopper` to return shopper-facing search results."
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "x-ms-summary": "status",
            "description": "Filter items by status."
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "enum": [
              "variants",
              "images",
              "custom_fields",
              "bulk_pricing_rules",
              "primary_image",
              "modifiers",
              "options",
              "videos"
            ],
            "type": "string",
            "x-ms-summary": "include",
            "description": "Sub-resources to include on a product, in a comma-separated list. If `options` or `modifiers` is used, results are limited to 10 per page."
          },
          {
            "name": "include_fields",
            "in": "query",
            "required": false,
            "type": "string",
            "x-ms-summary": "include_fields",
            "description": "Fields to include, in a comma-separated list. The ID and the specified fields will be returned."
          },
          {
            "name": "exclude_fields",
            "in": "query",
            "required": false,
            "type": "string",
            "x-ms-summary": "exclude_fields",
            "description": "Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded."
          },
          {
            "name": "availability",
            "in": "query",
            "required": false,
            "enum": [
              "available",
              "disabled",
              "preorder"
            ],
            "type": "string",
            "x-ms-summary": "availability",
            "description": "Filter items by availability. Values are: available, disabled, preorder."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "x-ms-summary": "page",
            "description": "Specifies the page number in a limited (paginated) list of products."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "x-ms-summary": "limit",
            "description": "Controls the number of items per page in a limited (paginated) list of products."
          },
          {
            "name": "direction",
            "in": "query",
            "required": false,
            "enum": [
              "asc",
              "desc"
            ],
            "type": "string",
            "x-ms-summary": "direction",
            "description": "Sort direction. Acceptable values are: `asc`, `desc`."
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "enum": [
              "id",
              "name",
              "sku",
              "price",
              "date_modified",
              "date_last_imported",
              "inventory_level",
              "is_visible",
              "total_sold"
            ],
            "type": "string",
            "x-ms-summary": "sort",
            "description": "Field name to sort by. Note: Since `id` increments when new products are added, you can use that field to sort by product create date."
          },
          {
            "name": "categories:in",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "x-ms-summary": "categories:in",
            "description": "Filter items by categories. Use for products in multiple categories. For example, `categories:in=12`."
          }
        ],
        "responses": {
          "200": {
            "description": "Product Collection Response",
            "schema": {
              "$ref": "#/definitions/ProductCollectionResponse"
            }
          }
        },
        "externalDocs": {
          "url": "https://docs.microsoft.com/connectors/bigcommerce/#get-products"
        }
      }
    },
    "/{connectionId}/{store_hash}/v3/catalog/products/{product_id}": {
      "get": {
        "description": "Returns a single *Product*. Optional parameters can be passed in.",
        "summary": "Get Product By Id",
        "tags": [
          "Products"
        ],
        "operationId": "GetProductById",
        "parameters": [
          {
            "name": "connectionId",
            "in": "path",
            "required": true,
            "type": "string",
            "x-ms-visibility": "internal"
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "x-ms-summary": "Content-Type",
            "default": "application/json",
            "x-ms-visibility": "internal"
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "x-ms-summary": "Accept",
            "default": "application/json",
            "x-ms-visibility": "internal"
          },
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "x-ms-summary": "Store Hash",
            "x-ms-url-encoding": "single",
            "description": "The store hash code."
          },
          {
            "name": "product_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "x-ms-summary": "Product Id",
            "x-ms-url-encoding": "single",
            "format": "int32",
            "description": "The ID of the `Product` to which the resource belongs."
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "enum": [
              "variants",
              "images",
              "custom_fields",
              "bulk_pricing_rules",
              "primary_image",
              "modifiers",
              "options",
              "videos"
            ],
            "type": "string",
            "x-ms-summary": "include",
            "description": "Sub-resources to include on a product, in a comma-separated list. If `options` or `modifiers` is used, results are limited to 10 per page."
          },
          {
            "name": "include_fields",
            "in": "query",
            "required": false,
            "type": "string",
            "x-ms-summary": "include_fields",
            "description": "Fields to include, in a comma-separated list. The ID and the specified fields will be returned."
          },
          {
            "name": "exclude_fields",
            "in": "query",
            "required": false,
            "type": "string",
            "x-ms-summary": "exclude_fields",
            "description": "Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded."
          }
        ],
        "responses": {
          "200": {
            "description": "Product Response",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/product_Full"
                },
                "meta": {
                  "description": "Empty meta object; may be used later.",
                  "title": "Meta",
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "schema": {
              "$ref": "#/definitions/errorNotFound"
            }
          },
          "default": {
            "description": "default",
            "schema": {}
          }
        },
        "externalDocs": {
          "url": "https://docs.microsoft.com/connectors/bigcommerce/#get-product-by-id"
        }
      },
      "put": {
        "description": "Updates a *Product*.\n\n**Read-Only Fields**\n- id\n- date_created\n- date_modified\n- calculated_price\n- base_variant_id\n",
        "summary": "Update Product",
        "tags": [
          "Products"
        ],
        "operationId": "UpdateProduct",
        "parameters": [
          {
            "name": "connectionId",
            "in": "path",
            "required": true,
            "type": "string",
            "x-ms-visibility": "internal"
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "x-ms-summary": "Content-Type",
            "default": "application/json",
            "x-ms-visibility": "internal"
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "x-ms-summary": "Accept",
            "default": "application/json",
            "x-ms-visibility": "internal"
          },
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "x-ms-summary": "Store Hash",
            "x-ms-url-encoding": "single",
            "description": "The store hash code."
          },
          {
            "name": "product_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "x-ms-summary": "Product Id",
            "x-ms-url-encoding": "single",
            "format": "int32",
            "description": "The ID of the `Product` to which the resource belongs."
          },
          {
            "name": "product",
            "in": "body",
            "required": true,
            "x-ms-summary": "Product",
            "description": "Product",
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "include_fields",
            "in": "query",
            "required": false,
            "type": "string",
            "x-ms-summary": "Include Fields",
            "description": "Fields to include, in a comma-separated list. The ID and the specified fields will be returned."
          }
        ],
        "responses": {
          "200": {
            "description": "Product Response",
            "schema": {
              "$ref": "#/definitions/ProductResponse"
            },
            "headers": {}
          },
          "201": {
            "description": "Created",
            "schema": {
              "type": "object"
            }
          },
          "404": {
            "description": "The resource was not found.",
            "schema": {
              "$ref": "#/definitions/errorNotFound"
            }
          },
          "409": {
            "description": "`Product` was in conflict with another product. This is caused by: duplicate unique values, such as name or SKU; a missing category, brand, or tax_class with which the product is being associated; or a conflicting bulk pricing rule.",
            "schema": {
              "$ref": "#/definitions/errorResponse_Full"
            }
          },
          "422": {
            "description": "`Product` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details.",
            "schema": {
              "$ref": "#/definitions/errorResponse_Full"
            }
          },
          "default": {
            "description": "default",
            "schema": {}
          }
        },
        "externalDocs": {
          "url": "https://docs.microsoft.com/connectors/bigcommerce/#update-product"
        }
      }
    },
    "/{connectionId}/{store_hash}/v3/customers": {
      "get": {
        "description": "Returns a list of Customers. Optional filter parameters can be passed in.",
        "summary": "Get All Customers",
        "tags": [
          "Customers"
        ],
        "operationId": "GetCustomers",
        "parameters": [
          {
            "name": "connectionId",
            "in": "path",
            "required": true,
            "type": "string",
            "x-ms-visibility": "internal"
          },
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "x-ms-summary": "Store Hash",
            "x-ms-url-encoding": "single",
            "description": "The store hash code."
          },
          {
            "in": "query",
            "name": "limit",
            "type": "number",
            "description": "Items count per page. `limit=50`.",
            "x-ms-summary": "Items per page."
          },
          {
            "name": "id:in",
            "in": "query",
            "description": "Filter items by ID.\n`id:in=4,5,6`.",
            "type": "array",
            "items": {
              "type": "integer"
            },
            "x-ms-summary": "Filter items by ID."
          },
          {
            "name": "customer_group_id:in",
            "in": "query",
            "description": "Filter items by customer_group_id. `customer_group_id:in=5,6`.",
            "type": "array",
            "items": {
              "type": "integer"
            },
            "x-ms-summary": "Filter items by customer_group_id."
          },
          {
            "name": "date_modified",
            "in": "query",
            "description": "Filter items by date_modified. `date_modified=2018-09-05T13:45:03`.",
            "type": "string",
            "format": "date-time",
            "x-ms-summary": "Filter items by date_modified."
          },
          {
            "name": "date_modified:min",
            "in": "query",
            "description": "Filter items by mininum date_modified. `date_modified:min=2019-09-04T:00:00:00` or `date_modified:min=2019-09-04`.",
            "type": "string",
            "x-ms-summary": "Filter items by minimum date_modified."
          },
          {
            "name": "date_modified:max",
            "in": "query",
            "description": "Filter items by maximum date_modified `date_modified:max=2018-09-05T13:45:03` or `date_modified:max=2019-09-04`.",
            "type": "string",
            "format": "date-time",
            "x-ms-summary": "Filter items by maximum date_modified."
          },
          {
            "name": "include",
            "in": "query",
            "description": "Indicates whether to include customer sub-resources:\n * `addresses` - customer addresses\n * `storecredit` - store credit\n * `attributes` - customer attributes and address attributes\n * `formfields` - customer and address form fields\n\n `include=addresses,storecredit,attributes,formfields`.",
            "type": "string",
            "x-ms-summary": "Indicates whether to include customer sub-resources."
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sort items by date_created, date_modified, or last_name:* `date_created:asc` - date created, ascending* `date_created:desc` - date created, descending* `last_name:asc` - last name, ascending* `last_name:desc` - last name, descending * `date_modified:asc` - date modified, ascending* `date_modified:desc`- date modified, descending  Example: `sort=last_name:asc`.",
            "type": "string",
            "x-ms-summary": "Sort items."
          }
        ],
        "responses": {
          "200": {
            "description": "Customer Collection Response",
            "schema": {
              "$ref": "#/definitions/CustomerCollectionResponse"
            }
          }
        },
        "externalDocs": {
          "url": "https://docs.microsoft.com/connectors/bigcommerce/#get-all-customers"
        }
      }
    }
  },
  "definitions": {
    "address_Full": {
      "title": "address_Full",
      "type": "object",
      "properties": {
        "first_name": {
          "description": "The first name of the customer address.",
          "type": "string",
          "minLength": 1,
          "maxLength": 255
        },
        "last_name": {
          "description": "The last name of the customer address.",
          "type": "string",
          "minLength": 1,
          "maxLength": 255
        },
        "company": {
          "description": "The company of the customer address.",
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "address1": {
          "description": "The address 1 line.",
          "type": "string"
        },
        "address2": {
          "description": "The address 2 line.",
          "type": "string"
        },
        "city": {
          "description": "The city of the customer address.",
          "type": "string",
          "minLength": 0,
          "maxLength": 100
        },
        "state_or_province": {
          "description": "The state or province name",
          "type": "string",
          "minLength": 0,
          "maxLength": 100
        },
        "postal_code": {
          "description": "The postal code of the customer address.",
          "type": "string",
          "minLength": 0,
          "maxLength": 30
        },
        "country_code": {
          "description": "The country code of the customer address.",
          "type": "string",
          "minLength": 2,
          "maxLength": 2
        },
        "phone": {
          "description": "The phone number of the customer address.",
          "type": "string",
          "minLength": 0,
          "maxLength": 50
        },
        "address_type": {
          "title": "Address Type",
          "description": "The address type. Residential or Commercial",
          "example": "residential",
          "type": "string",
          "enum": [
            "residential",
            "commercial"
          ]
        },
        "customer_id": {
          "description": "The customer ID.",
          "type": "integer",
          "format": "int32"
        },
        "id": {
          "description": "The unique numeric ID of the address.",
          "type": "integer",
          "format": "int32"
        },
        "country": {
          "description": "The country name of the customer address.",
          "type": "string"
        }
      },
      "required": [
        "first_name",
        "last_name",
        "address1",
        "city",
        "state_or_province",
        "postal_code",
        "country_code",
        "customer_id",
        "id"
      ]
    },
    "Adjuster": {
      "title": "Adjuster",
      "description": "The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront.",
      "type": "string",
      "enum": [
        "relative",
        "percentage"
      ]
    },
    "adjuster_Full": {
      "title": "adjuster_Full",
      "description": "Adjuster for Complex Rules.",
      "type": "object",
      "properties": {
        "adjuster": {
          "$ref": "#/definitions/Adjuster"
        },
        "adjuster_value": {
          "description": "The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.",
          "example": 5,
          "type": "number",
          "format": "double"
        }
      }
    },
    "adjusters_Full": {
      "title": "adjusters_Full",
      "type": "object",
      "properties": {
        "price": {
          "$ref": "#/definitions/adjuster_Full"
        },
        "weight": {
          "$ref": "#/definitions/adjuster_Full"
        },
        "image_url": {
          "description": "The URL for an image displayed on the storefront when the modifier value is selected.Limit of 8MB per file.",
          "example": "https://cdn8.bigcommerce.com/s-{{store_hash}}/products/184/images/445/naturalcanvascart2_1024x1024__92347__29648.1534344533.1280.1280.jpg?c=2",
          "type": "string"
        },
        "purchasing_disabled": {
          "$ref": "#/definitions/PurchasingDisabled"
        }
      }
    },
    "attribute_Full": {
      "description": "",
      "type": "object",
      "x-examples": {
        "Example": {
          "attribute_id": 2,
          "attribute_value": "Yes",
          "customer_id": 1,
          "date_created": "2021-07-28T19:00:38Z",
          "date_modified": "2021-07-28T19:00:38Z",
          "id": 2
        }
      },
      "properties": {
        "attribute_id": {
          "type": "integer",
          "description": "Attribute ID",
          "format": "int32",
          "example": 2
        },
        "attribute_value": {
          "type": "string",
          "minLength": 1,
          "description": "Attribute value",
          "example": "Yes"
        },
        "customer_id": {
          "type": "integer",
          "description": "Customer ID",
          "example": 1,
          "format": "int32"
        },
        "date_created": {
          "type": "string",
          "minLength": 1,
          "description": "The date the customer attribute was created",
          "format": "date-time"
        },
        "date_modified": {
          "type": "string",
          "minLength": 1,
          "description": "The date the customer attribute was modified",
          "format": "date-time"
        },
        "id": {
          "type": "integer",
          "description": "Attribute value ID",
          "format": "int32",
          "example": 2
        }
      }
    },
    "billingAddress_Base": {
      "title": "billingAddress_Base",
      "description": "Billing Address properties common to all requests and responses.",
      "type": "object",
      "properties": {
        "first_name": {
          "type": "string",
          "example": "Jane"
        },
        "last_name": {
          "type": "string",
          "example": "Doe"
        },
        "company": {
          "type": "string"
        },
        "street_1": {
          "type": "string",
          "example": "123 Main Street",
          "description": "Street address (first line)."
        },
        "street_2": {
          "type": "string",
          "description": "Street address (second line)."
        },
        "city": {
          "type": "string",
          "example": "Austin"
        },
        "state": {
          "type": "string",
          "example": "TX"
        },
        "zip": {
          "type": "string",
          "example": "12345",
          "description": "The billing address must include the zip code. The zip code must be two or more characters."
        },
        "country": {
          "type": "string",
          "example": "United States"
        },
        "country_iso2": {
          "type": "string",
          "example": "US",
          "description": "2-letter ISO Alpha-2 code for the country."
        },
        "phone": {
          "type": "string",
          "description": "Recipient's telephone number."
        },
        "email": {
          "type": "string",
          "example": "janedoe@example.com",
          "description": "Recipient's email address."
        }
      },
      "required": [
        "zip"
      ]
    },
    "billingAddress_Full": {
      "title": "billingAddress_Full",
      "description": "Required to create an order.",
      "type": "object",
      "properties": {
        "billingAddress": {
          "$ref": "#/definitions/billingAddress_Base"
        },
        "form_fields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/formFields"
          }
        }
      }
    },
    "bulkPricingRule_Full": {
      "title": "bulkPricingRule_Full",
      "description": "Common Bulk Pricing Rule properties",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique ID of the *Bulk Pricing Rule*. Read-Only.",
          "type": "integer",
          "format": "int32"
        },
        "quantity_min": {
          "description": "The minimum inclusive quantity of a product to satisfy this rule. Must be greater than or equal to zero.\nRequired in /POST.",
          "example": 10,
          "type": "integer",
          "minimum": 0,
          "format": "int32"
        },
        "quantity_max": {
          "description": "The maximum inclusive quantity of a product to satisfy this rule. Must be greater than the `quantity_min` value – unless this field has a value of 0 (zero), in which case there will be no maximum bound for this rule.\nRequired in /POST.",
          "example": 50,
          "type": "integer",
          "minimum": 0,
          "format": "int32"
        },
        "type": {
          "description": "The type of adjustment that is made. Values: `price` - the adjustment amount per product; `percent` - the adjustment as a percentage of the original price; `fixed` - the adjusted absolute price of the product.\nRequired in /POST.",
          "type": "string",
          "enum": [
            "price",
            "percent",
            "fixed"
          ]
        },
        "amount": {
          "description": "The discount can be a fixed dollar amount or a percentage. For a fixed dollar amount enter it as an integer and the response will return as an integer. For percentage enter the amount as the percentage divided by 100 using string format. For example 10% percent would be “.10”. The response will return as an integer.\nRequired in /POST.",
          "example": 10,
          "type": "integer",
          "format": "int32"
        }
      },
      "required": [
        "quantity_min",
        "quantity_max",
        "type",
        "amount"
      ]
    },
    "config_Full": {
      "title": "config_Full",
      "description": "The values for option config can vary based on the Modifier created.",
      "type": "object",
      "properties": {
        "default_value": {
          "description": "(date, text, multi_line_text, numbers_only_text) The default value. Shown on a date option as an ISO-8601–formatted string, or on a text option as a string.",
          "type": "string"
        },
        "checked_by_default": {
          "description": "(checkbox) Flag for setting the checkbox to be checked by default.",
          "type": "boolean"
        },
        "checkbox_label": {
          "description": "(checkbox) Label displayed for the checkbox option.",
          "type": "string"
        },
        "date_limited": {
          "description": "(date) Flag to limit the dates allowed to be entered on a date option.",
          "type": "boolean"
        },
        "date_limit_mode": {
          "description": "(date) The type of limit that is allowed to be entered on a date option.",
          "type": "string",
          "enum": [
            "earliest",
            "range",
            "latest"
          ]
        },
        "date_earliest_value": {
          "description": "(date) The earliest date allowed to be entered on the date option, as an ISO-8601 formatted string.",
          "example": "2018-08-31T05:00:00+00:00",
          "type": "string",
          "format": "date"
        },
        "date_latest_value": {
          "description": "(date) The latest date allowed to be entered on the date option, as an ISO-8601 formatted string.",
          "example": "2019-01-01T05:00:00+00:00",
          "type": "string",
          "format": "date"
        },
        "file_types_mode": {
          "description": "(file) The kind of restriction on the file types that can be uploaded with a file upload option. Values: `specific` - restricts uploads to particular file types; `all` - allows all file types.",
          "type": "string",
          "enum": [
            "specific",
            "all"
          ]
        },
        "file_types_supported": {
          "description": "(file) The type of files allowed to be uploaded if the `file_type_option` is set to `specific`. Values:\n  `images` - Allows upload of image MIME types (`bmp`, `gif`, `jpg`, `jpeg`, `jpe`, `jif`, `jfif`, `jfi`, `png`, `wbmp`, `xbm`, `tiff`). `documents` - Allows upload of document MIME types (`txt`, `pdf`, `rtf`, `doc`, `docx`, `xls`, `xlsx`, `accdb`, `mdb`, `one`, `pps`, `ppsx`, `ppt`, `pptx`, `pub`, `odt`, `ods`, `odp`, `odg`, `odf`).\n  `other` - Allows file types defined in the `file_types_other` array.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "file_types_other": {
          "description": "(file) A list of other file types allowed with the file upload option.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "file_max_size": {
          "description": "(file) The maximum size for a file that can be used with the file upload option. This will still be limited by the server.",
          "example": 5,
          "type": "integer",
          "format": "int32"
        },
        "text_characters_limited": {
          "description": "(text, multi_line_text) Flag to validate the length of a text or multi-line text input.",
          "type": "boolean"
        },
        "text_min_length": {
          "description": "(text, multi_line_text) The minimum length allowed for a text or multi-line text option.",
          "example": 1,
          "type": "integer",
          "format": "int32"
        },
        "text_max_length": {
          "description": "(text, multi_line_text) The maximum length allowed for a text or multi line text option.",
          "example": 55,
          "type": "integer",
          "format": "int32"
        },
        "text_lines_limited": {
          "description": "(multi_line_text) Flag to validate the maximum number of lines allowed on a multi-line text input.",
          "example": true,
          "type": "boolean"
        },
        "text_max_lines": {
          "description": "(multi_line_text) The maximum number of lines allowed on a multi-line text input.",
          "example": 4,
          "type": "integer",
          "format": "int32"
        },
        "number_limited": {
          "description": "(numbers_only_text) Flag to limit the value of a number option.",
          "example": true,
          "type": "boolean"
        },
        "number_limit_mode": {
          "description": "(numbers_only_text) The type of limit on values entered for a number option.",
          "type": "string",
          "enum": [
            "lowest",
            "highest",
            "range"
          ]
        },
        "number_lowest_value": {
          "description": "(numbers_only_text) The lowest allowed value for a number option if `number_limited` is true.",
          "example": 100,
          "type": "number",
          "format": "double"
        },
        "number_highest_value": {
          "description": "(numbers_only_text) The highest allowed value for a number option if `number_limited` is true.",
          "type": "number",
          "format": "double"
        },
        "number_integers_only": {
          "description": "(numbers_only_text) Flag to limit the input on a number option to whole numbers only.",
          "example": false,
          "type": "boolean"
        },
        "product_list_adjusts_inventory": {
          "description": "(product_list, product_list_with_images) Flag for automatically adjusting inventory on a product included in the list.",
          "type": "boolean"
        },
        "product_list_adjusts_pricing": {
          "description": "(product_list, product_list_with_images) Flag to add the optional product's price to the main product's price.",
          "type": "boolean"
        },
        "product_list_shipping_calc": {
          "description": "(product_list, product_list_with_images) How to factor the optional product's weight and package dimensions into the shipping quote. Values: `none` - don't adjust; `weight` - use shipping weight only; `package` - use weight and dimensions.",
          "type": "string",
          "enum": [
            "none",
            "weight",
            "package"
          ]
        }
      }
    },
    "coupons_Resource": {
      "title": "coupons_Resource",
      "type": "object",
      "properties": {
        "url": {
          "description": "URL of the coupons for api requests",
          "example": "https://api.bigcommerce.com/stores/{$$.env.store_hash}/v2/orders/129/coupons",
          "type": "string"
        },
        "resource": {
          "description": "resource of the coupons",
          "example": "/orders/129/coupons",
          "type": "string"
        }
      }
    },
    "customer_Full": {
      "title": "customer_Full",
      "type": "object",
      "properties": {
        "email": {
          "description": "The email of the customer. Must be unique.",
          "type": "string",
          "minLength": 3,
          "maxLength": 255
        },
        "first_name": {
          "description": "The first name of the customer.",
          "type": "string",
          "minLength": 1,
          "maxLength": 100
        },
        "last_name": {
          "description": "The last name of the customer.",
          "type": "string",
          "minLength": 1,
          "maxLength": 100
        },
        "company": {
          "description": "The company of the customer.",
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "phone": {
          "description": "The phone number of the customer.",
          "type": "string",
          "minLength": 0,
          "maxLength": 50
        },
        "registration_ip_address": {
          "description": "The IP address from which this customer was registered.",
          "type": "string",
          "minLength": 0,
          "maxLength": 30
        },
        "notes": {
          "description": "The customer notes.",
          "type": "string"
        },
        "tax_exempt_category": {
          "description": "The tax exempt category code for the customer.",
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "customer_group_id": {
          "description": "ID of the group which this customer belongs to.",
          "type": "integer",
          "format": "int32"
        },
        "id": {
          "description": "The unique numeric ID of the customer.",
          "type": "integer",
          "format": "int32"
        },
        "date_modified": {
          "description": "The date on which the customer was modified.",
          "type": "string",
          "format": "date-time"
        },
        "date_created": {
          "description": "The date of which the customer was created.",
          "type": "string",
          "format": "date-time"
        },
        "address_count": {
          "description": "Total number of customer addresses.",
          "type": "integer",
          "format": "int32"
        },
        "attribute_count": {
          "description": "Total number of customer attributes.",
          "type": "integer",
          "format": "int32"
        },
        "authentication": {
          "title": "Customer Authentication Base",
          "example": {
            "force_password_reset": true
          },
          "type": "object",
          "properties": {
            "force_password_reset": {
              "description": "If `true`, this customer will be forced to change password on next login.",
              "type": "boolean"
            }
          }
        },
        "addresses": {
          "description": "Array of customer addresses. Limited to 10.",
          "type": "array",
          "maxItems": 10,
          "items": {
            "$ref": "#/definitions/address_Full"
          }
        },
        "attributes": {
          "description": "Array of customer attributes. Limited to 10.",
          "type": "array",
          "maxItems": 10,
          "items": {
            "$ref": "#/definitions/attribute_Full"
          }
        },
        "store_credit_amounts": {
          "$ref": "#/definitions/CustomerStoredCreditAmounts"
        },
        "accepts_product_review_abandoned_cart_emails": {
          "type": "boolean",
          "description": "It determines if the customer is signed up to receive either product review or abandoned cart emails or recieve both emails."
        },
        "channel_ids": {
          "$ref": "#/definitions/customerChannelIds"
        }
      }
    },
    "CustomerCollectionResponse": {
      "title": "Customer Collection Response",
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/customer_Full"
          }
        }
      }
    },
    "customerChannelIds": {
      "type": "array",
      "title": "customerChannelIds",
      "description": "Array of channel ids the Customer has access to.",
      "items": {
        "type": "integer"
      }
    },
    "CustomerStoredCreditAmounts": {
      "description": "Store credit. ",
      "type": "array",
      "format": "double",
      "items": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "format": "float",
            "example": 43.15
          }
        }
      }
    },
    "customUrl_Full": {
      "title": "customUrl_Full",
      "description": "The custom URL for the product on the storefront.",
      "type": "object",
      "properties": {
        "url": {
          "description": "Product URL on the storefront.",
          "example": "/shoes",
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "is_customized": {
          "description": "Returns `true` if the URL has been changed from its default state (the auto-assigned URL that BigCommerce provides).",
          "type": "boolean"
        }
      }
    },
    "detailedErrors": {
      "title": "detailedErrors",
      "type": "object",
      "properties": {
        "additionalProperties": {
          "type": "string"
        }
      }
    },
    "error_Base": {
      "title": "error_Base",
      "description": "Error payload for the BigCommerce API.",
      "type": "object",
      "properties": {
        "status": {
          "description": "The HTTP status code.",
          "type": "integer",
          "format": "int32"
        },
        "title": {
          "description": "The error title describing the particular error.",
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "instance": {
          "type": "string"
        }
      }
    },
    "errorNoContent": {
      "title": "errorNoContent",
      "description": "No-content response for the BigCommerce API.",
      "type": "object",
      "properties": {
        "status": {
          "description": "204 HTTP status code.",
          "type": "integer",
          "format": "int32"
        },
        "title": {
          "description": "The error title describing the situation.",
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "instance": {
          "type": "string"
        }
      }
    },
    "errorNotFound": {
      "title": "errorNotFound",
      "description": "Error payload for the BigCommerce API.",
      "type": "object",
      "properties": {
        "status": {
          "description": "404 HTTP status code.",
          "type": "integer",
          "format": "int32"
        },
        "title": {
          "description": "The error title describing the particular error.",
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "instance": {
          "type": "string"
        }
      }
    },
    "errorResponse_Full": {
      "properties": {
        "schema": {
          "$ref": "#/definitions/error_Base"
        },
        "errors": {
          "$ref": "#/definitions/detailedErrors"
        }
      },
      "title": "errorResponse_Full",
      "type": "object"
    },
    "formFields": {
      "title": "formFields",
      "description": "Read-Only. If you have required address form fields they will need to be set as optional before creating an order via API.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Read-Only. If you have required address form fields they will need to be set as optional before creating an order via API.",
          "example": "License Id",
          "type": "string"
        },
        "value": {
          "description": "Read-Only. If you have required address form fields they will need to be set as optional before creating an order via API.",
          "example": "123BAF",
          "type": "string"
        }
      }
    },
    "Links": {
      "title": "Links",
      "description": "Pagination links for the previous and next parts of the whole collection.",
      "type": "object",
      "properties": {
        "previous": {
          "description": "Link to the previous page returned in the response.",
          "type": "string"
        },
        "current": {
          "description": "Link to the current page returned in the response.",
          "example": "?page=1&limit=50",
          "type": "string"
        },
        "next": {
          "description": "Link to the next page returned in the response.",
          "type": "string"
        }
      }
    },
    "metaCollection_Full": {
      "title": "metaCollection_Full",
      "description": "Data about the response, including pagination and collection totals.",
      "type": "object",
      "properties": {
        "pagination": {
          "$ref": "#/definitions/pagination_Full"
        }
      }
    },
    "order_Put": {
      "properties": {
        "products": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/orderCatalogProduct_Put"
          }
        },
        "shipping_addresses": {
          "$ref": "#/definitions/shippingAddress_Base"
        },
        "base_handling_cost": {
          "description": "The value of the base handling cost. (Float, Float-As-String, Integer)",
          "example": "0.0000",
          "type": "string"
        },
        "base_shipping_cost": {
          "description": "The value of the base shipping cost. (Float, Float-As-String, Integer)",
          "example": "0.0000",
          "type": "string"
        },
        "base_wrapping_cost": {
          "description": "The value of the base wrapping cost. (Float, Float-As-String, Integer)",
          "example": 0,
          "type": "string"
        },
        "billing_address": {
          "$ref": "#/definitions/billingAddress_Full"
        },
        "channel_id": {
          "description": "Shows where the order originated. The channel_id will default to 1.",
          "example": 1,
          "type": "integer",
          "format": "int32"
        },
        "customer_id": {
          "type": "number",
          "format": "double"
        },
        "customer_message": {
          "description": "Message that the customer entered (number, optional) -o the `Order Comments` box during checkout.",
          "example": "Thank you",
          "type": "string"
        },
        "date_created": {
          "description": "The date this order was created. If not specified, will default to the current time. The date should be in RFC 2822 format.",
          "type": "string"
        },
        "default_currency_code": {
          "description": "The currency code of the transactional currency the shopper pays in; writeable when multi-currency is enabled.",
          "type": "string"
        },
        "discount_amount": {
          "description": "Amount of discount for this transaction. (Float, Float-As-String, Integer)",
          "example": "0.0000",
          "type": "string"
        },
        "ebay_order_id": {
          "description": "If the order was placed through eBay, the eBay order number will be included. Otherwise, the value will be `0`.",
          "example": "0",
          "type": "string"
        },
        "external_id": {
          "description": "ID of the order in another system. For example, the Amazon Order ID if this is an Amazon order.This field can be updated in a /POST, but using a /PUT to update the order will return a 400 error. The field 'external_id' cannot be written to. Please remove it from your request before trying again. It can not be overwritten once set.",
          "type": "string"
        },
        "external_source": {
          "description": "For orders submitted or modified via the API, using a PUT or POST operation, you can optionally pass in a value identifying the system used to generate the order. For example: `POS`. Otherwise, the value will be null.",
          "type": "string"
        },
        "geoip_country": {
          "description": "The full name of the country where the customer made the purchase, based on the IP.",
          "example": "United States",
          "type": "string"
        },
        "geoip_country_iso2": {
          "description": "The country where the customer made the purchase, in ISO2 format, based on the IP.",
          "example": "US",
          "type": "string"
        },
        "handling_cost_ex_tax": {
          "description": "The value of the handling cost, excluding tax. (Float, Float-As-String, Integer)",
          "example": "0.0000",
          "type": "string"
        },
        "handling_cost_inc_tax": {
          "description": "The value of the handling cost, including tax. (Float, Float-As-String, Integer)",
          "example": "0.0000",
          "type": "string"
        },
        "ip_address": {
          "description": "IP Address of the customer, if known.",
          "example": "12.345.678.910",
          "type": "string"
        },
        "is_deleted": {
          "description": "Indicates whether the order was deleted (archived). Set to to true, to archive an order.",
          "example": false,
          "type": "boolean"
        },
        "items_shipped": {
          "description": "The number of items that have been shipped.",
          "example": 0,
          "type": "number",
          "format": "double"
        },
        "items_total": {
          "description": "The total number of items in the order.",
          "example": 1,
          "type": "number",
          "format": "double"
        },
        "order_is_digital": {
          "description": "Whether this is an order for digital products.",
          "example": false,
          "type": "boolean"
        },
        "payment_method": {
          "$ref": "#/definitions/PaymentMethod"
        },
        "payment_provider_id": {
          "description": "The external Transaction ID/Payment ID within this order's payment provider (if a payment provider was used).",
          "type": "string"
        },
        "refunded_amount": {
          "description": "The amount refunded from this transaction. (Float, Float-As-String, Integer)",
          "example": "0.0000",
          "type": "string"
        },
        "shipping_cost_ex_tax": {
          "description": "The value of shipping cost, excluding tax. (Float, Float-As-String, Integer)",
          "example": "0.0000",
          "type": "string"
        },
        "shipping_cost_inc_tax": {
          "description": "The value of shipping cost, including tax. (Float, Float-As-String, Integer)",
          "example": "0.0000",
          "type": "string"
        },
        "staff_notes": {
          "description": "Any additional notes for staff.",
          "example": "Send Saturday",
          "type": "string"
        },
        "status_id": {
          "description": "The status ID of the order.",
          "type": "integer",
          "format": "int32"
        },
        "subtotal_ex_tax": {
          "description": "Override value for subtotal excluding tax. If specified, the field `subtotal_inc_tax` is also required. (Float, Float-As-String, Integer)",
          "example": "225.0000",
          "type": "string"
        },
        "subtotal_inc_tax": {
          "description": "Override value for subtotal including tax. If specified, the field `subtotal_ex_tax` is also required. (Float, Float-As-String, Integer)",
          "example": "225.0000",
          "type": "string"
        },
        "tax_provider_id": {
          "$ref": "#/definitions/TaxProviderId"
        },
        "customer_locale": {
          "description": "The customer's locale",
          "example": "\\\"en\\\", \\\"en-us\\\",",
          "type": "string"
        },
        "total_ex_tax": {
          "description": "Override value for the total, excluding tax. If specified, the field `total_inc_tax` is also required. (Float, Float-As-String, Integer)",
          "example": "225.0000",
          "type": "string"
        },
        "total_inc_tax": {
          "description": "Override value for the total, including tax. If specified, the field `total_ex_tax` is also required. (Float, Float-As-String, Integer)",
          "example": "225.0000",
          "type": "string"
        },
        "wrapping_cost_ex_tax": {
          "description": "The value of the wrapping cost, excluding tax. (Float, Float-As-String, Integer)",
          "example": "0.0000",
          "type": "string"
        },
        "wrapping_cost_inc_tax": {
          "description": "The value of the wrapping cost, including tax. (Float, Float-As-String, Integer)",
          "example": "0.0000",
          "type": "string"
        }
      },
      "title": "order_Put",
      "type": "object"
    },
    "order_Resp": {
      "title": "order_Resp",
      "description": "Order object returned in responses.",
      "type": "object",
      "properties": {
        "id": {
          "description": "Read-only. The ID of the order.",
          "example": 118,
          "type": "integer",
          "format": "int32"
        },
        "date_modified": {
          "description": "A read-only value representing the last modification of the order. Do not attempt to modify or set this value in a POST or PUT operation. RFC-2822",
          "type": "string"
        },
        "date_shipped": {
          "description": "A read-only value representing the date of shipment. Do not attempt to modify or set this value in a POST or PUT operation. RFC-2822",
          "type": "string"
        },
        "cart_id": {
          "description": "The cart ID from which this order originated, if applicable. Correlates with the Cart API. This is a READ-ONLY field; do not set or modify its value in a POST or PUT request.",
          "example": "a8458391-ef68-4fe5-9ec1-442e6a767364",
          "type": "string"
        },
        "status": {
          "description": "The status will include one of the (string, optiona) - values defined under Order Statuses. This value is read-only. Do not attempt to modify or set this value in a POST or PUT operation.",
          "example": "Awaiting Fulfillment",
          "type": "string"
        },
        "subtotal_tax": {
          "description": "A read-only value. Do not attempt to set or modify this value in a POST or PUT operation. (Float, Float-As-String, Integer)",
          "example": "0.0000",
          "type": "string"
        },
        "shipping_cost_tax": {
          "description": "A read-only value. Do not attempt to modify or set this value in a POST or PUT operation. (Float, Float-As-String, Integer)",
          "example": "0.0000",
          "type": "string"
        },
        "shipping_cost_tax_class_id": {
          "description": "Shipping-cost tax class. A read-only value. Do not attempt to modify or set this value in a POST or PUT operation. (NOTE: Value ignored if automatic tax is enabled on the store.)",
          "example": 2,
          "type": "integer",
          "format": "int32"
        },
        "handling_cost_tax": {
          "description": "A read-only value. Do not attempt to modify or set this value in a POST or PUT operation. (Float, Float-As-String, Integer)",
          "example": "0.0000",
          "type": "string"
        },
        "handling_cost_tax_class_id": {
          "description": "A read-only value. Do not attempt to set or modify this value in a POST or PUT operation. (NOTE: Value ignored if automatic tax is enabled on the store.)",
          "example": 2,
          "type": "integer",
          "format": "int32"
        },
        "wrapping_cost_tax": {
          "description": "A read-only value. Do not attempt to modify or set this value in a POST or PUT operation. (Float, Float-As-String, Integer)",
          "example": "0.0000",
          "type": "string"
        },
        "wrapping_cost_tax_class_id": {
          "description": "A read-only value. Do not attempt to set or modify this value in a POST or PUT operation. (NOTE: Value ignored if automatic tax is enabled on the store.)",
          "example": 3,
          "type": "integer",
          "format": "int32"
        },
        "payment_status": {
          "$ref": "#/definitions/PaymentStatus"
        },
        "store_credit_amount": {
          "description": "Represents the store credit that the shopper has redeemed on this individual order. This is a read-only value. Do not pass in a POST or PUT. (Float, Float-As-String, Integer)",
          "example": "0.0000",
          "type": "string"
        },
        "gift_certificate_amount": {
          "description": "A read-only value. Do not pass in a POST or PUT. (Float, Float-As-String, Integer)",
          "example": "0.0000",
          "type": "string"
        },
        "currency_id": {
          "description": "The display currency ID. May be different from transactional currency. A read-only value. Do not pass in a POST or PUT.",
          "example": 1,
          "type": "integer",
          "format": "int32"
        },
        "currency_code": {
          "description": "The currency code of the display currency used to present prices on the storefront. A read-only value. Do not pass in a POST or PUT.",
          "example": "USD",
          "type": "string"
        },
        "currency_exchange_rate": {
          "description": "The exchange rate between the store's default currency and the display currency. A read-only value. Do not pass in a POST or PUT. (Float, Float-As-String, Integer)",
          "example": "1.0000000000",
          "type": "string"
        },
        "default_currency_id": {
          "description": "The transactional currency ID. A read-only value. Do not pass in a POST or PUT.",
          "example": 1,
          "type": "integer",
          "format": "int32"
        },
        "coupon_discount": {
          "description": "A read-only value. Do not pass in a POST or PUT. (Float, Float-As-String, Integer)",
          "example": "5.0000",
          "type": "string"
        },
        "shipping_address_count": {
          "description": "The number of shipping addresses associated with this transaction. A read-only value. Do not pass in a POST or PUT.",
          "type": "number",
          "format": "double"
        },
        "is_email_opt_in": {
          "description": "Indicates whether the shopper has selected an opt-in check box (on the checkout page) to receive emails. A read-only value. Do not pass in a POST or PUT.",
          "example": false,
          "type": "boolean"
        },
        "order_source": {
          "description": "Orders submitted via the store's website will include a `www` value. Orders submitted via the API will be set to `external`. A read-only value. Do not pass in a POST or PUT.",
          "example": "www",
          "type": "string"
        },
        "products": {
          "$ref": "#/definitions/products_Resource"
        },
        "shipping_addresses": {
          "$ref": "#/definitions/shippingAddress_Resource"
        },
        "coupons": {
          "$ref": "#/definitions/coupons_Resource"
        },
        "status_id": {
          "description": "The staus ID of the order.",
          "example": 7,
          "type": "integer",
          "format": "int32"
        },
        "base_handling_cost": {
          "description": "The value of the base handling cost. (Float, Float-As-String, Integer)",
          "example": "0.0000",
          "type": "string"
        },
        "base_shipping_cost": {
          "description": "The value of the base shipping cost. (Float, Float-As-String, Integer)",
          "example": "0.0000",
          "type": "string"
        },
        "base_wrapping_cost": {
          "description": "The value of the base wrapping cost. (Float, Float-As-String, Integer)",
          "example": 0,
          "type": "string"
        },
        "billing_address": {
          "$ref": "#/definitions/billingAddress_Full"
        },
        "channel_id": {
          "description": "Shows where the order originated. The channel_id will default to 1.",
          "example": 1,
          "type": "integer",
          "format": "int32"
        },
        "customer_id": {
          "type": "number",
          "format": "double"
        },
        "customer_message": {
          "description": "Message that the customer entered (number, optional) -o the `Order Comments` box during checkout.",
          "example": "Thank you",
          "type": "string"
        },
        "date_created": {
          "description": "The date this order was created. If not specified, will default to the current time. The date should be in RFC 2822 format.",
          "type": "string"
        },
        "default_currency_code": {
          "description": "The currency code of the transactional currency the shopper pays in; writeable when multi-currency is enabled.",
          "type": "string"
        },
        "discount_amount": {
          "description": "Amount of discount for this transaction. (Float, Float-As-String, Integer)",
          "example": "0.0000",
          "type": "string"
        },
        "ebay_order_id": {
          "description": "If the order was placed through eBay, the eBay order number will be included. Otherwise, the value will be `0`.",
          "example": "0",
          "type": "string"
        },
        "external_id": {
          "description": "ID of the order in another system. For example, the Amazon Order ID if this is an Amazon order.This field can be updated in a /POST, but using a /PUT to update the order will return a 400 error. The field 'external_id' cannot be written to. Please remove it from your request before trying again. It can not be overwritten once set.",
          "type": "string"
        },
        "external_source": {
          "description": "For orders submitted or modified via the API, using a PUT or POST operation, you can optionally pass in a value identifying the system used to generate the order. For example: `POS`. Otherwise, the value will be null.",
          "type": "string"
        },
        "geoip_country": {
          "description": "The full name of the country where the customer made the purchase, based on the IP.",
          "example": "United States",
          "type": "string"
        },
        "geoip_country_iso2": {
          "description": "The country where the customer made the purchase, in ISO2 format, based on the IP.",
          "example": "US",
          "type": "string"
        },
        "handling_cost_ex_tax": {
          "description": "The value of the handling cost, excluding tax. (Float, Float-As-String, Integer)",
          "example": "0.0000",
          "type": "string"
        },
        "handling_cost_inc_tax": {
          "description": "The value of the handling cost, including tax. (Float, Float-As-String, Integer)",
          "example": "0.0000",
          "type": "string"
        },
        "ip_address": {
          "description": "IP Address of the customer, if known.",
          "example": "12.345.678.910",
          "type": "string"
        },
        "is_deleted": {
          "description": "Indicates whether the order was deleted (archived). Set to to true, to archive an order.",
          "example": false,
          "type": "boolean"
        },
        "items_shipped": {
          "description": "The number of items that have been shipped.",
          "example": 0,
          "type": "number",
          "format": "double"
        },
        "items_total": {
          "description": "The total number of items in the order.",
          "example": 1,
          "type": "number",
          "format": "double"
        },
        "order_is_digital": {
          "description": "Whether this is an order for digital products.",
          "example": false,
          "type": "boolean"
        },
        "payment_method": {
          "$ref": "#/definitions/PaymentMethod"
        },
        "payment_provider_id": {
          "description": "The external Transaction ID/Payment ID within this order's payment provider (if a payment provider was used).",
          "type": "string"
        },
        "refunded_amount": {
          "description": "The amount refunded from this transaction. (Float, Float-As-String, Integer)",
          "example": "0.0000",
          "type": "string"
        },
        "shipping_cost_ex_tax": {
          "description": "The value of shipping cost, excluding tax. (Float, Float-As-String, Integer)",
          "example": "0.0000",
          "type": "string"
        },
        "shipping_cost_inc_tax": {
          "description": "The value of shipping cost, including tax. (Float, Float-As-String, Integer)",
          "example": "0.0000",
          "type": "string"
        },
        "staff_notes": {
          "description": "Any additional notes for staff.",
          "example": "Send Saturday",
          "type": "string"
        },
        "subtotal_ex_tax": {
          "description": "Override value for subtotal excluding tax. If specified, the field `subtotal_inc_tax` is also required. (Float, Float-As-String, Integer)",
          "example": "225.0000",
          "type": "string"
        },
        "subtotal_inc_tax": {
          "description": "Override value for subtotal including tax. If specified, the field `subtotal_ex_tax` is also required. (Float, Float-As-String, Integer)",
          "example": "225.0000",
          "type": "string"
        },
        "tax_provider_id": {
          "$ref": "#/definitions/TaxProviderId"
        },
        "customer_locale": {
          "description": "The customer's locale",
          "example": "\\\"en\\\", \\\"en-us\\\",",
          "type": "string"
        },
        "total_ex_tax": {
          "description": "Override value for the total, excluding tax. If specified, the field `total_inc_tax` is also required. (Float, Float-As-String, Integer)",
          "example": "225.0000",
          "type": "string"
        },
        "total_inc_tax": {
          "description": "Override value for the total, including tax. If specified, the field `total_ex_tax` is also required. (Float, Float-As-String, Integer)",
          "example": "225.0000",
          "type": "string"
        },
        "wrapping_cost_ex_tax": {
          "description": "The value of the wrapping cost, excluding tax. (Float, Float-As-String, Integer)",
          "example": "0.0000",
          "type": "string"
        },
        "wrapping_cost_inc_tax": {
          "description": "The value of the wrapping cost, including tax. (Float, Float-As-String, Integer)",
          "example": "0.0000",
          "type": "string"
        }
      }
    },
    "orderCatalogProduct_Put": {
      "title": "orderCatalogProduct_Put",
      "type": "object",
      "properties": {
        "id": {
          "description": "The order product `id`. To add a product to an existing order, don't include `id ` in the payload. `id` is required when updating an order product.",
          "type": "integer",
          "format": "int32"
        },
        "product_id": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "description": "Alias for `name_customer`. The product name that is shown to customer in storefront. `xxx` and `xxx_customer` always hold the same value, updating either `xxx` or `xxx_customer` will change value for both of those fields.",
          "example": "Fog Linen Chambray Towel - Beige Stripe",
          "type": "string",
          "minLength": 1
        },
        "name_customer": {
          "description": "The product name that is shown to customer in storefront. `xxx` and `xxx_customer` always hold the same value, updating either `xxx` or `xxx_customer` will change value for both of those fields.",
          "example": "Fog Linen Chambray Towel - Beige Stripe",
          "type": "string",
          "minLength": 1
        },
        "name_merchant": {
          "description": "The product name that is shown to merchant in control panel.",
          "example": "Towel Type 1",
          "type": "string"
        },
        "product_options": {
          "description": "`product_options` are required when adding a product with variants.",
          "type": "array",
          "items": {
            "title": "ProductOption",
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int32"
              },
              "value": {
                "type": "string"
              },
              "display_name": {
                "description": "Alias for display_name_customer. The product option name that is shown to customer in storefront. `xxx` and `xxx_customer` always hold the same value, updating either `xxx` or `xxx_customer` will change value for both of those fields.",
                "example": "couleur",
                "type": "string",
                "minLength": 1
              },
              "display_name_customer": {
                "description": "The product option name that is shown to customer in storefront. `xxx` and `xxx_customer` always hold the same value, updating either `xxx` or `xxx_customer` will change value for both of those fields.",
                "example": "couleur",
                "type": "string",
                "minLength": 1
              },
              "display_name_merchant": {
                "description": "The product option name that is shown to merchant in Control Panel.",
                "example": "color",
                "type": "string"
              },
              "display_value": {
                "description": "Alias for display_value_customer. The product option value that is shown to customer in storefront. `xxx` and `xxx_customer` always hold the same value, updating either `xxx` or `xxx_customer` will change value for both of those fields.",
                "example": "bleu",
                "type": "string",
                "minLength": 1
              },
              "display_value_merchant": {
                "description": "The product option value that is shown to merchant in Control Panel.",
                "example": "blue",
                "type": "string",
                "minLength": 1
              },
              "display_value_customer": {
                "description": "The product option value that is shown to customer in storefront.`xxx` and `xxx_customer` always hold the same value, updating either `xxx` or `xxx_customer` will change value for both of those fields.",
                "example": "bleu",
                "type": "string",
                "minLength": 1
              }
            }
          }
        },
        "quantity": {
          "type": "number",
          "format": "double"
        },
        "price_inc_tax": {
          "type": "number",
          "format": "double"
        },
        "price_ex_tax": {
          "type": "number",
          "format": "double"
        },
        "upc": {
          "type": "string"
        },
        "variant_id": {
          "description": "\"\"",
          "type": "integer",
          "format": "int32"
        },
        "wrapping_name": {
          "type": "string"
        },
        "wrapping_message": {
          "type": "string"
        },
        "wrapping_cost_ex_tax": {
          "type": "number",
          "format": "double"
        },
        "wrapping_cost_inc_tax": {
          "type": "number",
          "format": "double"
        },
        "sku": {
          "type": "string"
        }
      }
    },
    "orderCollection_Resp": {
      "title": "orderCollection_Resp",
      "description": "Orders list returned in responses.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/order_Resp"
      }
    },
    "orderProduct_Resp": {
      "title": "orderProduct_Resp",
      "description": "Order product returned in responses.",
      "type": "object",
      "properties": {
        "id": {
          "description": "Numeric ID of this product within this order.",
          "example": 25,
          "type": "integer"
        },
        "order_id": {
          "description": "Numeric ID of the associated order.",
          "example": 120,
          "type": "integer"
        },
        "product_id": {
          "description": "Numeric ID of the product.",
          "example": 20,
          "type": "integer"
        },
        "order_address_id": {
          "description": "Numeric ID of the associated order address.",
          "example": 20,
          "type": "integer"
        },
        "name": {
          "description": "Alias for name_customer - The product name that is shown to customer in storefront.",
          "example": "Fog Linen Chambray Towel - Beige Stripe",
          "type": "string",
          "minLength": 1
        },
        "sku": {
          "description": "User-defined product code/stock keeping unit (SKU).",
          "example": "S-GREE",
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "physical",
            "digital"
          ],
          "example": "physical",
          "description": "Type of product."
        },
        "base_price": {
          "description": "The product's base price. (Float, Float-As-String, Integer).",
          "example": "54.0000",
          "type": "string"
        },
        "price_ex_tax": {
          "description": "The product's price excluding tax. (Float, Float-As-String, Integer).",
          "example": "54.0000",
          "type": "string"
        },
        "price_inc_tax": {
          "description": "The product's price including tax. (Float, Float-As-String, Integer).",
          "example": "54.0000",
          "type": "string"
        },
        "price_tax": {
          "description": "Amount of tax applied to a single product. Price tax is calculated as: 'price_tax = price_inc_tax - price_ex_tax' (Float, Float-As-String, Integer).",
          "example": "0.0000",
          "type": "string"
        },
        "base_total": {
          "description": "Total base price. (Float, Float-As-String, Integer).",
          "example": "54.0000",
          "type": "string"
        },
        "total_ex_tax": {
          "description": "Total base price excluding tax. (Float, Float-As-String, Integer).",
          "example": "54.0000",
          "type": "string"
        },
        "total_inc_tax": {
          "description": "Total base price including tax. (Float, Float-As-String, Integer).",
          "example": "54.0000",
          "type": "string"
        },
        "total_tax": {
          "description": "Total tax applied to products. For example, if quantity if 2, base price is 5 and tax rate is 10%. price_tax will be $.50 and total_tax will be $1.00. If there is a manual discount applied total_tax is calcuted as the following: '(price_ex_tax - discount)*tax_rate=total_tax' (Float, Float-As-String, Integer).",
          "example": "0.5200",
          "type": "string"
        },
        "quantity": {
          "description": "Quantity of the product ordered.",
          "example": 1,
          "type": "number"
        },
        "base_cost_price": {
          "description": "The product's cost price.  This can be set using the Catalog API. (Float, Float-As-String, Integer) Read Only.",
          "example": "0.0000",
          "type": "string"
        },
        "cost_price_inc_tax": {
          "description": "The product's cost price including tax. (Float, Float-As-String, Integer) The cost of your products to you; this is never shown to customers, but can be used for accounting purposes. Read Only.",
          "example": "0.0000",
          "type": "string"
        },
        "cost_price_ex_tax": {
          "description": "The products cost price excluding tax. (Float, Float-As-String, Integer) The cost of your products to you; this is never shown to customers, but can be used for accounting purposes. Read Only.",
          "example": "0.0000",
          "type": "string"
        },
        "weight": {
          "description": "Weight of the product. (Float, Float-As-String, Integer).",
          "example": 1,
          "type": "string"
        },
        "cost_price_tax": {
          "description": "Tax applied to the product's cost price. (Float, Float-As-String, Integer)\nThe cost of your products to you; this is never shown to customers, but can be used for accounting purposes. Read Only.",
          "example": "54.0000",
          "type": "string"
        },
        "is_refunded": {
          "description": "Whether the product has been refunded.",
          "example": false,
          "type": "boolean"
        },
        "refunded_amount": {
          "description": "The amount refunded from this transaction. (Float, Float-As-String, Integer).",
          "example": "0.0000",
          "type": "string"
        },
        "return_id": {
          "description": "Numeric ID for the refund.",
          "example": 0,
          "type": "number"
        },
        "wrapping_name": {
          "description": "Name of gift-wrapping option.",
          "example": "null",
          "type": "string"
        },
        "base_wrapping_cost": {
          "description": "The value of the base wrapping cost. (Float, Float-As-String, Integer).",
          "example": "0.0000",
          "type": "string"
        },
        "wrapping_cost_ex_tax": {
          "description": "The value of the wrapping cost, excluding tax. (Float, Float-As-String, Integer).",
          "example": "0.0000",
          "type": "string"
        },
        "wrapping_cost_inc_tax": {
          "description": "The value of the wrapping cost, including tax. (Float, Float-As-String, Integer).",
          "example": "0.0000",
          "type": "string"
        },
        "wrapping_cost_tax": {
          "description": "Tax applied to gift-wrapping option. (Float, Float-As-String, Integer).",
          "example": "0.0000",
          "type": "string"
        },
        "wrapping_message": {
          "description": "Message to accompany gift-wrapping option.",
          "type": "string"
        },
        "quantity_shipped": {
          "description": "Quantity of this item shipped.",
          "example": 0,
          "type": "number"
        },
        "event_name": {
          "description": "Name of promotional event/delivery date.",
          "example": "null",
          "type": "string"
        },
        "event_date": {
          "description": "Date of the promotional event/scheduled delivery.",
          "type": "string",
          "format": "date"
        },
        "fixed_shipping_cost": {
          "description": "Fixed shipping cost for this product. (Float, Float-As-String, Integer).",
          "example": "0.0000",
          "type": "string"
        },
        "ebay_item_id": {
          "description": "Item ID for this product on eBay.",
          "type": "string"
        },
        "ebay_transaction_id": {
          "description": "Transaction ID for this product on eBay.",
          "type": "string"
        },
        "option_set_id": {
          "description": "Numeric ID of the option set applied to the product.",
          "example": 5,
          "type": "integer"
        },
        "parent_order_product_id": {
          "description": "ID of a parent product.",
          "type": "integer"
        },
        "is_bundled_product": {
          "description": "Whether this product is bundled with other products.",
          "example": false,
          "type": "boolean"
        },
        "bin_picking_number": {
          "description": "Bin picking number for the physical product.",
          "type": "string"
        },
        "applied_discounts": {
          "description": "Array of objects containing discounts applied to the product.",
          "type": "array",
          "items": {
            "title": "orderProductAppliedDiscounts",
            "type": "object",
            "description": "When applying a manual discount to an order (not a product level discount), the discount is distributed across products in proportion to the products price. '(total_manual_discount*price_ex_tax)/subtotal_ex_tax'.",
            "properties": {
              "id": {
                "description": "Name of the coupon applied to order.",
                "example": "total-coupon",
                "type": "string"
              },
              "amount": {
                "description": "Amount of the discount.(Float, Float-As-String, Integer).",
                "example": "1.2100",
                "type": "string"
              },
              "name": {
                "description": "Name of the coupon.\n`Manual Discount` when creating a manual discount.",
                "example": "$5 off",
                "type": "string"
              },
              "code": {
                "description": "Coupon Code.\nThere is no code when creating a manual discount.",
                "example": "S2549JM0Y",
                "type": "string"
              },
              "target": {
                "type": "string",
                "enum": [
                  "order",
                  "product"
                ],
                "description": "Determines if the discount if discount was applied at the Order or Product level. Read Only."
              }
            }
          }
        },
        "product_options": {
          "description": "Array of product option objects.",
          "type": "array",
          "items": {
            "title": "orderProductOptions",
            "type": "object",
            "properties": {
              "id": {
                "description": "The unique numerical ID of the option; increments sequentially.",
                "example": 16,
                "type": "integer"
              },
              "option_id": {
                "description": "Numeric ID of the associated option.",
                "example": 18,
                "type": "integer"
              },
              "order_product_id": {
                "description": "Order product Id.",
                "example": 53,
                "type": "integer"
              },
              "product_option_id": {
                "description": "Product option Id.",
                "example": 120,
                "type": "integer"
              },
              "display_name": {
                "description": "Alias for display_name_customer. The product option name that is shown to customer in the storefront.",
                "example": "Size",
                "type": "string"
              },
              "display_value": {
                "description": "Alias for display_value_customer. The product option value that is shown to customer in storefront.",
                "example": "S",
                "type": "string"
              },
              "value": {
                "description": "This value is used to access the Customer File Upload.",
                "example": "70",
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "Checkbox",
                  "Date field",
                  "File Upload",
                  "Multi-line text field",
                  "Multiple choice",
                  "Product Pick List",
                  "Swatch",
                  "Text field"
                ],
                "example": "Checkbox",
                "description": "Option Type."
              },
              "name": {
                "description": "The option's name, as used internally. Must be unique.",
                "example": "Apparel sizes",
                "type": "string"
              },
              "display_style": {
                "description": "How it is displayed on the storefront. Examples include Drop-down, radio buttons, or rectangles.",
                "example": "Rectangle",
                "type": "string"
              },
              "display_name_customer": {
                "type": "string",
                "example": "couleur",
                "description": "The product option name that is shown to customer in storefront."
              },
              "display_name_merchant": {
                "type": "string",
                "example": "color",
                "description": "The product option name that is shown to merchant in Control Panel."
              },
              "display_value_customer": {
                "type": "string",
                "example": "bleu",
                "description": "The product option value that is shown to customer in storefront."
              },
              "display_value_merchant": {
                "type": "string",
                "example": "blue",
                "description": "The product option value that is shown to merchant in Control Panel."
              }
            }
          }
        },
        "external_id": {
          "description": "ID of the order in another system. For example, the Amazon Order ID if this is an Amazon order.This field can be updated in a /POST, but using a /PUT to update the order will return a 400 error. The field 'external_id' cannot be written to. Please remove it from your request before trying again. It can not be overwritten once set.",
          "type": "string"
        },
        "upc": {
          "type": "string",
          "maxLength": 255,
          "description": "Universal Product Code. Can be written to for custom products and catalog products."
        },
        "variant_id": {
          "type": "integer",
          "description": "Products `variant_id`. PUT or POST. This field is not available for custom products."
        },
        "name_customer": {
          "type": "string",
          "example": "Fog Linen Chambray Towel - Beige Stripe",
          "description": "The product name that is shown to customer in storefront."
        },
        "name_merchant": {
          "type": "string",
          "example": "Towel Type 1",
          "description": "The product name that is shown to merchant in Control Panel."
        }
      }
    },
    "orderProductsCollection_Resp": {
      "title": "orderProducts",
      "description": "Order products returned in responses.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/orderProduct_Resp"
      }
    },
    "orderShippingAddress_Resp": {
      "title": "orderShippingAddress_Resp",
      "description": "Order shipping address returned in response.",
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "example": 1,
          "description": "ID of this shipping address."
        },
        "order_id": {
          "type": "integer",
          "description": "ID of the order.",
          "example": 100
        },
        "items_total": {
          "type": "number",
          "example": 1,
          "description": "The total number of items in the order."
        },
        "items_shipped": {
          "type": "number",
          "description": "The number of items that have been shipped.",
          "example": 0
        },
        "base_cost": {
          "type": "string",
          "description": "The base value of the order's items. (Float, Float-As-String, Integer).",
          "example": "5.0000"
        },
        "cost_ex_tax": {
          "type": "string",
          "example": "0.0000",
          "description": "The value of the order's items, excluding tax. (Float, Float-As-String, Integer)."
        },
        "cost_inc_tax": {
          "type": "string",
          "description": "The value of the order's items, including tax. (Float, Float-As-String, Integer).",
          "example": "0.0000"
        },
        "cost_tax": {
          "type": "string",
          "description": "The tax amount on the order. (Float, Float-As-String, Integer).",
          "example": "0.0000"
        },
        "cost_tax_class_id": {
          "type": "integer",
          "description": "The ID of the tax class applied to the product. (NOTE: Value ignored if automatic tax is enabled).",
          "example": 2
        },
        "handling_cost_ex_tax": {
          "type": "string",
          "description": "The handling charge, excluding tax. (Float, Float-As-String, Integer).",
          "example": "0.0000"
        },
        "handling_cost_inc_tax": {
          "type": "string",
          "description": "The handling charge, including tax. (Float, Float-As-String, Integer).",
          "example": "0.0000"
        },
        "handling_cost_tax": {
          "type": "string",
          "example": "0.0000"
        },
        "handling_cost_tax_class_id": {
          "type": "integer",
          "description": "A read-only value. Do not attempt to set or modify this value in a POST or PUT operation. (NOTE: Value ignored if automatic tax is enabled on the store).",
          "example": 2
        },
        "shipping_zone_id": {
          "type": "number",
          "description": "Numeric ID of the shipping zone.",
          "example": 1
        },
        "shipping_zone_name": {
          "type": "string",
          "description": "Name of the shipping zone.",
          "example": "United States"
        },
        "form_fields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/formFields"
          }
        },
        "shipping_quotes": {
          "$ref": "#/definitions/shippingQuotes_Resource"
        },
        "shipping_addresses": {
          "$ref": "#/definitions/shippingAddress_Base"
        }
      }
    },
    "orderShippingAddressCollection_Resp": {
      "title": "orderShippingAddressCollection",
      "description": "Order shipping addresses returned in response.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/orderShippingAddress_Resp"
      }
    },
    "pagination_Full": {
      "title": "pagination_Full",
      "description": "Data about the response, including pagination and collection totals.",
      "type": "object",
      "properties": {
        "total": {
          "description": "Total number of items in the result set.",
          "example": 36,
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "description": "Total number of items in the collection response.",
          "example": 36,
          "type": "integer",
          "format": "int32"
        },
        "per_page": {
          "description": "The amount of items returned in the collection per page, controlled by the limit parameter.",
          "example": 50,
          "type": "integer",
          "format": "int32"
        },
        "current_page": {
          "description": "The page you are currently on within the collection.",
          "example": 1,
          "type": "integer",
          "format": "int32"
        },
        "total_pages": {
          "description": "The total number of pages in the collection.",
          "example": 1,
          "type": "integer",
          "format": "int32"
        },
        "links": {
          "$ref": "#/definitions/Links"
        }
      }
    },
    "product_Base": {
      "title": "product_Base",
      "type": "object",
      "properties": {
        "name": {
          "description": "The product name.",
          "example": "Smith Journal 13",
          "type": "string",
          "minLength": 1,
          "maxLength": 255
        },
        "type": {
          "description": "The product type. One of: `physical` - a physical stock unit, `digital` - a digital download.",
          "example": "physical",
          "type": "string",
          "enum": [
            "physical",
            "digital"
          ]
        },
        "sku": {
          "description": "User defined product code/stock keeping unit (SKU).",
          "example": "SM-13",
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "description": {
          "description": "The product description, which can include HTML formatting.",
          "example": "<p><span>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi vel metus ac est egestas porta sed quis erat. Integer id nulla massa. Proin vitae enim nisi. Praesent non dignissim nulla. Nulla mattis id massa ac pharetra. Mauris et nisi in dolor aliquam sodales. Aliquam dui nisl, dictum quis leo sit amet, rutrum volutpat metus. Curabitur libero nunc, interdum ac libero non, tristique porttitor metus. Ut non dignissim lorem, in vestibulum leo. Vivamus sodales quis turpis eget.</span></p>",
          "type": "string"
        },
        "weight": {
          "description": "Weight of the product, which can be used when calculating shipping costs. This is based on the unit set on the store",
          "type": "number",
          "minimum": 0,
          "maximum": 9999999999,
          "format": "double"
        },
        "width": {
          "description": "Width of the product, which can be used when calculating shipping costs.",
          "type": "number",
          "minimum": 0,
          "maximum": 9999999999,
          "format": "double"
        },
        "depth": {
          "description": "Depth of the product, which can be used when calculating shipping costs.",
          "type": "number",
          "minimum": 0,
          "maximum": 9999999999,
          "format": "double"
        },
        "height": {
          "description": "Height of the product, which can be used when calculating shipping costs.",
          "type": "number",
          "minimum": 0,
          "maximum": 9999999999,
          "format": "double"
        },
        "price": {
          "description": "The price of the product. The price should include or exclude tax, based on the store settings.",
          "type": "number",
          "minimum": 0,
          "format": "double"
        },
        "cost_price": {
          "description": "The cost price of the product. Stored for reference only; it is not used or displayed anywhere on the store.",
          "type": "number",
          "minimum": 0,
          "format": "double"
        },
        "retail_price": {
          "description": "The retail cost of the product. If entered, the retail cost price will be shown on the product page.",
          "type": "number",
          "minimum": 0,
          "format": "double"
        },
        "sale_price": {
          "description": "If entered, the sale price will be used instead of value in the price field when calculating the product's cost.",
          "type": "number",
          "minimum": 0,
          "format": "double"
        },
        "map_price": {
          "description": "Minimum Advertised Price",
          "type": "number",
          "format": "double"
        },
        "tax_class_id": {
          "description": "The ID of the tax class applied to the product. (NOTE: Value ignored if automatic tax is enabled.)",
          "type": "integer",
          "minimum": 0,
          "maximum": 1000000000,
          "format": "int32"
        },
        "product_tax_code": {
          "description": "Accepts AvaTax System Tax Codes, which identify products and services that fall into special sales-tax categories. By using these codes, merchants who subscribe to BigCommerce's Avalara Premium integration can calculate sales taxes more accurately. Stores without Avalara Premium will ignore the code when calculating sales tax. Do not pass more than one code. The codes are case-sensitive. For details, please see Avalara's documentation.",
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "categories": {
          "description": "An array of IDs for the categories to which this product belongs. When updating a product, if an array of categories is supplied, all product categories will be overwritten. Does not accept more than 1,000 ID values.",
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "brand_id": {
          "description": "A product can be added to an existing brand during a product /PUT or /POST.",
          "type": "integer",
          "minimum": 0,
          "maximum": 1000000000,
          "format": "int32"
        },
        "inventory_level": {
          "description": "Current inventory level of the product. Simple inventory tracking must be enabled (See the `inventory_tracking` field) for this to take any effect.",
          "type": "integer",
          "minimum": 0,
          "maximum": 1000000000,
          "format": "int32"
        },
        "inventory_warning_level": {
          "description": "Inventory warning level for the product. When the product's inventory level drops below the warning level, the store owner will be informed. Simple inventory tracking must be enabled (see the `inventory_tracking` field) for this to take any effect.",
          "type": "integer",
          "minimum": 0,
          "maximum": 1000000000,
          "format": "int32"
        },
        "inventory_tracking": {
          "description": "The type of inventory tracking for the product. Values are: `none` - inventory levels will not be tracked; `product` - inventory levels will be tracked using the `inventory_level` and `inventory_warning_level` fields; `variant` - inventory levels will be tracked based on variants, which maintain their own warning levels and inventory levels.",
          "type": "string",
          "enum": [
            "none",
            "product",
            "variant"
          ]
        },
        "fixed_cost_shipping_price": {
          "description": "A fixed shipping cost for the product. If defined, this value will be used during checkout instead of normal shipping-cost calculation.",
          "type": "number",
          "minimum": 0,
          "format": "double"
        },
        "is_free_shipping": {
          "description": "Flag used to indicate whether the product has free shipping. If `true`, the shipping cost for the product will be zero.",
          "type": "boolean"
        },
        "is_visible": {
          "description": "Flag to determine whether the product should be displayed to customers browsing the store. If `true`, the product will be displayed. If `false`, the product will be hidden from view.",
          "type": "boolean"
        },
        "is_featured": {
          "description": "Flag to determine whether the product should be included in the `featured products` panel when viewing the store.",
          "type": "boolean"
        },
        "related_products": {
          "description": "An array of IDs for the related products.",
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "warranty": {
          "description": "Warranty information displayed on the product page. Can include HTML formatting.",
          "type": "string",
          "minLength": 0,
          "maxLength": 65535
        },
        "bin_picking_number": {
          "description": "The BIN picking number for the product.",
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "layout_file": {
          "description": "The layout template file used to render this product category. This field is writable only for stores with a Blueprint theme applied.",
          "type": "string",
          "minLength": 0,
          "maxLength": 500
        },
        "upc": {
          "description": "The product UPC code, which is used in feeds for shopping comparison sites and external channel integrations.",
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "search_keywords": {
          "description": "A comma-separated list of keywords that can be used to locate the product when searching the store.",
          "type": "string",
          "minLength": 0,
          "maxLength": 65535
        },
        "availability": {
          "description": "Availability of the product. Availability options are: `available` - the product can be purchased on the storefront; `disabled` - the product is listed in the storefront, but cannot be purchased; `preorder` - the product is listed for pre-orders.",
          "type": "string",
          "enum": [
            "available",
            "disabled",
            "preorder"
          ]
        },
        "availability_description": {
          "description": "Availability text displayed on the checkout page, under the product title. Tells the customer how long it will normally take to ship this product, such as: 'Usually ships in 24 hours.'",
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "gift_wrapping_options_type": {
          "description": "Type of gift-wrapping options. Values: `any` - allow any gift-wrapping options in the store; `none` - disallow gift-wrapping on the product; `list` – provide a list of IDs in the `gift_wrapping_options_list` field.",
          "type": "string",
          "enum": [
            "any",
            "none",
            "list"
          ]
        },
        "gift_wrapping_options_list": {
          "description": "A list of gift-wrapping option IDs.",
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "sort_order": {
          "description": "Priority to give this product when included in product lists on category pages and in search results. Lower integers will place the product closer to the top of the results.",
          "type": "integer",
          "minimum": -2147483648,
          "maximum": 2147483647,
          "format": "int32"
        },
        "condition": {
          "description": "The product condition. Will be shown on the product page if the `is_condition_shown` field's value is `true`. Possible values: `New`, `Used`, `Refurbished`.",
          "type": "string",
          "enum": [
            "New",
            "Used",
            "Refurbished"
          ]
        },
        "is_condition_shown": {
          "description": "Flag used to determine whether the product condition is shown to the customer on the product page.",
          "type": "boolean"
        },
        "order_quantity_minimum": {
          "description": "The minimum quantity an order must contain, to be eligible to purchase this product.",
          "type": "integer",
          "minimum": 0,
          "maximum": 1000000000,
          "format": "int32"
        },
        "order_quantity_maximum": {
          "description": "The maximum quantity an order can contain when purchasing the product.",
          "type": "integer",
          "minimum": 0,
          "maximum": 1000000000,
          "format": "int32"
        },
        "page_title": {
          "description": "Custom title for the product page. If not defined, the product name will be used as the meta title.",
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "meta_keywords": {
          "description": "Custom meta keywords for the product page. If not defined, the store's default keywords will be used.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "meta_description": {
          "description": "Custom meta description for the product page. If not defined, the store's default meta description will be used.",
          "type": "string",
          "minLength": 0,
          "maxLength": 65535
        },
        "view_count": {
          "description": "The number of times the product has been viewed.",
          "type": "integer",
          "minimum": 0,
          "maximum": 1000000000,
          "format": "int32"
        },
        "preorder_release_date": {
          "description": "Pre-order release date. See the `availability` field for details on setting a product's availability to accept pre-orders.",
          "type": "string",
          "format": "date-time"
        },
        "preorder_message": {
          "description": "Custom expected-date message to display on the product page. If undefined, the message defaults to the storewide setting. Can contain the `%%DATE%%` placeholder, which will be substituted for the release date.",
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "is_preorder_only": {
          "description": "If set to true then on the preorder release date the preorder status will automatically be removed.\nIf set to false, then on the release date the preorder status **will not** be removed. It will need to be changed manually either in the\ncontrol panel or using the API. Using the API set `availability` to `available`.",
          "type": "boolean"
        },
        "is_price_hidden": {
          "description": "False by default, indicating that this product's price should be shown on the product page. If set to `true`, the price is hidden. (NOTE: To successfully set `is_price_hidden` to `true`, the `availability` value must be `disabled`.)",
          "type": "boolean"
        },
        "price_hidden_label": {
          "description": "By default, an empty string. If `is_price_hidden` is `true`, the value of `price_hidden_label` is displayed instead of the price. (NOTE: To successfully set a non-empty string value with `is_price_hidden` set to `true`, the `availability` value must be `disabled`.)",
          "type": "string",
          "minLength": 0,
          "maxLength": 200
        },
        "custom_url": {
          "$ref": "#/definitions/customUrl_Full"
        },
        "open_graph_type": {
          "description": "Type of product, defaults to `product`.",
          "type": "string",
          "enum": [
            "product",
            "album",
            "book",
            "drink",
            "food",
            "game",
            "movie",
            "song",
            "tv_show"
          ]
        },
        "open_graph_title": {
          "description": "Title of the product, if not specified the product name will be used instead.",
          "type": "string"
        },
        "open_graph_description": {
          "description": "Description to use for the product, if not specified then the meta_description will be used instead.",
          "type": "string"
        },
        "open_graph_use_meta_description": {
          "description": "Flag to determine if product description or open graph description is used.",
          "type": "boolean"
        },
        "open_graph_use_product_name": {
          "description": "Flag to determine if product name or open graph name is used.",
          "type": "boolean"
        },
        "open_graph_use_image": {
          "description": "Flag to determine if product image or open graph image is used.",
          "type": "boolean"
        },
        "brand_name or brand_id": {
          "description": "The brand can be created during a product PUT or POST request. If the brand already exists then the product will be added. If not the brand will be created and the product added. If using `brand_name` it performs a fuzzy match and adds the brand. eg. \"Common Good\" and \"Common good\" are the same. Brand name does not return as part of a product response. Only the `brand_id`.",
          "example": "Common Good",
          "type": "string"
        },
        "gtin": {
          "description": "Global Trade Item Number",
          "type": "string"
        },
        "mpn": {
          "description": "Manufacturer Part Number",
          "type": "string"
        },
        "reviews_rating_sum": {
          "description": "The total rating for the product.",
          "type": "integer",
          "format": "int32"
        },
        "reviews_count": {
          "description": "The number of times the product has been rated.",
          "example": 4,
          "type": "integer",
          "format": "int32"
        },
        "total_sold": {
          "description": "The total quantity of this product sold.",
          "example": 80,
          "type": "integer",
          "format": "int32"
        },
        "custom_fields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/productCustomField_Put"
          }
        },
        "bulk_pricing_rules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/bulkPricingRule_Full"
          }
        },
        "images": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/productImage_Full"
          }
        },
        "videos": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/productVideo_Full"
          }
        }
      },
      "required": [
        "name",
        "type",
        "weight",
        "price"
      ]
    },
    "product_Full": {
      "title": "product_Full",
      "type": "object",
      "properties": {
        "schema": {
          "$ref": "#/definitions/product_Base"
        },
        "date_created": {
          "description": "The date on which the product was created.",
          "example": "2018-08-15T14:49:05+00:00",
          "type": "string",
          "format": "date-time"
        },
        "date_modified": {
          "description": "The date on which the product was modified.",
          "example": "2018-08-24T14:41:00+00:00",
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "description": "ID of the product. Read Only.",
          "type": "integer",
          "minimum": 1,
          "format": "int32"
        },
        "base_variant_id": {
          "description": "The unique identifier of the base variant associated with a simple product. This value is `null` for complex products.",
          "type": "integer",
          "format": "int32"
        },
        "calculated_price": {
          "description": "The price of the product as seen on the storefront. It will be equal to the `sale_price`, if set, and the `price` if there is not a `sale_price`.",
          "type": "number",
          "format": "double"
        },
        "options": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/productOption_Base"
          }
        },
        "modifiers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/productModifier_Full"
          }
        },
        "option_set_id": {
          "description": "Indicates that the product is in an Option Set (legacy V2 concept).",
          "type": "integer",
          "format": "int32"
        },
        "option_set_display": {
          "description": "Legacy template setting which controls if the option set shows up to the side of or below the product image and description.",
          "type": "string"
        },
        "variants": {
          "$ref": "#/definitions/productVariant_Full"
        }
      }
    },
    "product_Put": {
      "title": "product_Put",
      "description": "The model for a PUT to update a product.",
      "type": "object",
      "properties": {
        "id": {
          "description": "The unique numerical ID of the product; increments sequentially.",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "description": "The product name.",
          "example": "Smith Journal 13",
          "type": "string",
          "minLength": 1,
          "maxLength": 255
        },
        "type": {
          "$ref": "#/definitions/Type7"
        },
        "sku": {
          "description": "User defined product code/stock keeping unit (SKU).",
          "example": "SM-13",
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "description": {
          "description": "The product description, which can include HTML formatting.",
          "example": "<p><span>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi vel metus ac est egestas porta sed quis erat. Integer id nulla massa. Proin vitae enim nisi. Praesent non dignissim nulla. Nulla mattis id massa ac pharetra. Mauris et nisi in dolor aliquam sodales. Aliquam dui nisl, dictum quis leo sit amet, rutrum volutpat metus. Curabitur libero nunc, interdum ac libero non, tristique porttitor metus. Ut non dignissim lorem, in vestibulum leo. Vivamus sodales quis turpis eget.</span></p>",
          "type": "string"
        },
        "weight": {
          "description": "Weight of the product, which can be used when calculating shipping costs. This is based on the unit set on the store",
          "type": "number",
          "minimum": 0,
          "maximum": 9999999999,
          "format": "double"
        },
        "width": {
          "description": "Width of the product, which can be used when calculating shipping costs.",
          "type": "number",
          "minimum": 0,
          "maximum": 9999999999,
          "format": "double"
        },
        "depth": {
          "description": "Depth of the product, which can be used when calculating shipping costs.",
          "type": "number",
          "minimum": 0,
          "maximum": 9999999999,
          "format": "double"
        },
        "height": {
          "description": "Height of the product, which can be used when calculating shipping costs.",
          "type": "number",
          "minimum": 0,
          "maximum": 9999999999,
          "format": "double"
        },
        "price": {
          "description": "The price of the product. The price should include or exclude tax, based on the store settings.",
          "type": "number",
          "minimum": 0,
          "format": "double"
        },
        "cost_price": {
          "description": "The cost price of the product. Stored for reference only; it is not used or displayed anywhere on the store.",
          "type": "number",
          "minimum": 0,
          "format": "double"
        },
        "retail_price": {
          "description": "The retail cost of the product. If entered, the retail cost price will be shown on the product page.",
          "type": "number",
          "minimum": 0,
          "format": "double"
        },
        "sale_price": {
          "description": "If entered, the sale price will be used instead of value in the price field when calculating the product's cost.",
          "type": "number",
          "minimum": 0,
          "format": "double"
        },
        "map_price": {
          "description": "Minimum Advertised Price",
          "type": "number",
          "format": "double"
        },
        "tax_class_id": {
          "description": "The ID of the tax class applied to the product. (NOTE: Value ignored if automatic tax is enabled.)",
          "type": "integer",
          "minimum": 0,
          "maximum": 1000000000,
          "format": "int32"
        },
        "product_tax_code": {
          "description": "Accepts AvaTax System Tax Codes, which identify products and services that fall into special sales-tax categories. By using these codes, merchants who subscribe to BigCommerce's Avalara Premium integration can calculate sales taxes more accurately. Stores without Avalara Premium will ignore the code when calculating sales tax. Do not pass more than one code. The codes are case-sensitive. For details, please see Avalara's documentation.",
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "categories": {
          "description": "An array of IDs for the categories to which this product belongs. When updating a product, if an array of categories is supplied, all product categories will be overwritten. Does not accept more than 1,000 ID values.",
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "brand_id": {
          "description": "A product can be added to an existing brand during a product /PUT or /POST.",
          "type": "integer",
          "minimum": 0,
          "maximum": 1000000000,
          "format": "int32"
        },
        "inventory_level": {
          "description": "Current inventory level of the product. Simple inventory tracking must be enabled (See the `inventory_tracking` field) for this to take any effect.",
          "type": "integer",
          "minimum": 0,
          "maximum": 1000000000,
          "format": "int32"
        },
        "inventory_warning_level": {
          "description": "Inventory warning level for the product. When the product's inventory level drops below the warning level, the store owner will be informed. Simple inventory tracking must be enabled (see the `inventory_tracking` field) for this to take any effect.",
          "type": "integer",
          "minimum": 0,
          "maximum": 1000000000,
          "format": "int32"
        },
        "inventory_tracking": {
          "$ref": "#/definitions/InventoryTracking"
        },
        "fixed_cost_shipping_price": {
          "description": "A fixed shipping cost for the product. If defined, this value will be used during checkout instead of normal shipping-cost calculation.",
          "type": "number",
          "minimum": 0,
          "format": "double"
        },
        "is_free_shipping": {
          "description": "Flag used to indicate whether the product has free shipping. If `true`, the shipping cost for the product will be zero.",
          "type": "boolean"
        },
        "is_visible": {
          "description": "Flag to determine whether the product should be displayed to customers browsing the store. If `true`, the product will be displayed. If `false`, the product will be hidden from view.",
          "type": "boolean"
        },
        "is_featured": {
          "description": "Flag to determine whether the product should be included in the `featured products` panel when viewing the store.",
          "type": "boolean"
        },
        "related_products": {
          "description": "An array of IDs for the related products.",
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "warranty": {
          "description": "Warranty information displayed on the product page. Can include HTML formatting.",
          "type": "string",
          "minLength": 0,
          "maxLength": 65535
        },
        "bin_picking_number": {
          "description": "The BIN picking number for the product.",
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "layout_file": {
          "description": "The layout template file used to render this product category. This field is writable only for stores with a Blueprint theme applied.",
          "type": "string",
          "minLength": 0,
          "maxLength": 500
        },
        "upc": {
          "description": "The product UPC code, which is used in feeds for shopping comparison sites and external channel integrations.",
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "search_keywords": {
          "description": "A comma-separated list of keywords that can be used to locate the product when searching the store.",
          "type": "string",
          "minLength": 0,
          "maxLength": 65535
        },
        "availability": {
          "$ref": "#/definitions/Availability"
        },
        "availability_description": {
          "description": "Availability text displayed on the checkout page, under the product title. Tells the customer how long it will normally take to ship this product, such as: 'Usually ships in 24 hours.'",
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "gift_wrapping_options_type": {
          "$ref": "#/definitions/GiftWrappingOptionsType"
        },
        "gift_wrapping_options_list": {
          "description": "A list of gift-wrapping option IDs.",
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "sort_order": {
          "description": "Priority to give this product when included in product lists on category pages and in search results. Lower integers will place the product closer to the top of the results.",
          "type": "integer",
          "minimum": -2147483648,
          "maximum": 2147483647,
          "format": "int32"
        },
        "condition": {
          "$ref": "#/definitions/Condition"
        },
        "is_condition_shown": {
          "description": "Flag used to determine whether the product condition is shown to the customer on the product page.",
          "type": "boolean"
        },
        "order_quantity_minimum": {
          "description": "The minimum quantity an order must contain, to be eligible to purchase this product.",
          "type": "integer",
          "minimum": 0,
          "maximum": 1000000000,
          "format": "int32"
        },
        "order_quantity_maximum": {
          "description": "The maximum quantity an order can contain when purchasing the product.",
          "type": "integer",
          "minimum": 0,
          "maximum": 1000000000,
          "format": "int32"
        },
        "page_title": {
          "description": "Custom title for the product page. If not defined, the product name will be used as the meta title.",
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "meta_keywords": {
          "description": "Custom meta keywords for the product page. If not defined, the store's default keywords will be used.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "meta_description": {
          "description": "Custom meta description for the product page. If not defined, the store's default meta description will be used.",
          "type": "string",
          "minLength": 0,
          "maxLength": 65535
        },
        "view_count": {
          "description": "The number of times the product has been viewed.",
          "type": "integer",
          "minimum": 0,
          "maximum": 1000000000,
          "format": "int32"
        },
        "preorder_release_date": {
          "description": "Pre-order release date. See the `availability` field for details on setting a product's availability to accept pre-orders.",
          "type": "string",
          "format": "date-time"
        },
        "preorder_message": {
          "description": "Custom expected-date message to display on the product page. If undefined, the message defaults to the storewide setting. Can contain the `%%DATE%%` placeholder, which will be substituted for the release date.",
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "is_preorder_only": {
          "description": "If set to true then on the preorder release date the preorder status will automatically be removed.\nIf set to false, then on the release date the preorder status **will not** be removed. It will need to be changed manually either in the\ncontrol panel or using the API. Using the API set `availability` to `available`.",
          "type": "boolean"
        },
        "is_price_hidden": {
          "description": "False by default, indicating that this product's price should be shown on the product page. If set to `true`, the price is hidden. (NOTE: To successfully set `is_price_hidden` to `true`, the `availability` value must be `disabled`.)",
          "type": "boolean"
        },
        "price_hidden_label": {
          "description": "By default, an empty string. If `is_price_hidden` is `true`, the value of `price_hidden_label` is displayed instead of the price. (NOTE: To successfully set a non-empty string value with `is_price_hidden` set to `true`, the `availability` value must be `disabled`.)",
          "type": "string",
          "minLength": 0,
          "maxLength": 200
        },
        "custom_url": {
          "$ref": "#/definitions/customUrl_Full"
        },
        "open_graph_type": {
          "$ref": "#/definitions/OpenGraphType"
        },
        "open_graph_title": {
          "description": "Title of the product, if not specified the product name will be used instead.",
          "type": "string"
        },
        "open_graph_description": {
          "description": "Description to use for the product, if not specified then the meta_description will be used instead.",
          "type": "string"
        },
        "open_graph_use_meta_description": {
          "description": "Flag to determine if product description or open graph description is used.",
          "type": "boolean"
        },
        "open_graph_use_product_name": {
          "description": "Flag to determine if product name or open graph name is used.",
          "type": "boolean"
        },
        "open_graph_use_image": {
          "description": "Flag to determine if product image or open graph image is used.",
          "type": "boolean"
        },
        "brand_name or brand_id": {
          "description": "The brand can be created during a product PUT or POST request. If the brand already exists then the product will be added. If not the brand will be created and the product added. If using `brand_name` it performs a fuzzy match and adds the brand. eg. \"Common Good\" and \"Common good\" are the same. Brand name does not return as part of a product response. Only the `brand_id`.",
          "example": "Common Good",
          "type": "string"
        },
        "gtin": {
          "description": "Global Trade Item Number",
          "type": "string"
        },
        "mpn": {
          "description": "Manufacturer Part Number",
          "type": "string"
        },
        "reviews_rating_sum": {
          "description": "The total rating for the product.",
          "type": "integer",
          "format": "int32"
        },
        "reviews_count": {
          "description": "The number of times the product has been rated.",
          "example": 4,
          "type": "integer",
          "format": "int32"
        },
        "total_sold": {
          "description": "The total quantity of this product sold.",
          "example": 80,
          "type": "integer",
          "format": "int32"
        },
        "custom_fields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomField"
          }
        },
        "bulk_pricing_rules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/bulkPricingRule_Full"
          }
        },
        "images": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/productImage_Full"
          }
        },
        "videos": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/productVideo_Full"
          }
        },
        "variants": {
          "$ref": "#/definitions/productVariant_Put_Product"
        }
      }
    },
    "ProductCollectionResponse": {
      "title": "ProductCollectionResponse",
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/product_Full"
          }
        },
        "meta": {
          "$ref": "#/definitions/metaCollection_Full"
        }
      }
    },
    "productCustomField_Put": {
      "title": "productCustomField_Put",
      "description": "Gets custom fields associated with a product. These allow you to specify additional information that will appear on the product's page, such as a book's ISBN or a DVD's release date.",
      "type": "object",
      "properties": {
        "id": {
          "description": "The unique numeric ID of the custom field; increments sequentially. Required to update existing custom field in /PUT request.\nRead-Only",
          "example": 6,
          "type": "integer",
          "minimum": 1,
          "format": "int32"
        },
        "name": {
          "description": "The name of the field, shown on the storefront, orders, etc. Required for /POST",
          "example": "ISBN",
          "type": "string",
          "minLength": 1,
          "maxLength": 250
        },
        "value": {
          "description": "The name of the field, shown on the storefront, orders, etc. Required for /POST",
          "example": "1234567890123",
          "type": "string",
          "minLength": 1,
          "maxLength": 250
        }
      },
      "required": [
        "name",
        "value"
      ]
    },
    "productImage_Full": {
      "title": "productImage_Full",
      "description": "Common ProductImage properties.",
      "type": "object",
      "properties": {
        "image_file": {
          "description": "The local path to the original image file uploaded to BigCommerce.",
          "type": "string"
        },
        "is_thumbnail": {
          "description": "Flag for identifying whether the image is used as the product's thumbnail.",
          "type": "boolean"
        },
        "sort_order": {
          "description": "The order in which the image will be displayed on the product page. Higher integers give the image a lower priority. When updating, if the image is given a lower priority, all images with a `sort_order` the same as or greater than the image's new `sort_order` value will have their `sort_order`s reordered.",
          "type": "integer",
          "minimum": -2147483648,
          "maximum": 2147483647,
          "format": "int32"
        },
        "description": {
          "description": "The description for the image.",
          "type": "string"
        },
        "image_url": {
          "description": "Must be a fully qualified URL path, including protocol. Limit of 8MB per file.",
          "type": "string"
        },
        "id": {
          "description": "The unique numeric ID of the image; increments sequentially.",
          "type": "integer",
          "format": "int32"
        },
        "product_id": {
          "description": "The unique numeric identifier for the product with which the image is associated.",
          "type": "integer",
          "format": "int32"
        },
        "url_zoom": {
          "description": "The zoom URL for this image. By default, this is used as the zoom image on product pages when zoom images are enabled.",
          "type": "string"
        },
        "url_standard": {
          "description": "The standard URL for this image. By default, this is used for product-page images.",
          "type": "string"
        },
        "url_thumbnail": {
          "description": "The thumbnail URL for this image. By default, this is the image size used on the category page and in side panels.",
          "type": "string"
        },
        "url_tiny": {
          "description": "The tiny URL for this image. By default, this is the image size used for thumbnails beneath the product image on a product page.",
          "type": "string"
        },
        "date_modified": {
          "description": "The date on which the product image was modified.",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "productModifier_Base": {
      "title": "productModifier_Base",
      "description": "Common Modifier properties.",
      "type": "object",
      "properties": {
        "type": {
          "description": "BigCommerce API, which determines how it will display on the storefront. Acceptable values: `date`, `checkbox`, `file`, `text`, `multi_line_text`, `numbers_only_text`, `radio_buttons`, `rectangles`, `dropdown`, `product_list`, `product_list_with_images`, `swatch`. Required in a /POST.",
          "type": "string",
          "enum": [
            "date",
            "checkbox",
            "file",
            "text",
            "multi_line_text",
            "numbers_only_text",
            "radio_buttons",
            "rectangles",
            "dropdown",
            "product_list",
            "product_list_with_images",
            "swatch"
          ]
        },
        "required": {
          "description": "Whether or not this modifer is required or not at checkout. Required in a /POST.",
          "type": "boolean"
        },
        "sort_order": {
          "description": "The order the modifiers display on the product detail page.",
          "type": "integer",
          "format": "int32"
        },
        "config": {
          "$ref": "#/definitions/config_Full"
        },
        "display_name": {
          "description": "The name of the option shown on the storefront.",
          "type": "string"
        }
      },
      "required": [
        "type",
        "required"
      ]
    },
    "productModifier_Full": {
      "title": "productModifier_Full",
      "description": "Product Modifier",
      "type": "object",
      "properties": {
        "schema": {
          "$ref": "#/definitions/productModifier_Base"
        },
        "id": {
          "description": "The unique numeric ID of the modifier; increments sequentially.",
          "example": 12,
          "type": "integer",
          "format": "int32"
        },
        "product_id": {
          "description": "The unique numeric ID of the product to which the option belongs.",
          "example": 77,
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "description": "The unique option name. Auto-generated from the display name, a timestamp, and the product ID.",
          "example": "Add-a-$5-Donation1535039590-191",
          "type": "string"
        },
        "option_values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/productModifierOptionValue_Full"
          }
        }
      }
    },
    "productModifierOptionValue_Full": {
      "title": "productModifierOptionValue_Full",
      "description": "Product Modifer `option_value`.",
      "type": "object",
      "properties": {
        "is_default": {
          "description": "The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers.",
          "example": false,
          "type": "boolean"
        },
        "label": {
          "description": "The text display identifying the value on the storefront. Required in a /POST.",
          "example": "Green",
          "type": "string"
        },
        "sort_order": {
          "description": "The order in which the value will be displayed on the product page. Required in a /POST.",
          "example": 0,
          "type": "integer",
          "minimum": -2147483648,
          "maximum": 2147483647,
          "format": "int32"
        },
        "value_data": {
          "description": "Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. If no data is available, returns `null`.",
          "type": "object"
        },
        "adjusters": {
          "$ref": "#/definitions/adjusters_Full"
        },
        "id": {
          "description": "The unique numeric ID of the value; increments sequentially.",
          "type": "integer",
          "format": "int32"
        },
        "option_id": {
          "type": "integer",
          "format": "int32"
        }
      },
      "required": [
        "label",
        "sort_order"
      ]
    },
    "productOption_Base": {
      "title": "productOption_Base",
      "description": "Common Option properties.",
      "type": "object",
      "properties": {
        "id": {
          "description": "The unique numerical ID of the option, increments sequentially.",
          "example": 55,
          "type": "integer",
          "format": "int32"
        },
        "product_id": {
          "description": "The unique numerical ID of the product to which the option belongs.",
          "example": 4,
          "type": "integer",
          "format": "int32"
        },
        "display_name": {
          "description": "The name of the option shown on the storefront.",
          "example": "Add-a-$5-Donation1535042499-187",
          "type": "string",
          "minLength": 1,
          "maxLength": 255
        },
        "type": {
          "description": "The type of option, which determines how it will display on the storefront. Acceptable values: `radio_buttons`, `rectangles`, `dropdown`, `product_list`, `product_list_with_images`, `swatch`. For reference, the former v2 API values are: RB = radio_buttons, RT = rectangles, S = dropdown, P = product_list, PI = product_list_with_images, CS = swatch.",
          "type": "string",
          "enum": [
            "radio_buttons",
            "rectangles",
            "dropdown",
            "product_list",
            "product_list_with_images",
            "swatch"
          ]
        },
        "config": {
          "$ref": "#/definitions/productOptionConfig_Full"
        },
        "sort_order": {
          "description": "Order in which the option is displayed on the storefront.",
          "example": 1,
          "type": "integer",
          "format": "int32"
        },
        "option_values": {
          "$ref": "#/definitions/productOptionOptionValue_Full"
        }
      }
    },
    "productOptionConfig_Full": {
      "title": "productOptionConfig_Full",
      "description": "The values for option config can vary based on the Modifier created.",
      "type": "object",
      "properties": {
        "default_value": {
          "description": "(date, text, multi_line_text, numbers_only_text) The default value. Shown on a date option as an ISO-8601–formatted string, or on a text option as a string.",
          "type": "string"
        },
        "checked_by_default": {
          "description": "(checkbox) Flag for setting the checkbox to be checked by default.",
          "type": "boolean"
        },
        "checkbox_label": {
          "description": "(checkbox) Label displayed for the checkbox option.",
          "type": "string"
        },
        "date_limited": {
          "description": "(date) Flag to limit the dates allowed to be entered on a date option.",
          "type": "boolean"
        },
        "date_limit_mode": {
          "description": "(date) The type of limit that is allowed to be entered on a date option.",
          "type": "string",
          "enum": [
            "earliest",
            "range",
            "latest"
          ]
        },
        "date_earliest_value": {
          "description": "(date) The earliest date allowed to be entered on the date option, as an ISO-8601 formatted string.",
          "example": "2018-08-31T05:00:00+00:00",
          "type": "string",
          "format": "date"
        },
        "date_latest_value": {
          "description": "(date) The latest date allowed to be entered on the date option, as an ISO-8601 formatted string.",
          "example": "2019-01-01T05:00:00+00:00",
          "type": "string",
          "format": "date"
        },
        "file_types_mode": {
          "description": "(file) The kind of restriction on the file types that can be uploaded with a file upload option. Values: `specific` - restricts uploads to particular file types; `all` - allows all file types.",
          "type": "string",
          "enum": [
            "specific",
            "all"
          ]
        },
        "file_types_supported": {
          "description": "(file) The type of files allowed to be uploaded if the `file_type_option` is set to `specific`. Values:\n  `images` - Allows upload of image MIME types (`bmp`, `gif`, `jpg`, `jpeg`, `jpe`, `jif`, `jfif`, `jfi`, `png`, `wbmp`, `xbm`, `tiff`). `documents` - Allows upload of document MIME types (`txt`, `pdf`, `rtf`, `doc`, `docx`, `xls`, `xlsx`, `accdb`, `mdb`, `one`, `pps`, `ppsx`, `ppt`, `pptx`, `pub`, `odt`, `ods`, `odp`, `odg`, `odf`).\n  `other` - Allows file types defined in the `file_types_other` array.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "file_types_other": {
          "description": "(file) A list of other file types allowed with the file upload option.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "file_max_size": {
          "description": "(file) The maximum size for a file that can be used with the file upload option. This will still be limited by the server.",
          "example": 5,
          "type": "integer",
          "format": "int32"
        },
        "text_characters_limited": {
          "description": "(text, multi_line_text) Flag to validate the length of a text or multi-line text input.",
          "type": "boolean"
        },
        "text_min_length": {
          "description": "(text, multi_line_text) The minimum length allowed for a text or multi-line text option.",
          "example": 1,
          "type": "integer",
          "format": "int32"
        },
        "text_max_length": {
          "description": "(text, multi_line_text) The maximum length allowed for a text or multi line text option.",
          "example": 55,
          "type": "integer",
          "format": "int32"
        },
        "text_lines_limited": {
          "description": "(multi_line_text) Flag to validate the maximum number of lines allowed on a multi-line text input.",
          "example": true,
          "type": "boolean"
        },
        "text_max_lines": {
          "description": "(multi_line_text) The maximum number of lines allowed on a multi-line text input.",
          "example": 4,
          "type": "integer",
          "format": "int32"
        },
        "number_limited": {
          "description": "(numbers_only_text) Flag to limit the value of a number option.",
          "example": true,
          "type": "boolean"
        },
        "number_limit_mode": {
          "description": "(numbers_only_text) The type of limit on values entered for a number option.",
          "type": "string",
          "enum": [
            "lowest",
            "highest",
            "range"
          ]
        },
        "number_lowest_value": {
          "description": "(numbers_only_text) The lowest allowed value for a number option if `number_limited` is true.",
          "example": 100,
          "type": "number",
          "format": "double"
        },
        "number_highest_value": {
          "description": "(numbers_only_text) The highest allowed value for a number option if `number_limited` is true.",
          "type": "number",
          "format": "double"
        },
        "number_integers_only": {
          "description": "(numbers_only_text) Flag to limit the input on a number option to whole numbers only.",
          "example": false,
          "type": "boolean"
        },
        "product_list_adjusts_inventory": {
          "description": "(product_list, product_list_with_images) Flag for automatically adjusting inventory on a product included in the list.",
          "type": "boolean"
        },
        "product_list_adjusts_pricing": {
          "description": "(product_list, product_list_with_images) Flag to add the optional product's price to the main product's price.",
          "type": "boolean"
        },
        "product_list_shipping_calc": {
          "description": "(product_list, product_list_with_images) How to factor the optional product's weight and package dimensions into the shipping quote. Values: `none` - don't adjust; `weight` - use shipping weight only; `package` - use weight and dimensions.",
          "type": "string",
          "enum": [
            "none",
            "weight",
            "package"
          ]
        }
      }
    },
    "productOptionOptionValue_Full": {
      "title": "productOptionOptionValue_Full",
      "description": "Product Option `option_value`.",
      "type": "object",
      "properties": {
        "is_default": {
          "description": "The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers.",
          "example": false,
          "type": "boolean"
        },
        "label": {
          "description": "The text display identifying the value on the storefront. Required in a /POST.",
          "example": "Green",
          "type": "string"
        },
        "sort_order": {
          "description": "The order in which the value will be displayed on the product page. Required in a /POST.",
          "example": 0,
          "type": "integer",
          "minimum": -2147483648,
          "maximum": 2147483647,
          "format": "int32"
        },
        "value_data": {
          "description": "Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. If no data is available, returns `null`.",
          "type": "object"
        },
        "id": {
          "description": "The unique numeric ID of the value; increments sequentially.",
          "type": "integer",
          "format": "int32"
        }
      },
      "required": [
        "label",
        "sort_order"
      ]
    },
    "ProductResponse": {
      "title": "ProductResponse",
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/product_Full"
        },
        "meta": {
          "description": "Empty meta object; may be used later.",
          "type": "object"
        }
      }
    },
    "products_Resource": {
      "title": "products_Resource",
      "type": "object",
      "properties": {
        "url": {
          "example": "https://api.bigcommerce.com/stores/{$$.env.store_hash}/v2/orders/129/products",
          "type": "string"
        },
        "resource": {
          "example": "/orders/129/products",
          "type": "string"
        }
      }
    },
    "productVariant_Full": {
      "title": "productVariant_Full",
      "type": "object",
      "properties": {
        "cost_price": {
          "description": "The cost price of the variant. Not affected by Price List prices.",
          "type": "number",
          "minimum": 0,
          "format": "double"
        },
        "price": {
          "description": "This variant's base price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is `null`, the product's default price (set in the Product resource's `price` field) will be used as the base price.",
          "type": "number",
          "minimum": 0,
          "format": "double"
        },
        "sale_price": {
          "description": "This variant's sale price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product's sale price (set in the Product resource's `price` field) will be used as the sale price.",
          "type": "number",
          "minimum": 0,
          "format": "double"
        },
        "retail_price": {
          "description": "This variant's retail price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product's retail price (set in the Product resource's `price` field) will be used as the retail price.",
          "type": "number",
          "minimum": 0,
          "format": "double"
        },
        "weight": {
          "description": "This variant's base weight on the storefront. If this value is null, the product's default weight (set in the Product resource's weight field) will be used as the base weight.",
          "type": "number",
          "minimum": 0,
          "format": "double"
        },
        "width": {
          "description": "Width of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default width (set in the Product resource's `width` field) will be used as the base width.",
          "type": "number",
          "minimum": 0,
          "format": "double"
        },
        "height": {
          "description": "Height of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default height (set in the Product resource's `height` field) will be used as the base height.",
          "type": "number",
          "minimum": 0,
          "format": "double"
        },
        "depth": {
          "description": "Depth of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default depth (set in the Product resource's `depth` field) will be used as the base depth.",
          "type": "number",
          "minimum": 0,
          "format": "double"
        },
        "is_free_shipping": {
          "description": "Flag used to indicate whether the variant has free shipping. If `true`, the shipping cost for the variant will be zero.",
          "type": "boolean"
        },
        "fixed_cost_shipping_price": {
          "description": "A fixed shipping cost for the variant. If defined, this value will be used during checkout instead of normal shipping-cost calculation.",
          "type": "number",
          "minimum": 0,
          "format": "double"
        },
        "purchasing_disabled": {
          "description": "If `true`, this variant will not be purchasable on the storefront.",
          "type": "boolean"
        },
        "purchasing_disabled_message": {
          "description": "If `purchasing_disabled` is `true`, this message should show on the storefront when the variant is selected.",
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "upc": {
          "description": "The UPC code used in feeds for shopping comparison sites and external channel integrations.",
          "type": "string"
        },
        "inventory_level": {
          "description": "Inventory level for the variant, which is used when the product's inventory_tracking is set to `variant`.",
          "type": "integer",
          "format": "int32"
        },
        "inventory_warning_level": {
          "description": "When the variant hits this inventory level, it is considered low stock.",
          "type": "integer",
          "format": "int32"
        },
        "bin_picking_number": {
          "description": "Identifies where in a warehouse the variant is located.",
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "mpn": {
          "description": "The Manufacturer Part Number (MPN) for the variant.",
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "product_id": {
          "type": "integer",
          "format": "int32"
        },
        "sku": {
          "type": "string"
        },
        "sku_id": {
          "description": "Read-only reference to v2 API's SKU ID. Null if it is a base variant.",
          "type": "integer",
          "format": "int32"
        },
        "option_values": {
          "description": "Array of option and option values IDs that make up this variant. Will be empty if the variant is the product's base variant.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/productVariantOptionValue_Full"
          }
        },
        "calculated_price": {
          "description": "The price of the variant as seen on the storefront. This price takes into account `sale_price` and any price adjustment rules that are applicable to this variant.",
          "type": "number",
          "format": "double"
        },
        "calculated_weight": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "productVariant_Put_Product": {
      "title": "productVariant_Put_Product",
      "description": "The model for a PUT to update variants on a product.",
      "type": "object",
      "properties": {
        "cost_price": {
          "description": "The cost price of the variant. Not affected by Price List prices.",
          "type": "number",
          "minimum": 0,
          "format": "double"
        },
        "price": {
          "description": "This variant's base price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is `null`, the product's default price (set in the Product resource's `price` field) will be used as the base price.",
          "type": "number",
          "minimum": 0,
          "format": "double"
        },
        "sale_price": {
          "description": "This variant's sale price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product's sale price (set in the Product resource's `price` field) will be used as the sale price.",
          "type": "number",
          "minimum": 0,
          "format": "double"
        },
        "retail_price": {
          "description": "This variant's retail price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product's retail price (set in the Product resource's `price` field) will be used as the retail price.",
          "type": "number",
          "minimum": 0,
          "format": "double"
        },
        "weight": {
          "description": "This variant's base weight on the storefront. If this value is null, the product's default weight (set in the Product resource's weight field) will be used as the base weight.",
          "type": "number",
          "minimum": 0,
          "format": "double"
        },
        "width": {
          "description": "Width of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default width (set in the Product resource's `width` field) will be used as the base width.",
          "type": "number",
          "minimum": 0,
          "format": "double"
        },
        "height": {
          "description": "Height of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default height (set in the Product resource's `height` field) will be used as the base height.",
          "type": "number",
          "minimum": 0,
          "format": "double"
        },
        "depth": {
          "description": "Depth of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default depth (set in the Product resource's `depth` field) will be used as the base depth.",
          "type": "number",
          "minimum": 0,
          "format": "double"
        },
        "is_free_shipping": {
          "description": "Flag used to indicate whether the variant has free shipping. If `true`, the shipping cost for the variant will be zero.",
          "type": "boolean"
        },
        "fixed_cost_shipping_price": {
          "description": "A fixed shipping cost for the variant. If defined, this value will be used during checkout instead of normal shipping-cost calculation.",
          "type": "number",
          "minimum": 0,
          "format": "double"
        },
        "purchasing_disabled": {
          "description": "If `true`, this variant will not be purchasable on the storefront.",
          "type": "boolean"
        },
        "purchasing_disabled_message": {
          "description": "If `purchasing_disabled` is `true`, this message should show on the storefront when the variant is selected.",
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "upc": {
          "description": "The UPC code used in feeds for shopping comparison sites and external channel integrations.",
          "type": "string"
        },
        "inventory_level": {
          "description": "Inventory level for the variant, which is used when the product's inventory_tracking is set to `variant`.",
          "type": "integer",
          "format": "int32"
        },
        "inventory_warning_level": {
          "description": "When the variant hits this inventory level, it is considered low stock.",
          "type": "integer",
          "format": "int32"
        },
        "bin_picking_number": {
          "description": "Identifies where in a warehouse the variant is located.",
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "product_id": {
          "type": "integer",
          "format": "int32"
        },
        "sku": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255
        }
      }
    },
    "productVariantOptionValue_Full": {
      "title": "productVariantOptionValue_Full",
      "type": "object",
      "properties": {
        "option_display_name": {
          "description": "The name of the option.",
          "example": "Color",
          "type": "string",
          "minLength": 1,
          "maxLength": 255
        },
        "label": {
          "description": "The label of the option value.",
          "example": "Beige",
          "type": "string",
          "minLength": 1,
          "maxLength": 255
        },
        "id": {
          "description": "`option_value` ID.",
          "type": "integer",
          "format": "int32"
        },
        "option_id": {
          "description": "`option` ID.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "productVideo_Base": {
      "title": "productVideo_Base",
      "description": "The model for a POST to create a video on a product.",
      "type": "object",
      "properties": {
        "title": {
          "description": "The title for the video. If left blank, this will be filled in according to data on a host site.",
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "description": {
          "description": "The description for the video. If left blank, this will be filled in according to data on a host site.",
          "type": "string"
        },
        "sort_order": {
          "description": "The order in which the video will be displayed on the product page. Higher integers give the video a lower priority. When updating, if the video is given a lower priority, all videos with a `sort_order` the same as or greater than the video's new `sort_order` value will have their `sort_order`s reordered.",
          "type": "integer",
          "minimum": -2147483648,
          "maximum": 2147483647,
          "format": "int32"
        },
        "type": {
          "description": "The video type (a short name of a host site).",
          "type": "string",
          "enum": [
            "youtube"
          ]
        },
        "video_id": {
          "description": "The ID of the video on a host site.",
          "type": "string"
        }
      }
    },
    "productVideo_Full": {
      "title": "productVideo_Full",
      "description": "A product video model.",
      "type": "object",
      "properties": {
        "schema": {
          "$ref": "#/definitions/productVideo_Base"
        },
        "id": {
          "description": "The unique numeric ID of the product video; increments sequentially.",
          "type": "integer",
          "format": "int32"
        },
        "product_id": {
          "description": "The unique numeric identifier for the product with which the image is associated.",
          "type": "integer",
          "format": "int32"
        },
        "length": {
          "description": "Length of the video. This will be filled in according to data on a host site.",
          "type": "string"
        }
      }
    },
    "PurchasingDisabled": {
      "title": "PurchasingDisabled",
      "type": "object",
      "properties": {
        "status": {
          "description": "Flag for whether the modifier value disables purchasing when selected on the storefront. This can be used for temporarily disabling a particular modifier value.",
          "type": "boolean"
        },
        "message": {
          "description": "The message displayed on the storefront when the purchasing disabled status is `true`.",
          "type": "string"
        }
      }
    },
    "shippingAddress_Base": {
      "title": "shippingAddress_Base",
      "description": "Shipping Address properties common to all requests and responses.",
      "type": "object",
      "properties": {
        "first_name": {
          "type": "string",
          "example": "Jane"
        },
        "last_name": {
          "type": "string",
          "example": "Doe"
        },
        "company": {
          "type": "string"
        },
        "street_1": {
          "type": "string",
          "example": "123 Main Street",
          "description": "Street address (first line)."
        },
        "street_2": {
          "type": "string",
          "description": "Street address (second line)."
        },
        "city": {
          "type": "string",
          "example": "Austin"
        },
        "state": {
          "type": "string",
          "example": "Texas"
        },
        "zip": {
          "type": "string",
          "example": "12345",
          "description": "Zip or postal code, as a string."
        },
        "country": {
          "type": "string",
          "example": "United States"
        },
        "country_iso2": {
          "type": "string",
          "example": "US",
          "description": "2-letter ISO Alpha-2 code for the country."
        },
        "phone": {
          "type": "string",
          "description": "Recipient's telephone number."
        },
        "email": {
          "type": "string",
          "example": "janedoe@example.com",
          "description": "Recipient's email address."
        },
        "shipping_method": {
          "type": "string",
          "description": "Text code identifying the BigCommerce shipping module selected by the customer.",
          "example": "Free Shipping"
        }
      }
    },
    "shippingAddress_Resource": {
      "title": "shippingAddress_Resource",
      "type": "object",
      "properties": {
        "url": {
          "description": "URL of the shipping address for api requests",
          "example": "https://api.bigcommerce.com/stores/{$$.env.store_hash}/v2/orders/129/shippingaddresses",
          "type": "string"
        },
        "resource": {
          "example": "/orders/129/shippingaddresses",
          "type": "string"
        }
      }
    },
    "shippingQuotes_Resource": {
      "type": "object",
      "title": "shippingQuotes_Resource",
      "readOnly": true,
      "properties": {
        "url": {
          "type": "string",
          "readOnly": true,
          "description": "This URL will return a 204 for shipping quotes. To return shipping quotes:'/shipping_addresses/shipping_address_id/shipping_quotes'.",
          "example": "https://api.bigcommerce.com/stores/dxl6ittzi7/v2/orders/163/shippingaddresses/64/shippingquotes"
        },
        "resource": {
          "type": "string",
          "readOnly": true,
          "example": "orders/163/shippingaddresses/64/shippingquotes",
          "description": "This URL will return a 204 for shipping quotes. To return shipping quotes:'/shipping_addresses/shipping_address_id/shipping_quotes'."
        }
      }
    },
    "PaymentStatus": {
      "title": "PaymentStatus",
      "description": "A read-only value. Do not attempt to set or modify this value in a POST or PUT operation.",
      "type": "string",
      "enum": [
        "authorized",
        "captured",
        "capture pending",
        "declined",
        "held for review",
        "paid",
        "partially refunded",
        "pending",
        "refunded",
        "void",
        "void pending"
      ]
    },
    "PaymentMethod": {
      "title": "PaymentMethod",
      "description": "The payment method for this order. Can be one of the following: `Manual`, `Credit Card`, `cash`, `Test Payment Gateway`, etc.",
      "type": "string",
      "enum": [
        "Credit Card",
        "Cash",
        "Test Payment Gateway",
        "Manual"
      ]
    },
    "TaxProviderId": {
      "title": "TaxProviderId",
      "description": "BasicTaxProvider - Tax is set to manual.\n\nAvaTaxProvider - This is for when the tax provider has been set to automatic and the order was NOT created by the API. Used for Avalara.\n\n\"\" (blank) - When the tax provider is unknown. This includes legacy orders and orders previously created via API.\nThis can be set when creating an order using a POST.",
      "type": "string",
      "enum": [
        "BasicTaxProvider",
        "AvaTaxProvider"
      ]
    },
    "Type7": {
      "title": "Type7",
      "description": "The product type. One of: `physical` - a physical stock unit, `digital` - a digital download.",
      "type": "string",
      "enum": [
        "physical",
        "digital"
      ]
    },
    "CustomField": {
      "title": "CustomField",
      "description": "Gets custom fields associated with a product. These allow you to specify additional information that will appear on the product's page, such as a book's ISBN or a DVD's release date.",
      "type": "object",
      "properties": {
        "id": {
          "description": "The unique numeric ID of the custom field; increments sequentially. Required to update existing custom field in /PUT request.\nRead-Only",
          "example": 6,
          "type": "integer",
          "minimum": 1,
          "format": "int32"
        },
        "name": {
          "description": "The name of the field, shown on the storefront, orders, etc. Required for /POST",
          "example": "ISBN",
          "type": "string",
          "minLength": 1,
          "maxLength": 250
        },
        "value": {
          "description": "The name of the field, shown on the storefront, orders, etc. Required for /POST",
          "example": "1234567890123",
          "type": "string",
          "minLength": 1,
          "maxLength": 250
        }
      },
      "required": [
        "name",
        "value"
      ]
    },
    "OpenGraphType": {
      "title": "OpenGraphType",
      "description": "Type of product, defaults to `product`.",
      "type": "string",
      "enum": [
        "product",
        "album",
        "book",
        "drink",
        "food",
        "game",
        "movie",
        "song",
        "tv_show"
      ]
    },
    "Condition": {
      "title": "Condition",
      "description": "The product condition. Will be shown on the product page if the `is_condition_shown` field's value is `true`. Possible values: `New`, `Used`, `Refurbished`.",
      "type": "string",
      "enum": [
        "New",
        "Used",
        "Refurbished"
      ]
    },
    "GiftWrappingOptionsType": {
      "title": "GiftWrappingOptionsType",
      "description": "Type of gift-wrapping options. Values: `any` - allow any gift-wrapping options in the store; `none` - disallow gift-wrapping on the product; `list` - provide a list of IDs in the `gift_wrapping_options_list` field.",
      "type": "string",
      "enum": [
        "any",
        "none",
        "list"
      ]
    },
    "Availability": {
      "title": "Availability",
      "description": "Availability of the product. Availability options are: `available` - the product can be purchased on the storefront; `disabled` - the product is listed in the storefront, but cannot be purchased; `preorder` - the product is listed for pre-orders.",
      "type": "string",
      "enum": [
        "available",
        "disabled",
        "preorder"
      ]
    },
    "InventoryTracking": {
      "title": "InventoryTracking",
      "description": "The type of inventory tracking for the product. Values are: `none` - inventory levels will not be tracked; `product` - inventory levels will be tracked using the `inventory_level` and `inventory_warning_level` fields; `variant` - inventory levels will be tracked based on variants, which maintain their own warning levels and inventory levels.",
      "type": "string",
      "enum": [
        "none",
        "product",
        "variant"
      ]
    }
  },
  "parameters": {},
  "responses": {},
  "securityDefinitions": {
    "api_key": {
      "type": "apiKey",
      "in": "header",
      "name": "X-Auth-Token"
    }
  },
  "security": [],
  "tags": [],
  "x-ms-connector-metadata": [
    {
      "propertyName": "Website",
      "propertyValue": "https://www.bigcommerce.com/"
    },
    {
      "propertyName": "Privacy policy",
      "propertyValue": "https://www.bigcommerce.com/privacy/"
    },
    {
      "propertyName": "Categories",
      "propertyValue": "Productivity"
    }
  ],
  "externalDocs": {
    "url": "https://docs.microsoft.com/connectors/bigcommerce"
  }
}
